require ast/ast_aot_cpp
require ast/standalone_contexts

require fio
require strings


def find_argument_or(args : array<string>; key : string, def_val : string) {
    for (i in range(length(args) - 1)) {
        if (args[i] == key) {
            return args[i + 1]
        }
    }
    return def_val
}

def find_argument(args : array<string>; key : string) {
    for (i in range(length(args) - 1)) {
        if (args[i] == key) {
            return args[i + 1]
        }
    }
    panic("expected {key} argument!")
    return ""
}

[export]
def main() {
    let args <- get_command_line_arguments()

    let mode = find_argument(args, "--mode");
    if (mode == "aot") {
        let input = find_argument(args, "--input");
        let output = find_argument(args, "--output");
        let cross_platform = find_argument_or(args, "--cross_platform", "false") == "true";
        print("aot {input} to {output}\n")
        let res = aot(input, true, false, cross_platform)
        if (res |> length() > 0) {
            fopen(output, "wb") <| $(fw) {
                if (fw != null) {
                    fwrite(fw, res)
                } else {
                    print("Couldn't create output file {output}")
                }
            }
        }
    } elif (mode == "standalone_ctx") {
        let input = find_argument(args, "--input");
        let output = find_argument(args, "--output");
        let cross_platform = find_argument_or(args, "--cross_platform", "false") == "true";
        print("standalone ctx {input} to {output} cross_platform={cross_platform}\n")
        let res = standalone_aot(input, output, false, cross_platform, false)
        if (res |> length() > 0) {
            fopen(output, "wb") <| $(fw) {
                if (fw != null) {
                    fwrite(fw, res)
                } else {
                    print("Couldn't create output file {output}")
                }
            }
        }
    } elif (mode == "ast_print") {
        panic("unimplemented")
    } else {
        panic("Unknown mode {mode}")
    }
}
