%{
    #include "daScript/misc/platform.h"
    #include "daScript/ast/ast.h"
    #include "ds_parser.hpp"
    
    #ifdef FLEX_DEBUG
    #include <iostream>
    #endif
    
    using namespace std;
    using namespace das;
    
    #define YY_NO_INPUT
    
    void yyerror(const string & error, CompilationError cerr = CompilationError::syntax_error);
    
    int current_line_indent = 0;
    int indent_level = 0;
    int tab_size = 4;   // only 2,4 or 8
    int nested_parentheses = 0;
    int nested_curly_braces = 0;
    int nested_sb = 0;
    int yycolumn = 1;
    bool need_oxford_comma = true;
    
    #define YY_USER_ACTION \
        yylloc.first_line = yylloc.last_line = yylineno; \
        yylloc.first_column = yycolumn; \
        yylloc.last_column = yycolumn + yyleng - 1; \
        yycolumn += yyleng;
        
%}

%option noyywrap
%option never-interactive
%option nounistd
%option yylineno

/* %option debug */

%x indent
%x strb
%s normal

%%

<strb>\"                {
    // assert(nested_sb==0);
    BEGIN(normal);
    return END_STRING;
}
<strb>\{                {
    assert(nested_sb==0);
    nested_sb ++;
    BEGIN(normal);
	return BEGIN_STRING_EXPR;
}
<strb>[\t\r]            {
    yyerror("string constant exceeds line", CompilationError::string_constant_exceeds_file);
    return LEXER_ERROR;
}
<strb>EOF               {
    yyerror("string constant exceeds file", CompilationError::string_constant_exceeds_file);
    return LEXER_ERROR;
}
<strb>\\[\{\"]          {
    yylval.ch = yytext[1];
    return STRING_CHARACTER;
}
<strb>.                 {
    yylval.ch = *yytext;
    return STRING_CHARACTER;
}
<indent>" "             { 
	current_line_indent++; 
	#ifdef FLEX_DEBUG
		cout << "[ ], indent=" << current_line_indent << "\n";
	#endif
}
<indent>"\t"            { 
	current_line_indent = (current_line_indent + tab_size) & ~(tab_size-1);  
	#ifdef FLEX_DEBUG
		cout << "\\t, cli=" << current_line_indent <<  "\n";
	#endif
}
<indent>(\/\/.*)*\n     { 
	current_line_indent = 0; 
	need_oxford_comma = true; 
	yycolumn = 1; 
	#ifdef FLEX_DEBUG
		cout << "new line\n";
	#endif
}
<indent>.               {
    unput(*yytext);
    if (current_line_indent > indent_level*tab_size ) {
        indent_level++;
        #ifdef FLEX_DEBUG
        cout << "emit {, cli=" << current_line_indent << ", indent =" << indent_level <<"\n";
        #endif
        return '{';
    } else if (current_line_indent < indent_level*tab_size ) {
        indent_level--;
        #ifdef FLEX_DEBUG
         cout << "emit }, cli=" << current_line_indent << ", indent =" << indent_level <<"\n";
        #endif
        yycolumn--;
        return '}';
    } else {
        BEGIN(normal);
    }
}
<indent><<EOF>>         {
    if ( indent_level ) {
        indent_level--;
        unput('\r');
        #ifdef FLEX_DEBUG
        cout << "emit }\n";
        #endif
        return '}';
    } else {
        return 0;
    }
}
<normal>"for"                                           need_oxford_comma = false; return _FOR;
<normal>"while"                                         need_oxford_comma = false; return _WHILE;
<normal>"if"                                            need_oxford_comma = false; return _IF;
<normal>"elif"                                          need_oxford_comma = false; return _ELIF;
<normal>"else"                                          need_oxford_comma = false; return _ELSE;
<normal>"def"                                           need_oxford_comma = false; return _DEF;
<normal>"let"[ \t\r]*\/\/.*\n                           need_oxford_comma = false; unput('\n'); return _LET;
<normal>"let"[ \t\r]*\(                                 need_oxford_comma = false; unput('(');  return _LET;
<normal>"let"                                           return _LET;
<normal>"struct"                                        need_oxford_comma = false; return _STRUCT;
<normal>"try"                                           need_oxford_comma = false; return _TRY;
<normal>"catch"                                         need_oxford_comma = false; return _CATCH;
<normal>"options"                                       return _OPTIONS;
<normal>"operator"                                      return _OPERATOR;
<normal>"require"                                       return _REQUIRE;
<normal>"block"                                         return _BLOCK;
<normal>"const"                                         return _CONST;
<normal>"expect"                                        return _EXPECT;
<normal>"table"                                         return _TABLE;
<normal>"array"                                         return _ARRAY;
<normal>"in"                                            return _IN;
<normal>"null"                                          return _NULL;
<normal>"return"                                        return _RETURN;
<normal>"break"                                         return _BREAK;
<normal>"typename"                                      return _TYPENAME;
<normal>"type"                                          return _TYPE;
<normal>"new"                                           return _NEWT;
<normal>"sizeof"                                        return _SIZEOF;
<normal>"true"                                          return _TRUE;
<normal>"false"                                         return _FALSE;
<normal>"auto"                                          return _AUTO;
<normal>"bool"                                          return _BOOL;
<normal>"void"                                          return _VOID;
<normal>"string"                                        return _STRING;
<normal>"int"                                           return _INT;
<normal>"int64"                                         return _INT64;
<normal>"int2"                                          return _INT2;
<normal>"int3"                                          return _INT3;
<normal>"int4"                                          return _INT4;
<normal>"uint"                                          return _UINT;
<normal>"uint64"                                        return _UINT64;
<normal>"uint2"                                         return _UINT2;
<normal>"uint3"                                         return _UINT3;
<normal>"uint4"                                         return _UINT4;
<normal>"float"                                         return _FLOAT;
<normal>"float2"                                        return _FLOAT2;
<normal>"float3"                                        return _FLOAT3;
<normal>"float4"                                        return _FLOAT4;
<normal>[_[:alpha:]][_[:alnum:]]*                       yylval.s = new string(yytext);  return NAME;    // TODO: track allocations
<normal>\"                                  {
        BEGIN(strb);
        return BEGIN_STRING;
    }
<normal>[0-9]+(u|U)(l|L)                return sscanf(yytext, "%llu", &yylval.ui64)!=1 ? LEXER_ERROR : UNSIGNED_LONG_INTEGER;
<normal>[0-9]+(l|L)                     return sscanf(yytext, "%lli", &yylval.i64)!=1 ? LEXER_ERROR : LONG_INTEGER;
<normal>[0-9]+(u|U)                     return sscanf(yytext, "%u",  &yylval.ui)!=1 ? LEXER_ERROR : UNSIGNED_INTEGER;
<normal>[0-9]+                          return sscanf(yytext, "%i",  &yylval.i)!=1 ? LEXER_ERROR : INTEGER;

<normal>0[xX][0-9a-fA-F]+(u|U)(l|L)     return sscanf(yytext, "%lli", &yylval.ui64)!=1 ? LEXER_ERROR : UNSIGNED_LONG_INTEGER;
<normal>0[xX][0-9a-fA-F]+(l|L)          return sscanf(yytext, "%lli", &yylval.ui64)!=1 ? LEXER_ERROR : UNSIGNED_LONG_INTEGER;
<normal>0[xX][0-9a-fA-F]+(u|U)          return sscanf(yytext, "%i",  &yylval.ui)!=1 ? LEXER_ERROR : UNSIGNED_INTEGER;
<normal>0[xX][0-9a-fA-F]+               return sscanf(yytext, "%i",  &yylval.ui)!=1 ? LEXER_ERROR : UNSIGNED_INTEGER;

<normal>([0-9]*)?\.[0-9]+([eE][+\-]?[0-9]+)?(f|F)?      return sscanf(yytext, "%lf", &yylval.d)!=1 ? LEXER_ERROR : DOUBLE;
<normal>[0-9][0-9]*\.[0-9]+?([eE][+\-]?[0-9]+)?(f|F)?   return sscanf(yytext, "%lf", &yylval.d)!=1 ? LEXER_ERROR : DOUBLE;
<normal>[0-9]+(f|F)                                     return sscanf(yytext, "%lf", &yylval.d)!=1 ? LEXER_ERROR : DOUBLE;
<normal>[0-9]+[eE][+\-]?[0-9]+(f|F)?                    return sscanf(yytext, "%lf", &yylval.d)!=1 ? LEXER_ERROR : DOUBLE;
<normal>\)                                  {
    if ( !nested_parentheses ) {
        yyerror("mismatching parentheses", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    nested_parentheses --;
    return ')';
}
<normal>\(                                  {
    nested_parentheses ++;
    return '(';
}
<normal>\}                                  {
    if ( nested_sb ) {
        nested_sb --;
        if ( !nested_sb ) {
            BEGIN(strb);
			return END_STRING_EXPR;
        } else {
            return '}';
        }
    } else {
        if ( !nested_curly_braces ) {
            yyerror("mismatching curly braces", CompilationError::mismatching_curly_bracers);
            return LEXER_ERROR;
        }
        nested_curly_braces --;
        return '}';
    }
}
<normal>\{                                  {
    if ( nested_sb ) {
        nested_sb ++;
    } else {
        nested_curly_braces ++;
    }
    return '{';
}
<normal>"\:\:"                              return COLCOL;
<normal>"\|\>"                              return RPIPE;
<normal>\<\|[ \t\r]*\/\/.*\n                need_oxford_comma = false; unput('\n'); return LBPIPE;
<normal>\<\|[ \t\r]*\n                      need_oxford_comma = false; unput('\n'); return LBPIPE;
<normal>\<\|[ \t]\$                         need_oxford_comma = false; unput('$'); return LBPIPE;
<normal>"\<\|"                              return LPIPE;
<normal>"\?\?"                              return QQ;
<normal>"\?\."                              return QDOT;
<normal>"\-\>"                              return RARROW;
<normal>"\<\-"                              return LARROW;
<normal>"\+\="                              return ADDEQU;
<normal>"\-\="                              return SUBEQU;
<normal>"\/\="                              return DIVEQU;
<normal>"\*\="                              return MULEQU;
<normal>"\%\="                              return MODEQU;
<normal>"\&\="                              return ANDEQU;
<normal>"\|\="                              return OREQU;
<normal>"\^\="                              return XOREQU;
<normal>"\+\+"                              return ADDADD;
<normal>"\-\-"                              return SUBSUB;
<normal>"\<\="                              return LEEQU;
<normal>"\>\="                              return GREQU;
<normal>"\=\="                              return EQUEQU;
<normal>"\!\="                              return NOTEQU;
<normal>[ \t\r]                             /* skip white space */
<normal>(\/\/.*)*\n                        {
    yycolumn = 1;
    if  ( !nested_parentheses && !nested_curly_braces ) {
        bool ns = (current_line_indent!=0) && need_oxford_comma;
        current_line_indent = 0;
        need_oxford_comma = true;
        BEGIN(indent);
        #ifdef FLEX_DEBUG
        cout << "emit ;\n";
        #endif
        if ( ns )
            return ';';
    }
}
<normal>.                                   return *yytext;

%%

extern int yydebug;

void yybegin(const char * str)
{
    yydebug = 0;
    yylineno = 1;
    yycolumn = 1;
    current_line_indent = 0;
    indent_level = 0;
    nested_parentheses = 0;
    nested_curly_braces = 0;
    nested_sb = 0;
    need_oxford_comma = true;
    
    BEGIN(normal);
    yy_scan_string(str);
}
