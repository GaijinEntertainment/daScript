parse csv
    var Document: array<array<string>>

    rule(*Row as rows, EOF) <|
        return <- rows

    var Row: array<string>

    rule(*CommarSeparatedCell as cells, Cell as c, EOL) <|
        cells |> push <| c
        print("{c}\n")
        return <- cells

    var CommarSeparatedCell: string

    rule(Cell as c, ",") <|
        return <- c

    var Cell: string

    rule(QuotedCell as qc) <|
        return <- qc
    rule(NonQuotedCell as nqc) <|
        return <- nqc
    rule(PEEK(",")) <|  // allows empty cells
        return ""






    var QuotedCell: string

    rule("\"", "{EscapedChars}" as chars, "\"") <|
        print("Escaped {chars}\n")
        return chars

    var EscapedChars: void?

    rule(*EscapedChar) <|
        return null

    var EscapedChar: void?

    rule("\"\"") <|
        return null
    rule(!"\"", any) <|
        return null




    var NonQuotedCell: string

    rule("{CellContents}" as contents) <|
        return contents

    var CellContents: void?

    rule(*CellSymbol) <|
        return null

    var CellSymbol: void?

    // Cell symbol is any symbol that is not NotCellContents
    rule(!NotCellContents, any) <|
        return null

    var NotCellContents: void?

    rule(EOL) <|
        return null
    rule(",") <|
        return null



    var EOL: void?

    rule("\r\n") <|
        return null
    rule("\n") <|
        return null
    rule(EOF) <|
        return null
