MACRO(SOURCE_GROUP_FILES _groupName _fileNames )
	STRING(REGEX REPLACE "/" "\\\\" _groupNameP ${_groupName} )
	SOURCE_GROUP( ${_groupNameP} FILES ${${_fileNames}} )
	SET_SOURCE_FILES_PROPERTIES( ${${_fileNames}} PROPERTIES "MY_GROUP_NAME" ${_groupNameP} )
ENDMACRO(SOURCE_GROUP_FILES)

MACRO(SETUP_LTO _targetName)
    IF(APPLE)
        IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
            # set_property(TARGET ${_targetName} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
        ELSE()
            set_property(TARGET ${_targetName} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
        ENDIF()
    ELSEIF(UNIX)
        IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
            set_property(TARGET ${_targetName} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
        ENDIF()
    ENDIF()
ENDMACRO()

MACRO(SETUP_COMPILER)
	IF(APPLE)
		ADD_DEFINITIONS(-DITS_PLATFORM_APPLE=1)
		ADD_DEFINITIONS(-Wall -Wextra -pedantic)
        # SET(CMAKE_CXX_FLAGS_RELEASE "-O3")
        IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
		    SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-rtti -fno-exceptions -fomit-frame-pointer -fno-stack-protector -s -DDAS_FUSION=1 -DNDEBUG=1")
		    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -fno-rtti -fno-exceptions -fno-stack-protector -s -DDAS_FUSION=1 -DNDEBUG=1")
        ELSE()
            SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-rtti -fno-exceptions -fomit-frame-pointer -fno-stack-protector -g0 -DDAS_FUSION=1 -DNDEBUG=1")
            SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -fno-rtti -fno-exceptions -fno-stack-protector -s -DDAS_FUSION=1 -DNDEBUG=1")
        ENDIF()
    ELSEIF(UNIX)
        ADD_COMPILE_OPTIONS(-Wno-ignored-attributes)
		SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-rtti -fno-exceptions -fomit-frame-pointer -fno-stack-protector -s -DDAS_FUSION=1 -DNDEBUG=1")
		SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -fno-rtti -fno-exceptions -fno-stack-protector -s -DDAS_FUSION=1 -DNDEBUG=1")
	ELSEIF(WIN32)
		IF(MSVC)
			ADD_COMPILE_OPTIONS(-bigobj)
		ENDIF()
		ADD_DEFINITIONS(-DITS_PLATFORM_WIN32=1)
		ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
		string (REPLACE "/W3" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
		ADD_DEFINITIONS("/W4")
		IF(MSVC)
			IF("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
				ADD_DEFINITIONS("-DDAS_ENABLE_FPE")
				ADD_DEFINITIONS("/arch:IA32")
				ADD_DEFINITIONS("-D_TARGET_SIMD_SSE=2")
			ENDIF()
		ENDIF()
		SET(CMAKE_CXX_FLAGS_RELEASE "/MD /Ox /Ob2 /Ot /Oi /DNDEBUG=1 /DDAS_FUSION=1 /Gy /GS- /GR- /EHa")
		SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/Zi /MD /Ox /Ob2 /Ot /Oi /DNDEBUG=1 /DDAS_FUSION=1 /Gy /GS- /GR- /EHa")
	ENDIF()
ENDMACRO()

MACRO(SETUP_CPP11 _targetName)
	IF(APPLE)
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++17")
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_ARCHS "$(ARCHS_STANDARD_64_BIT)")
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH "YES")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-register")
	ENDIF()
	IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -std=c++1z -stdlib=libc++")
	ENDIF()
ENDMACRO()

MACRO(ADD_PRECOMPILED_HEADER _targetName _input _inputXcode)
	IF(APPLE)
		MESSAGE(STATUS "Enabling precompiled headers for Xcode ${CMAKE_GENERATOR}" )
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_GCC_PRECOMPILE_PREFIX_HEADER YES)
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_GCC_PREFIX_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/${_inputXcode} )
	ENDIF()
	IF(MSVC)
		GET_FILENAME_COMPONENT(_name ${_input} NAME_WE)
		GET_FILENAME_COMPONENT(_path ${_input} PATH )
		MESSAGE(STATUS "PCH path is ${_path}" )
		SET(EMPTY_PATH "" )
		IF(EMPTY_PATH STREQUAL "${_path}")
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /EHsc /Yu${_name}.h")
		    SET_SOURCE_FILES_PROPERTIES(${_name}.cpp PROPERTIES COMPILE_FLAGS "/Yc${_name}.h" )
		ELSE()
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /EHsc /Yu${_path}/${_name}.h")
		    SET_SOURCE_FILES_PROPERTIES(${_path}/${_name}.cpp PROPERTIES COMPILE_FLAGS "/Yc${_path}/${_name}.h" )
		ENDIF()
	ENDIF(MSVC)
ENDMACRO(ADD_PRECOMPILED_HEADER)

MACRO(FIND_XXD)
	find_program(XXD_BIN xxd)
ENDMACRO(FIND_XXD)

MACRO(FIND_FLEX_AND_BISON)
	find_package(BISON)
	find_package(FLEX)
ENDMACRO(FIND_FLEX_AND_BISON)

MACRO(FIND_PYTHON3)
    find_package(Python3)
ENDMACRO(FIND_PYTHON3)

MACRO(FIND_VULKAN)
    find_package(Vulkan)
ENDMACRO(FIND_VULKAN)

MACRO(XXD input)
	IF(NOT XXD_BIN)
		MESSAGE(STATUS "XXD not found, pre-generated files will be used." )
	ELSE()
		get_filename_component(input_src ${input} ABSOLUTE)
		get_filename_component(input_dir ${input_src} DIRECTORY)
		get_filename_component(input_name ${input} NAME)
		ADD_CUSTOM_COMMAND(
			DEPENDS ${input_src}
			OUTPUT ${input_src}.inc
			WORKING_DIRECTORY ${input_dir}
			COMMAND ${XXD_BIN} -i ${input_name} ${input_name}.inc
			COMMENT "compiling ${input} to c++ string")
	ENDIF()
ENDMACRO()

MACRO(FLEX input)
	IF(NOT FLEX_FOUND)
		MESSAGE(STATUS "FLEX not found, pre-generated files will be used." )
	ELSE()
		get_filename_component(input_src ${input} ABSOLUTE)
		get_filename_component(input_dir ${input_src} DIRECTORY)
		get_filename_component(input_name ${input} NAME_WE)
		get_filename_component(input_name_ext ${input} NAME)
		ADD_CUSTOM_COMMAND(
			DEPENDS ${input_src}
			OUTPUT ${input_dir}/${input_name}.cpp
			WORKING_DIRECTORY ${input_dir}
			COMMAND ${FLEX_EXECUTABLE} --outfile=${input_name}.cpp ${input_name_ext}
			COMMENT "flex (v ${FLEX_VERSION}) ${input} to ${input_dir}/${input_name}.cpp")
	ENDIF()
ENDMACRO()

MACRO(BISON input)
	IF(NOT BISON_FOUND)
		MESSAGE(STATUS "BISON not found, pre-generated files will be used." )
	ELSE()
		get_filename_component(input_src ${input} ABSOLUTE)
		get_filename_component(input_dir ${input_src} DIRECTORY)
		get_filename_component(input_name ${input} NAME_WE)
		get_filename_component(input_name_ext ${input} NAME)
		ADD_CUSTOM_COMMAND(
			DEPENDS ${input_src}
			OUTPUT ${input_dir}/${input_name}.cpp ${input_dir}/${input_name}.hpp ${input_dir}/${input_name}.output
			WORKING_DIRECTORY ${input_dir}
			COMMAND ${BISON_EXECUTABLE} --output=${input_name}.cpp --defines=${input_name}.hpp ${input_name_ext}
			COMMENT "bison (v ${BISON_VERSION}) ${input} to ${input_dir}/${input_name}.cpp + ${input_dir}/${input_name}.hpp + ${input_dir}/${input_name}.output")
	ENDIF()
ENDMACRO()

MACRO(DAS_BINDER c_header_from module_to config)
    IF(NOT Python3_FOUND OR NOT CMAKE_C_COMPILER_ID MATCHES "Clang")
        MESSAGE(STATUS "Prerequisites for dasBinder not found. Pre-generated binding files will be used.")
    ELSE()
        SET(DAS_BINDER_SRC
            utils/dasBinder/das_binder/__init__.py
            utils/dasBinder/das_binder/config.py
            utils/dasBinder/main.py
        )
        ADD_CUSTOM_COMMAND(
            DEPENDS ${c_header_from} ${config} ${DAS_BINDER_SRC}
            OUTPUT ${CMAKE_SOURCE_DIR}/${module_to}
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            VERBATIM
            COMMAND ${Python3_EXECUTABLE} -B utils/dasBinder/main.py
                --c_header_from ${c_header_from}
                --module_to ${module_to}
                --config ${config}
                --clang_c_exe ${CMAKE_C_COMPILER}
                --include_dirs "${CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES}"
                --include_dirs_sep ";"
            COMMENT "Writing generated das bindings for ${c_header_from} to ${module_to}"
        )
    ENDIF()
ENDMACRO()
