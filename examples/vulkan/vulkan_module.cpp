// generated by dasBinder

#include "daScript/daScript.h"

#include "vulkan/vulkan.h"

using namespace das;

//
// enums
//

DAS_BIND_ENUM_CAST(VkResult);
DAS_BASE_BIND_ENUM(VkResult, VkResult
,   VK_SUCCESS
,   VK_NOT_READY
,   VK_TIMEOUT
,   VK_EVENT_SET
,   VK_EVENT_RESET
,   VK_INCOMPLETE
,   VK_ERROR_OUT_OF_HOST_MEMORY
,   VK_ERROR_OUT_OF_DEVICE_MEMORY
,   VK_ERROR_INITIALIZATION_FAILED
,   VK_ERROR_DEVICE_LOST
,   VK_ERROR_MEMORY_MAP_FAILED
,   VK_ERROR_LAYER_NOT_PRESENT
,   VK_ERROR_EXTENSION_NOT_PRESENT
,   VK_ERROR_FEATURE_NOT_PRESENT
,   VK_ERROR_INCOMPATIBLE_DRIVER
,   VK_ERROR_TOO_MANY_OBJECTS
,   VK_ERROR_FORMAT_NOT_SUPPORTED
,   VK_ERROR_FRAGMENTED_POOL
,   VK_ERROR_UNKNOWN
,   VK_ERROR_OUT_OF_POOL_MEMORY
,   VK_ERROR_INVALID_EXTERNAL_HANDLE
,   VK_ERROR_FRAGMENTATION
,   VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS
,   VK_ERROR_SURFACE_LOST_KHR
,   VK_ERROR_NATIVE_WINDOW_IN_USE_KHR
,   VK_SUBOPTIMAL_KHR
,   VK_ERROR_OUT_OF_DATE_KHR
,   VK_ERROR_INCOMPATIBLE_DISPLAY_KHR
,   VK_ERROR_VALIDATION_FAILED_EXT
,   VK_ERROR_INVALID_SHADER_NV
,   VK_ERROR_INCOMPATIBLE_VERSION_KHR
,   VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT
,   VK_ERROR_NOT_PERMITTED_EXT
,   VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT
,   VK_THREAD_IDLE_KHR
,   VK_THREAD_DONE_KHR
,   VK_OPERATION_DEFERRED_KHR
,   VK_OPERATION_NOT_DEFERRED_KHR
,   VK_PIPELINE_COMPILE_REQUIRED_EXT
,   VK_ERROR_OUT_OF_POOL_MEMORY_KHR
,   VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR
,   VK_ERROR_FRAGMENTATION_EXT
,   VK_ERROR_INVALID_DEVICE_ADDRESS_EXT
,   VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR
,   VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT
,   VK_RESULT_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkStructureType);
DAS_BASE_BIND_ENUM(VkStructureType, VkStructureType
,   VK_STRUCTURE_TYPE_APPLICATION_INFO
,   VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO
,   VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO
,   VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO
,   VK_STRUCTURE_TYPE_SUBMIT_INFO
,   VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO
,   VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE
,   VK_STRUCTURE_TYPE_BIND_SPARSE_INFO
,   VK_STRUCTURE_TYPE_FENCE_CREATE_INFO
,   VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO
,   VK_STRUCTURE_TYPE_EVENT_CREATE_INFO
,   VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO
,   VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO
,   VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO
,   VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO
,   VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO
,   VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO
,   VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO
,   VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO
,   VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO
,   VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET
,   VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET
,   VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO
,   VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO
,   VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO
,   VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO
,   VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO
,   VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO
,   VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO
,   VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER
,   VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER
,   VK_STRUCTURE_TYPE_MEMORY_BARRIER
,   VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO
,   VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES
,   VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO
,   VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES
,   VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS
,   VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO
,   VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO
,   VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO
,   VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO
,   VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2
,   VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2
,   VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2
,   VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2
,   VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2
,   VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2
,   VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2
,   VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2
,   VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES
,   VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO
,   VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
,   VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES
,   VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2
,   VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO
,   VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO
,   VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO
,   VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES
,   VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES
,   VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO
,   VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO
,   VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES
,   VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO
,   VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO
,   VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO
,   VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES
,   VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO
,   VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO
,   VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES
,   VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO
,   VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2
,   VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2
,   VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2
,   VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2
,   VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2
,   VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO
,   VK_STRUCTURE_TYPE_SUBPASS_END_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES
,   VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES
,   VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES
,   VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES
,   VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO
,   VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO
,   VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES
,   VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT
,   VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES
,   VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO
,   VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO
,   VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO
,   VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES
,   VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO
,   VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO
,   VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO
,   VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO
,   VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PRESENT_INFO_KHR
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR
,   VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR
,   VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR
,   VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD
,   VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT
,   VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT
,   VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT
,   VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX
,   VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX
,   VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD
,   VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV
,   VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV
,   VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV
,   VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV
,   VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV
,   VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT
,   VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT
,   VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT
,   VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR
,   VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR
,   VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR
,   VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR
,   VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR
,   VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR
,   VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
,   VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
,   VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR
,   VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR
,   VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR
,   VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT
,   VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT
,   VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR
,   VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT
,   VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT
,   VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT
,   VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT
,   VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX
,   VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_HDR_METADATA_EXT
,   VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR
,   VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR
,   VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR
,   VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR
,   VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR
,   VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR
,   VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR
,   VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR
,   VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR
,   VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR
,   VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR
,   VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR
,   VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR
,   VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR
,   VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR
,   VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR
,   VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK
,   VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK
,   VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT
,   VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT
,   VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT
,   VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT
,   VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID
,   VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID
,   VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID
,   VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
,   VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
,   VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT
,   VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT
,   VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR
,   VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR
,   VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR
,   VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR
,   VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV
,   VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT
,   VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT
,   VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV
,   VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_GEOMETRY_NV
,   VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV
,   VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV
,   VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV
,   VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT
,   VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT
,   VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD
,   VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD
,   VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP
,   VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV
,   VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV
,   VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV
,   VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL
,   VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL
,   VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL
,   VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL
,   VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL
,   VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL
,   VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD
,   VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD
,   VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA
,   VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT
,   VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT
,   VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT
,   VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV
,   VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV
,   VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT
,   VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT
,   VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT
,   VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT
,   VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT
,   VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR
,   VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR
,   VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR
,   VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV
,   VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV
,   VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV
,   VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM
,   VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT
,   VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV
,   VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT
,   VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES
,   VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR
,   VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR
,   VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR
,   VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR
,   VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR
,   VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR
,   VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR
,   VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR
,   VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR
,   VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR
,   VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR
,   VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR
,   VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR
,   VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR
,   VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR
,   VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR
,   VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR
,   VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR
,   VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR
,   VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR
,   VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR
,   VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR
,   VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR
,   VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR
,   VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR
,   VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR
,   VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR
,   VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR
,   VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR
,   VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR
,   VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR
,   VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR
,   VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT
,   VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV
,   VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR
,   VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR
,   VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR
,   VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR
,   VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR
,   VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR
,   VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT
,   VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT
,   VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR
,   VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR
,   VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR
,   VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR
,   VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR
,   VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT
,   VK_STRUCTURE_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkImageLayout);
DAS_BASE_BIND_ENUM(VkImageLayout, VkImageLayout
,   VK_IMAGE_LAYOUT_UNDEFINED
,   VK_IMAGE_LAYOUT_GENERAL
,   VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
,   VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL
,   VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL
,   VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL
,   VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL
,   VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL
,   VK_IMAGE_LAYOUT_PREINITIALIZED
,   VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL
,   VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL
,   VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL
,   VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL
,   VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL
,   VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL
,   VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
,   VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR
,   VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV
,   VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT
,   VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR
,   VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR
,   VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR
,   VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR
,   VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR
,   VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR
,   VK_IMAGE_LAYOUT_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkObjectType);
DAS_BASE_BIND_ENUM(VkObjectType, VkObjectType
,   VK_OBJECT_TYPE_UNKNOWN
,   VK_OBJECT_TYPE_INSTANCE
,   VK_OBJECT_TYPE_PHYSICAL_DEVICE
,   VK_OBJECT_TYPE_DEVICE
,   VK_OBJECT_TYPE_QUEUE
,   VK_OBJECT_TYPE_SEMAPHORE
,   VK_OBJECT_TYPE_COMMAND_BUFFER
,   VK_OBJECT_TYPE_FENCE
,   VK_OBJECT_TYPE_DEVICE_MEMORY
,   VK_OBJECT_TYPE_BUFFER
,   VK_OBJECT_TYPE_IMAGE
,   VK_OBJECT_TYPE_EVENT
,   VK_OBJECT_TYPE_QUERY_POOL
,   VK_OBJECT_TYPE_BUFFER_VIEW
,   VK_OBJECT_TYPE_IMAGE_VIEW
,   VK_OBJECT_TYPE_SHADER_MODULE
,   VK_OBJECT_TYPE_PIPELINE_CACHE
,   VK_OBJECT_TYPE_PIPELINE_LAYOUT
,   VK_OBJECT_TYPE_RENDER_PASS
,   VK_OBJECT_TYPE_PIPELINE
,   VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT
,   VK_OBJECT_TYPE_SAMPLER
,   VK_OBJECT_TYPE_DESCRIPTOR_POOL
,   VK_OBJECT_TYPE_DESCRIPTOR_SET
,   VK_OBJECT_TYPE_FRAMEBUFFER
,   VK_OBJECT_TYPE_COMMAND_POOL
,   VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION
,   VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE
,   VK_OBJECT_TYPE_SURFACE_KHR
,   VK_OBJECT_TYPE_SWAPCHAIN_KHR
,   VK_OBJECT_TYPE_DISPLAY_KHR
,   VK_OBJECT_TYPE_DISPLAY_MODE_KHR
,   VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT
,   VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT
,   VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR
,   VK_OBJECT_TYPE_VALIDATION_CACHE_EXT
,   VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL
,   VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR
,   VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV
,   VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT
,   VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR
,   VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR
,   VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV
,   VK_OBJECT_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkVendorId);
DAS_BASE_BIND_ENUM(VkVendorId, VkVendorId
,   VK_VENDOR_ID_VIV
,   VK_VENDOR_ID_VSI
,   VK_VENDOR_ID_KAZAN
,   VK_VENDOR_ID_CODEPLAY
,   VK_VENDOR_ID_MESA
,   VK_VENDOR_ID_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPipelineCacheHeaderVersion);
DAS_BASE_BIND_ENUM(VkPipelineCacheHeaderVersion, VkPipelineCacheHeaderVersion
,   VK_PIPELINE_CACHE_HEADER_VERSION_ONE
,   VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSystemAllocationScope);
DAS_BASE_BIND_ENUM(VkSystemAllocationScope, VkSystemAllocationScope
,   VK_SYSTEM_ALLOCATION_SCOPE_COMMAND
,   VK_SYSTEM_ALLOCATION_SCOPE_OBJECT
,   VK_SYSTEM_ALLOCATION_SCOPE_CACHE
,   VK_SYSTEM_ALLOCATION_SCOPE_DEVICE
,   VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE
,   VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkInternalAllocationType);
DAS_BASE_BIND_ENUM(VkInternalAllocationType, VkInternalAllocationType
,   VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE
,   VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkFormat);
DAS_BASE_BIND_ENUM(VkFormat, VkFormat
,   VK_FORMAT_UNDEFINED
,   VK_FORMAT_R4G4_UNORM_PACK8
,   VK_FORMAT_R4G4B4A4_UNORM_PACK16
,   VK_FORMAT_B4G4R4A4_UNORM_PACK16
,   VK_FORMAT_R5G6B5_UNORM_PACK16
,   VK_FORMAT_B5G6R5_UNORM_PACK16
,   VK_FORMAT_R5G5B5A1_UNORM_PACK16
,   VK_FORMAT_B5G5R5A1_UNORM_PACK16
,   VK_FORMAT_A1R5G5B5_UNORM_PACK16
,   VK_FORMAT_R8_UNORM
,   VK_FORMAT_R8_SNORM
,   VK_FORMAT_R8_USCALED
,   VK_FORMAT_R8_SSCALED
,   VK_FORMAT_R8_UINT
,   VK_FORMAT_R8_SINT
,   VK_FORMAT_R8_SRGB
,   VK_FORMAT_R8G8_UNORM
,   VK_FORMAT_R8G8_SNORM
,   VK_FORMAT_R8G8_USCALED
,   VK_FORMAT_R8G8_SSCALED
,   VK_FORMAT_R8G8_UINT
,   VK_FORMAT_R8G8_SINT
,   VK_FORMAT_R8G8_SRGB
,   VK_FORMAT_R8G8B8_UNORM
,   VK_FORMAT_R8G8B8_SNORM
,   VK_FORMAT_R8G8B8_USCALED
,   VK_FORMAT_R8G8B8_SSCALED
,   VK_FORMAT_R8G8B8_UINT
,   VK_FORMAT_R8G8B8_SINT
,   VK_FORMAT_R8G8B8_SRGB
,   VK_FORMAT_B8G8R8_UNORM
,   VK_FORMAT_B8G8R8_SNORM
,   VK_FORMAT_B8G8R8_USCALED
,   VK_FORMAT_B8G8R8_SSCALED
,   VK_FORMAT_B8G8R8_UINT
,   VK_FORMAT_B8G8R8_SINT
,   VK_FORMAT_B8G8R8_SRGB
,   VK_FORMAT_R8G8B8A8_UNORM
,   VK_FORMAT_R8G8B8A8_SNORM
,   VK_FORMAT_R8G8B8A8_USCALED
,   VK_FORMAT_R8G8B8A8_SSCALED
,   VK_FORMAT_R8G8B8A8_UINT
,   VK_FORMAT_R8G8B8A8_SINT
,   VK_FORMAT_R8G8B8A8_SRGB
,   VK_FORMAT_B8G8R8A8_UNORM
,   VK_FORMAT_B8G8R8A8_SNORM
,   VK_FORMAT_B8G8R8A8_USCALED
,   VK_FORMAT_B8G8R8A8_SSCALED
,   VK_FORMAT_B8G8R8A8_UINT
,   VK_FORMAT_B8G8R8A8_SINT
,   VK_FORMAT_B8G8R8A8_SRGB
,   VK_FORMAT_A8B8G8R8_UNORM_PACK32
,   VK_FORMAT_A8B8G8R8_SNORM_PACK32
,   VK_FORMAT_A8B8G8R8_USCALED_PACK32
,   VK_FORMAT_A8B8G8R8_SSCALED_PACK32
,   VK_FORMAT_A8B8G8R8_UINT_PACK32
,   VK_FORMAT_A8B8G8R8_SINT_PACK32
,   VK_FORMAT_A8B8G8R8_SRGB_PACK32
,   VK_FORMAT_A2R10G10B10_UNORM_PACK32
,   VK_FORMAT_A2R10G10B10_SNORM_PACK32
,   VK_FORMAT_A2R10G10B10_USCALED_PACK32
,   VK_FORMAT_A2R10G10B10_SSCALED_PACK32
,   VK_FORMAT_A2R10G10B10_UINT_PACK32
,   VK_FORMAT_A2R10G10B10_SINT_PACK32
,   VK_FORMAT_A2B10G10R10_UNORM_PACK32
,   VK_FORMAT_A2B10G10R10_SNORM_PACK32
,   VK_FORMAT_A2B10G10R10_USCALED_PACK32
,   VK_FORMAT_A2B10G10R10_SSCALED_PACK32
,   VK_FORMAT_A2B10G10R10_UINT_PACK32
,   VK_FORMAT_A2B10G10R10_SINT_PACK32
,   VK_FORMAT_R16_UNORM
,   VK_FORMAT_R16_SNORM
,   VK_FORMAT_R16_USCALED
,   VK_FORMAT_R16_SSCALED
,   VK_FORMAT_R16_UINT
,   VK_FORMAT_R16_SINT
,   VK_FORMAT_R16_SFLOAT
,   VK_FORMAT_R16G16_UNORM
,   VK_FORMAT_R16G16_SNORM
,   VK_FORMAT_R16G16_USCALED
,   VK_FORMAT_R16G16_SSCALED
,   VK_FORMAT_R16G16_UINT
,   VK_FORMAT_R16G16_SINT
,   VK_FORMAT_R16G16_SFLOAT
,   VK_FORMAT_R16G16B16_UNORM
,   VK_FORMAT_R16G16B16_SNORM
,   VK_FORMAT_R16G16B16_USCALED
,   VK_FORMAT_R16G16B16_SSCALED
,   VK_FORMAT_R16G16B16_UINT
,   VK_FORMAT_R16G16B16_SINT
,   VK_FORMAT_R16G16B16_SFLOAT
,   VK_FORMAT_R16G16B16A16_UNORM
,   VK_FORMAT_R16G16B16A16_SNORM
,   VK_FORMAT_R16G16B16A16_USCALED
,   VK_FORMAT_R16G16B16A16_SSCALED
,   VK_FORMAT_R16G16B16A16_UINT
,   VK_FORMAT_R16G16B16A16_SINT
,   VK_FORMAT_R16G16B16A16_SFLOAT
,   VK_FORMAT_R32_UINT
,   VK_FORMAT_R32_SINT
,   VK_FORMAT_R32_SFLOAT
,   VK_FORMAT_R32G32_UINT
,   VK_FORMAT_R32G32_SINT
,   VK_FORMAT_R32G32_SFLOAT
,   VK_FORMAT_R32G32B32_UINT
,   VK_FORMAT_R32G32B32_SINT
,   VK_FORMAT_R32G32B32_SFLOAT
,   VK_FORMAT_R32G32B32A32_UINT
,   VK_FORMAT_R32G32B32A32_SINT
,   VK_FORMAT_R32G32B32A32_SFLOAT
,   VK_FORMAT_R64_UINT
,   VK_FORMAT_R64_SINT
,   VK_FORMAT_R64_SFLOAT
,   VK_FORMAT_R64G64_UINT
,   VK_FORMAT_R64G64_SINT
,   VK_FORMAT_R64G64_SFLOAT
,   VK_FORMAT_R64G64B64_UINT
,   VK_FORMAT_R64G64B64_SINT
,   VK_FORMAT_R64G64B64_SFLOAT
,   VK_FORMAT_R64G64B64A64_UINT
,   VK_FORMAT_R64G64B64A64_SINT
,   VK_FORMAT_R64G64B64A64_SFLOAT
,   VK_FORMAT_B10G11R11_UFLOAT_PACK32
,   VK_FORMAT_E5B9G9R9_UFLOAT_PACK32
,   VK_FORMAT_D16_UNORM
,   VK_FORMAT_X8_D24_UNORM_PACK32
,   VK_FORMAT_D32_SFLOAT
,   VK_FORMAT_S8_UINT
,   VK_FORMAT_D16_UNORM_S8_UINT
,   VK_FORMAT_D24_UNORM_S8_UINT
,   VK_FORMAT_D32_SFLOAT_S8_UINT
,   VK_FORMAT_BC1_RGB_UNORM_BLOCK
,   VK_FORMAT_BC1_RGB_SRGB_BLOCK
,   VK_FORMAT_BC1_RGBA_UNORM_BLOCK
,   VK_FORMAT_BC1_RGBA_SRGB_BLOCK
,   VK_FORMAT_BC2_UNORM_BLOCK
,   VK_FORMAT_BC2_SRGB_BLOCK
,   VK_FORMAT_BC3_UNORM_BLOCK
,   VK_FORMAT_BC3_SRGB_BLOCK
,   VK_FORMAT_BC4_UNORM_BLOCK
,   VK_FORMAT_BC4_SNORM_BLOCK
,   VK_FORMAT_BC5_UNORM_BLOCK
,   VK_FORMAT_BC5_SNORM_BLOCK
,   VK_FORMAT_BC6H_UFLOAT_BLOCK
,   VK_FORMAT_BC6H_SFLOAT_BLOCK
,   VK_FORMAT_BC7_UNORM_BLOCK
,   VK_FORMAT_BC7_SRGB_BLOCK
,   VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK
,   VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK
,   VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK
,   VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK
,   VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK
,   VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK
,   VK_FORMAT_EAC_R11_UNORM_BLOCK
,   VK_FORMAT_EAC_R11_SNORM_BLOCK
,   VK_FORMAT_EAC_R11G11_UNORM_BLOCK
,   VK_FORMAT_EAC_R11G11_SNORM_BLOCK
,   VK_FORMAT_ASTC_4x4_UNORM_BLOCK
,   VK_FORMAT_ASTC_4x4_SRGB_BLOCK
,   VK_FORMAT_ASTC_5x4_UNORM_BLOCK
,   VK_FORMAT_ASTC_5x4_SRGB_BLOCK
,   VK_FORMAT_ASTC_5x5_UNORM_BLOCK
,   VK_FORMAT_ASTC_5x5_SRGB_BLOCK
,   VK_FORMAT_ASTC_6x5_UNORM_BLOCK
,   VK_FORMAT_ASTC_6x5_SRGB_BLOCK
,   VK_FORMAT_ASTC_6x6_UNORM_BLOCK
,   VK_FORMAT_ASTC_6x6_SRGB_BLOCK
,   VK_FORMAT_ASTC_8x5_UNORM_BLOCK
,   VK_FORMAT_ASTC_8x5_SRGB_BLOCK
,   VK_FORMAT_ASTC_8x6_UNORM_BLOCK
,   VK_FORMAT_ASTC_8x6_SRGB_BLOCK
,   VK_FORMAT_ASTC_8x8_UNORM_BLOCK
,   VK_FORMAT_ASTC_8x8_SRGB_BLOCK
,   VK_FORMAT_ASTC_10x5_UNORM_BLOCK
,   VK_FORMAT_ASTC_10x5_SRGB_BLOCK
,   VK_FORMAT_ASTC_10x6_UNORM_BLOCK
,   VK_FORMAT_ASTC_10x6_SRGB_BLOCK
,   VK_FORMAT_ASTC_10x8_UNORM_BLOCK
,   VK_FORMAT_ASTC_10x8_SRGB_BLOCK
,   VK_FORMAT_ASTC_10x10_UNORM_BLOCK
,   VK_FORMAT_ASTC_10x10_SRGB_BLOCK
,   VK_FORMAT_ASTC_12x10_UNORM_BLOCK
,   VK_FORMAT_ASTC_12x10_SRGB_BLOCK
,   VK_FORMAT_ASTC_12x12_UNORM_BLOCK
,   VK_FORMAT_ASTC_12x12_SRGB_BLOCK
,   VK_FORMAT_G8B8G8R8_422_UNORM
,   VK_FORMAT_B8G8R8G8_422_UNORM
,   VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM
,   VK_FORMAT_G8_B8R8_2PLANE_420_UNORM
,   VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM
,   VK_FORMAT_G8_B8R8_2PLANE_422_UNORM
,   VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM
,   VK_FORMAT_R10X6_UNORM_PACK16
,   VK_FORMAT_R10X6G10X6_UNORM_2PACK16
,   VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16
,   VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16
,   VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16
,   VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
,   VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16
,   VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
,   VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16
,   VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
,   VK_FORMAT_R12X4_UNORM_PACK16
,   VK_FORMAT_R12X4G12X4_UNORM_2PACK16
,   VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16
,   VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16
,   VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16
,   VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
,   VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16
,   VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
,   VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16
,   VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
,   VK_FORMAT_G16B16G16R16_422_UNORM
,   VK_FORMAT_B16G16R16G16_422_UNORM
,   VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM
,   VK_FORMAT_G16_B16R16_2PLANE_420_UNORM
,   VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM
,   VK_FORMAT_G16_B16R16_2PLANE_422_UNORM
,   VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM
,   VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG
,   VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG
,   VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG
,   VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG
,   VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG
,   VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG
,   VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG
,   VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG
,   VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT
,   VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT
,   VK_FORMAT_G8B8G8R8_422_UNORM_KHR
,   VK_FORMAT_B8G8R8G8_422_UNORM_KHR
,   VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR
,   VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR
,   VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR
,   VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR
,   VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR
,   VK_FORMAT_R10X6_UNORM_PACK16_KHR
,   VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR
,   VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR
,   VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR
,   VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR
,   VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR
,   VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR
,   VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR
,   VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR
,   VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR
,   VK_FORMAT_R12X4_UNORM_PACK16_KHR
,   VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR
,   VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR
,   VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR
,   VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR
,   VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR
,   VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR
,   VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR
,   VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR
,   VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR
,   VK_FORMAT_G16B16G16R16_422_UNORM_KHR
,   VK_FORMAT_B16G16R16G16_422_UNORM_KHR
,   VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR
,   VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR
,   VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR
,   VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR
,   VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR
,   VK_FORMAT_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkImageTiling);
DAS_BASE_BIND_ENUM(VkImageTiling, VkImageTiling
,   VK_IMAGE_TILING_OPTIMAL
,   VK_IMAGE_TILING_LINEAR
,   VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT
,   VK_IMAGE_TILING_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkImageType);
DAS_BASE_BIND_ENUM(VkImageType, VkImageType
,   VK_IMAGE_TYPE_1D
,   VK_IMAGE_TYPE_2D
,   VK_IMAGE_TYPE_3D
,   VK_IMAGE_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPhysicalDeviceType);
DAS_BASE_BIND_ENUM(VkPhysicalDeviceType, VkPhysicalDeviceType
,   VK_PHYSICAL_DEVICE_TYPE_OTHER
,   VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU
,   VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU
,   VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU
,   VK_PHYSICAL_DEVICE_TYPE_CPU
,   VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkQueryType);
DAS_BASE_BIND_ENUM(VkQueryType, VkQueryType
,   VK_QUERY_TYPE_OCCLUSION
,   VK_QUERY_TYPE_PIPELINE_STATISTICS
,   VK_QUERY_TYPE_TIMESTAMP
,   VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT
,   VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR
,   VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR
,   VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR
,   VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL
,   VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV
,   VK_QUERY_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSharingMode);
DAS_BASE_BIND_ENUM(VkSharingMode, VkSharingMode
,   VK_SHARING_MODE_EXCLUSIVE
,   VK_SHARING_MODE_CONCURRENT
,   VK_SHARING_MODE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkComponentSwizzle);
DAS_BASE_BIND_ENUM(VkComponentSwizzle, VkComponentSwizzle
,   VK_COMPONENT_SWIZZLE_IDENTITY
,   VK_COMPONENT_SWIZZLE_ZERO
,   VK_COMPONENT_SWIZZLE_ONE
,   VK_COMPONENT_SWIZZLE_R
,   VK_COMPONENT_SWIZZLE_G
,   VK_COMPONENT_SWIZZLE_B
,   VK_COMPONENT_SWIZZLE_A
,   VK_COMPONENT_SWIZZLE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkImageViewType);
DAS_BASE_BIND_ENUM(VkImageViewType, VkImageViewType
,   VK_IMAGE_VIEW_TYPE_1D
,   VK_IMAGE_VIEW_TYPE_2D
,   VK_IMAGE_VIEW_TYPE_3D
,   VK_IMAGE_VIEW_TYPE_CUBE
,   VK_IMAGE_VIEW_TYPE_1D_ARRAY
,   VK_IMAGE_VIEW_TYPE_2D_ARRAY
,   VK_IMAGE_VIEW_TYPE_CUBE_ARRAY
,   VK_IMAGE_VIEW_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkBlendFactor);
DAS_BASE_BIND_ENUM(VkBlendFactor, VkBlendFactor
,   VK_BLEND_FACTOR_ZERO
,   VK_BLEND_FACTOR_ONE
,   VK_BLEND_FACTOR_SRC_COLOR
,   VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR
,   VK_BLEND_FACTOR_DST_COLOR
,   VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR
,   VK_BLEND_FACTOR_SRC_ALPHA
,   VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
,   VK_BLEND_FACTOR_DST_ALPHA
,   VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA
,   VK_BLEND_FACTOR_CONSTANT_COLOR
,   VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR
,   VK_BLEND_FACTOR_CONSTANT_ALPHA
,   VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA
,   VK_BLEND_FACTOR_SRC_ALPHA_SATURATE
,   VK_BLEND_FACTOR_SRC1_COLOR
,   VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR
,   VK_BLEND_FACTOR_SRC1_ALPHA
,   VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA
,   VK_BLEND_FACTOR_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkBlendOp);
DAS_BASE_BIND_ENUM(VkBlendOp, VkBlendOp
,   VK_BLEND_OP_ADD
,   VK_BLEND_OP_SUBTRACT
,   VK_BLEND_OP_REVERSE_SUBTRACT
,   VK_BLEND_OP_MIN
,   VK_BLEND_OP_MAX
,   VK_BLEND_OP_ZERO_EXT
,   VK_BLEND_OP_SRC_EXT
,   VK_BLEND_OP_DST_EXT
,   VK_BLEND_OP_SRC_OVER_EXT
,   VK_BLEND_OP_DST_OVER_EXT
,   VK_BLEND_OP_SRC_IN_EXT
,   VK_BLEND_OP_DST_IN_EXT
,   VK_BLEND_OP_SRC_OUT_EXT
,   VK_BLEND_OP_DST_OUT_EXT
,   VK_BLEND_OP_SRC_ATOP_EXT
,   VK_BLEND_OP_DST_ATOP_EXT
,   VK_BLEND_OP_XOR_EXT
,   VK_BLEND_OP_MULTIPLY_EXT
,   VK_BLEND_OP_SCREEN_EXT
,   VK_BLEND_OP_OVERLAY_EXT
,   VK_BLEND_OP_DARKEN_EXT
,   VK_BLEND_OP_LIGHTEN_EXT
,   VK_BLEND_OP_COLORDODGE_EXT
,   VK_BLEND_OP_COLORBURN_EXT
,   VK_BLEND_OP_HARDLIGHT_EXT
,   VK_BLEND_OP_SOFTLIGHT_EXT
,   VK_BLEND_OP_DIFFERENCE_EXT
,   VK_BLEND_OP_EXCLUSION_EXT
,   VK_BLEND_OP_INVERT_EXT
,   VK_BLEND_OP_INVERT_RGB_EXT
,   VK_BLEND_OP_LINEARDODGE_EXT
,   VK_BLEND_OP_LINEARBURN_EXT
,   VK_BLEND_OP_VIVIDLIGHT_EXT
,   VK_BLEND_OP_LINEARLIGHT_EXT
,   VK_BLEND_OP_PINLIGHT_EXT
,   VK_BLEND_OP_HARDMIX_EXT
,   VK_BLEND_OP_HSL_HUE_EXT
,   VK_BLEND_OP_HSL_SATURATION_EXT
,   VK_BLEND_OP_HSL_COLOR_EXT
,   VK_BLEND_OP_HSL_LUMINOSITY_EXT
,   VK_BLEND_OP_PLUS_EXT
,   VK_BLEND_OP_PLUS_CLAMPED_EXT
,   VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT
,   VK_BLEND_OP_PLUS_DARKER_EXT
,   VK_BLEND_OP_MINUS_EXT
,   VK_BLEND_OP_MINUS_CLAMPED_EXT
,   VK_BLEND_OP_CONTRAST_EXT
,   VK_BLEND_OP_INVERT_OVG_EXT
,   VK_BLEND_OP_RED_EXT
,   VK_BLEND_OP_GREEN_EXT
,   VK_BLEND_OP_BLUE_EXT
,   VK_BLEND_OP_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkCompareOp);
DAS_BASE_BIND_ENUM(VkCompareOp, VkCompareOp
,   VK_COMPARE_OP_NEVER
,   VK_COMPARE_OP_LESS
,   VK_COMPARE_OP_EQUAL
,   VK_COMPARE_OP_LESS_OR_EQUAL
,   VK_COMPARE_OP_GREATER
,   VK_COMPARE_OP_NOT_EQUAL
,   VK_COMPARE_OP_GREATER_OR_EQUAL
,   VK_COMPARE_OP_ALWAYS
,   VK_COMPARE_OP_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkDynamicState);
DAS_BASE_BIND_ENUM(VkDynamicState, VkDynamicState
,   VK_DYNAMIC_STATE_VIEWPORT
,   VK_DYNAMIC_STATE_SCISSOR
,   VK_DYNAMIC_STATE_LINE_WIDTH
,   VK_DYNAMIC_STATE_DEPTH_BIAS
,   VK_DYNAMIC_STATE_BLEND_CONSTANTS
,   VK_DYNAMIC_STATE_DEPTH_BOUNDS
,   VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK
,   VK_DYNAMIC_STATE_STENCIL_WRITE_MASK
,   VK_DYNAMIC_STATE_STENCIL_REFERENCE
,   VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV
,   VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT
,   VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT
,   VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV
,   VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV
,   VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV
,   VK_DYNAMIC_STATE_LINE_STIPPLE_EXT
,   VK_DYNAMIC_STATE_CULL_MODE_EXT
,   VK_DYNAMIC_STATE_FRONT_FACE_EXT
,   VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT
,   VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT
,   VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT
,   VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT
,   VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT
,   VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT
,   VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT
,   VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT
,   VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT
,   VK_DYNAMIC_STATE_STENCIL_OP_EXT
,   VK_DYNAMIC_STATE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkFrontFace);
DAS_BASE_BIND_ENUM(VkFrontFace, VkFrontFace
,   VK_FRONT_FACE_COUNTER_CLOCKWISE
,   VK_FRONT_FACE_CLOCKWISE
,   VK_FRONT_FACE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkVertexInputRate);
DAS_BASE_BIND_ENUM(VkVertexInputRate, VkVertexInputRate
,   VK_VERTEX_INPUT_RATE_VERTEX
,   VK_VERTEX_INPUT_RATE_INSTANCE
,   VK_VERTEX_INPUT_RATE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPrimitiveTopology);
DAS_BASE_BIND_ENUM(VkPrimitiveTopology, VkPrimitiveTopology
,   VK_PRIMITIVE_TOPOLOGY_POINT_LIST
,   VK_PRIMITIVE_TOPOLOGY_LINE_LIST
,   VK_PRIMITIVE_TOPOLOGY_LINE_STRIP
,   VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST
,   VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP
,   VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN
,   VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY
,   VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY
,   VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY
,   VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY
,   VK_PRIMITIVE_TOPOLOGY_PATCH_LIST
,   VK_PRIMITIVE_TOPOLOGY_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPolygonMode);
DAS_BASE_BIND_ENUM(VkPolygonMode, VkPolygonMode
,   VK_POLYGON_MODE_FILL
,   VK_POLYGON_MODE_LINE
,   VK_POLYGON_MODE_POINT
,   VK_POLYGON_MODE_FILL_RECTANGLE_NV
,   VK_POLYGON_MODE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkStencilOp);
DAS_BASE_BIND_ENUM(VkStencilOp, VkStencilOp
,   VK_STENCIL_OP_KEEP
,   VK_STENCIL_OP_ZERO
,   VK_STENCIL_OP_REPLACE
,   VK_STENCIL_OP_INCREMENT_AND_CLAMP
,   VK_STENCIL_OP_DECREMENT_AND_CLAMP
,   VK_STENCIL_OP_INVERT
,   VK_STENCIL_OP_INCREMENT_AND_WRAP
,   VK_STENCIL_OP_DECREMENT_AND_WRAP
,   VK_STENCIL_OP_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkLogicOp);
DAS_BASE_BIND_ENUM(VkLogicOp, VkLogicOp
,   VK_LOGIC_OP_CLEAR
,   VK_LOGIC_OP_AND
,   VK_LOGIC_OP_AND_REVERSE
,   VK_LOGIC_OP_COPY
,   VK_LOGIC_OP_AND_INVERTED
,   VK_LOGIC_OP_NO_OP
,   VK_LOGIC_OP_XOR
,   VK_LOGIC_OP_OR
,   VK_LOGIC_OP_NOR
,   VK_LOGIC_OP_EQUIVALENT
,   VK_LOGIC_OP_INVERT
,   VK_LOGIC_OP_OR_REVERSE
,   VK_LOGIC_OP_COPY_INVERTED
,   VK_LOGIC_OP_OR_INVERTED
,   VK_LOGIC_OP_NAND
,   VK_LOGIC_OP_SET
,   VK_LOGIC_OP_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkBorderColor);
DAS_BASE_BIND_ENUM(VkBorderColor, VkBorderColor
,   VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK
,   VK_BORDER_COLOR_INT_TRANSPARENT_BLACK
,   VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK
,   VK_BORDER_COLOR_INT_OPAQUE_BLACK
,   VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE
,   VK_BORDER_COLOR_INT_OPAQUE_WHITE
,   VK_BORDER_COLOR_FLOAT_CUSTOM_EXT
,   VK_BORDER_COLOR_INT_CUSTOM_EXT
,   VK_BORDER_COLOR_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkFilter);
DAS_BASE_BIND_ENUM(VkFilter, VkFilter
,   VK_FILTER_NEAREST
,   VK_FILTER_LINEAR
,   VK_FILTER_CUBIC_IMG
,   VK_FILTER_CUBIC_EXT
,   VK_FILTER_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSamplerAddressMode);
DAS_BASE_BIND_ENUM(VkSamplerAddressMode, VkSamplerAddressMode
,   VK_SAMPLER_ADDRESS_MODE_REPEAT
,   VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT
,   VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
,   VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER
,   VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE
,   VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR
,   VK_SAMPLER_ADDRESS_MODE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSamplerMipmapMode);
DAS_BASE_BIND_ENUM(VkSamplerMipmapMode, VkSamplerMipmapMode
,   VK_SAMPLER_MIPMAP_MODE_NEAREST
,   VK_SAMPLER_MIPMAP_MODE_LINEAR
,   VK_SAMPLER_MIPMAP_MODE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkDescriptorType);
DAS_BASE_BIND_ENUM(VkDescriptorType, VkDescriptorType
,   VK_DESCRIPTOR_TYPE_SAMPLER
,   VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER
,   VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE
,   VK_DESCRIPTOR_TYPE_STORAGE_IMAGE
,   VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER
,   VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER
,   VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER
,   VK_DESCRIPTOR_TYPE_STORAGE_BUFFER
,   VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC
,   VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC
,   VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT
,   VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT
,   VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR
,   VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV
,   VK_DESCRIPTOR_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkAttachmentLoadOp);
DAS_BASE_BIND_ENUM(VkAttachmentLoadOp, VkAttachmentLoadOp
,   VK_ATTACHMENT_LOAD_OP_LOAD
,   VK_ATTACHMENT_LOAD_OP_CLEAR
,   VK_ATTACHMENT_LOAD_OP_DONT_CARE
,   VK_ATTACHMENT_LOAD_OP_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkAttachmentStoreOp);
DAS_BASE_BIND_ENUM(VkAttachmentStoreOp, VkAttachmentStoreOp
,   VK_ATTACHMENT_STORE_OP_STORE
,   VK_ATTACHMENT_STORE_OP_DONT_CARE
,   VK_ATTACHMENT_STORE_OP_NONE_QCOM
,   VK_ATTACHMENT_STORE_OP_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPipelineBindPoint);
DAS_BASE_BIND_ENUM(VkPipelineBindPoint, VkPipelineBindPoint
,   VK_PIPELINE_BIND_POINT_GRAPHICS
,   VK_PIPELINE_BIND_POINT_COMPUTE
,   VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR
,   VK_PIPELINE_BIND_POINT_RAY_TRACING_NV
,   VK_PIPELINE_BIND_POINT_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkCommandBufferLevel);
DAS_BASE_BIND_ENUM(VkCommandBufferLevel, VkCommandBufferLevel
,   VK_COMMAND_BUFFER_LEVEL_PRIMARY
,   VK_COMMAND_BUFFER_LEVEL_SECONDARY
,   VK_COMMAND_BUFFER_LEVEL_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkIndexType);
DAS_BASE_BIND_ENUM(VkIndexType, VkIndexType
,   VK_INDEX_TYPE_UINT16
,   VK_INDEX_TYPE_UINT32
,   VK_INDEX_TYPE_NONE_KHR
,   VK_INDEX_TYPE_UINT8_EXT
,   VK_INDEX_TYPE_NONE_NV
,   VK_INDEX_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSubpassContents);
DAS_BASE_BIND_ENUM(VkSubpassContents, VkSubpassContents
,   VK_SUBPASS_CONTENTS_INLINE
,   VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS
,   VK_SUBPASS_CONTENTS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkAccessFlagBits);
DAS_BASE_BIND_ENUM(VkAccessFlagBits, VkAccessFlagBits
,   VK_ACCESS_INDIRECT_COMMAND_READ_BIT
,   VK_ACCESS_INDEX_READ_BIT
,   VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT
,   VK_ACCESS_UNIFORM_READ_BIT
,   VK_ACCESS_INPUT_ATTACHMENT_READ_BIT
,   VK_ACCESS_SHADER_READ_BIT
,   VK_ACCESS_SHADER_WRITE_BIT
,   VK_ACCESS_COLOR_ATTACHMENT_READ_BIT
,   VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT
,   VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT
,   VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT
,   VK_ACCESS_TRANSFER_READ_BIT
,   VK_ACCESS_TRANSFER_WRITE_BIT
,   VK_ACCESS_HOST_READ_BIT
,   VK_ACCESS_HOST_WRITE_BIT
,   VK_ACCESS_MEMORY_READ_BIT
,   VK_ACCESS_MEMORY_WRITE_BIT
,   VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT
,   VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT
,   VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT
,   VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT
,   VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT
,   VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR
,   VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR
,   VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV
,   VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT
,   VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV
,   VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV
,   VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV
,   VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV
,   VK_ACCESS_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkImageAspectFlagBits);
DAS_BASE_BIND_ENUM(VkImageAspectFlagBits, VkImageAspectFlagBits
,   VK_IMAGE_ASPECT_COLOR_BIT
,   VK_IMAGE_ASPECT_DEPTH_BIT
,   VK_IMAGE_ASPECT_STENCIL_BIT
,   VK_IMAGE_ASPECT_METADATA_BIT
,   VK_IMAGE_ASPECT_PLANE_0_BIT
,   VK_IMAGE_ASPECT_PLANE_1_BIT
,   VK_IMAGE_ASPECT_PLANE_2_BIT
,   VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT
,   VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT
,   VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT
,   VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT
,   VK_IMAGE_ASPECT_PLANE_0_BIT_KHR
,   VK_IMAGE_ASPECT_PLANE_1_BIT_KHR
,   VK_IMAGE_ASPECT_PLANE_2_BIT_KHR
,   VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkFormatFeatureFlagBits);
DAS_BASE_BIND_ENUM(VkFormatFeatureFlagBits, VkFormatFeatureFlagBits
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT
,   VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT
,   VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT
,   VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT
,   VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT
,   VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT
,   VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT
,   VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT
,   VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT
,   VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT
,   VK_FORMAT_FEATURE_BLIT_SRC_BIT
,   VK_FORMAT_FEATURE_BLIT_DST_BIT
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT
,   VK_FORMAT_FEATURE_TRANSFER_SRC_BIT
,   VK_FORMAT_FEATURE_TRANSFER_DST_BIT
,   VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT
,   VK_FORMAT_FEATURE_DISJOINT_BIT
,   VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG
,   VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR
,   VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT
,   VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR
,   VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT
,   VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR
,   VK_FORMAT_FEATURE_DISJOINT_BIT_KHR
,   VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR
,   VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT
,   VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkImageCreateFlagBits);
DAS_BASE_BIND_ENUM(VkImageCreateFlagBits, VkImageCreateFlagBits
,   VK_IMAGE_CREATE_SPARSE_BINDING_BIT
,   VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT
,   VK_IMAGE_CREATE_SPARSE_ALIASED_BIT
,   VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT
,   VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT
,   VK_IMAGE_CREATE_ALIAS_BIT
,   VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
,   VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT
,   VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT
,   VK_IMAGE_CREATE_EXTENDED_USAGE_BIT
,   VK_IMAGE_CREATE_PROTECTED_BIT
,   VK_IMAGE_CREATE_DISJOINT_BIT
,   VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV
,   VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT
,   VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT
,   VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR
,   VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR
,   VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR
,   VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR
,   VK_IMAGE_CREATE_DISJOINT_BIT_KHR
,   VK_IMAGE_CREATE_ALIAS_BIT_KHR
,   VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSampleCountFlagBits);
DAS_BASE_BIND_ENUM(VkSampleCountFlagBits, VkSampleCountFlagBits
,   VK_SAMPLE_COUNT_1_BIT
,   VK_SAMPLE_COUNT_2_BIT
,   VK_SAMPLE_COUNT_4_BIT
,   VK_SAMPLE_COUNT_8_BIT
,   VK_SAMPLE_COUNT_16_BIT
,   VK_SAMPLE_COUNT_32_BIT
,   VK_SAMPLE_COUNT_64_BIT
,   VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkImageUsageFlagBits);
DAS_BASE_BIND_ENUM(VkImageUsageFlagBits, VkImageUsageFlagBits
,   VK_IMAGE_USAGE_TRANSFER_SRC_BIT
,   VK_IMAGE_USAGE_TRANSFER_DST_BIT
,   VK_IMAGE_USAGE_SAMPLED_BIT
,   VK_IMAGE_USAGE_STORAGE_BIT
,   VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT
,   VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT
,   VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT
,   VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT
,   VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV
,   VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT
,   VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkMemoryHeapFlagBits);
DAS_BASE_BIND_ENUM(VkMemoryHeapFlagBits, VkMemoryHeapFlagBits
,   VK_MEMORY_HEAP_DEVICE_LOCAL_BIT
,   VK_MEMORY_HEAP_MULTI_INSTANCE_BIT
,   VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR
,   VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkMemoryPropertyFlagBits);
DAS_BASE_BIND_ENUM(VkMemoryPropertyFlagBits, VkMemoryPropertyFlagBits
,   VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT
,   VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT
,   VK_MEMORY_PROPERTY_HOST_COHERENT_BIT
,   VK_MEMORY_PROPERTY_HOST_CACHED_BIT
,   VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT
,   VK_MEMORY_PROPERTY_PROTECTED_BIT
,   VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD
,   VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD
,   VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkQueueFlagBits);
DAS_BASE_BIND_ENUM(VkQueueFlagBits, VkQueueFlagBits
,   VK_QUEUE_GRAPHICS_BIT
,   VK_QUEUE_COMPUTE_BIT
,   VK_QUEUE_TRANSFER_BIT
,   VK_QUEUE_SPARSE_BINDING_BIT
,   VK_QUEUE_PROTECTED_BIT
,   VK_QUEUE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkDeviceQueueCreateFlagBits);
DAS_BASE_BIND_ENUM(VkDeviceQueueCreateFlagBits, VkDeviceQueueCreateFlagBits
,   VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT
,   VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPipelineStageFlagBits);
DAS_BASE_BIND_ENUM(VkPipelineStageFlagBits, VkPipelineStageFlagBits
,   VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT
,   VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT
,   VK_PIPELINE_STAGE_VERTEX_INPUT_BIT
,   VK_PIPELINE_STAGE_VERTEX_SHADER_BIT
,   VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT
,   VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT
,   VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT
,   VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT
,   VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT
,   VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT
,   VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT
,   VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT
,   VK_PIPELINE_STAGE_TRANSFER_BIT
,   VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT
,   VK_PIPELINE_STAGE_HOST_BIT
,   VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT
,   VK_PIPELINE_STAGE_ALL_COMMANDS_BIT
,   VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT
,   VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT
,   VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR
,   VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR
,   VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV
,   VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV
,   VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV
,   VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT
,   VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV
,   VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV
,   VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV
,   VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSparseMemoryBindFlagBits);
DAS_BASE_BIND_ENUM(VkSparseMemoryBindFlagBits, VkSparseMemoryBindFlagBits
,   VK_SPARSE_MEMORY_BIND_METADATA_BIT
,   VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSparseImageFormatFlagBits);
DAS_BASE_BIND_ENUM(VkSparseImageFormatFlagBits, VkSparseImageFormatFlagBits
,   VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT
,   VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT
,   VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT
,   VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkFenceCreateFlagBits);
DAS_BASE_BIND_ENUM(VkFenceCreateFlagBits, VkFenceCreateFlagBits
,   VK_FENCE_CREATE_SIGNALED_BIT
,   VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkQueryPipelineStatisticFlagBits);
DAS_BASE_BIND_ENUM(VkQueryPipelineStatisticFlagBits, VkQueryPipelineStatisticFlagBits
,   VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT
,   VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT
,   VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT
,   VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT
,   VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT
,   VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT
,   VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT
,   VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT
,   VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT
,   VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT
,   VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT
,   VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkQueryResultFlagBits);
DAS_BASE_BIND_ENUM(VkQueryResultFlagBits, VkQueryResultFlagBits
,   VK_QUERY_RESULT_64_BIT
,   VK_QUERY_RESULT_WAIT_BIT
,   VK_QUERY_RESULT_WITH_AVAILABILITY_BIT
,   VK_QUERY_RESULT_PARTIAL_BIT
,   VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkBufferCreateFlagBits);
DAS_BASE_BIND_ENUM(VkBufferCreateFlagBits, VkBufferCreateFlagBits
,   VK_BUFFER_CREATE_SPARSE_BINDING_BIT
,   VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT
,   VK_BUFFER_CREATE_SPARSE_ALIASED_BIT
,   VK_BUFFER_CREATE_PROTECTED_BIT
,   VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT
,   VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT
,   VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR
,   VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkBufferUsageFlagBits);
DAS_BASE_BIND_ENUM(VkBufferUsageFlagBits, VkBufferUsageFlagBits
,   VK_BUFFER_USAGE_TRANSFER_SRC_BIT
,   VK_BUFFER_USAGE_TRANSFER_DST_BIT
,   VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT
,   VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT
,   VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT
,   VK_BUFFER_USAGE_STORAGE_BUFFER_BIT
,   VK_BUFFER_USAGE_INDEX_BUFFER_BIT
,   VK_BUFFER_USAGE_VERTEX_BUFFER_BIT
,   VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT
,   VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT
,   VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT
,   VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT
,   VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT
,   VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR
,   VK_BUFFER_USAGE_RAY_TRACING_BIT_NV
,   VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT
,   VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR
,   VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkImageViewCreateFlagBits);
DAS_BASE_BIND_ENUM(VkImageViewCreateFlagBits, VkImageViewCreateFlagBits
,   VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT
,   VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT
,   VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkShaderModuleCreateFlagBits);
DAS_BASE_BIND_ENUM(VkShaderModuleCreateFlagBits, VkShaderModuleCreateFlagBits
,   VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPipelineCacheCreateFlagBits);
DAS_BASE_BIND_ENUM(VkPipelineCacheCreateFlagBits, VkPipelineCacheCreateFlagBits
,   VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT
,   VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkColorComponentFlagBits);
DAS_BASE_BIND_ENUM(VkColorComponentFlagBits, VkColorComponentFlagBits
,   VK_COLOR_COMPONENT_R_BIT
,   VK_COLOR_COMPONENT_G_BIT
,   VK_COLOR_COMPONENT_B_BIT
,   VK_COLOR_COMPONENT_A_BIT
,   VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPipelineCreateFlagBits);
DAS_BASE_BIND_ENUM(VkPipelineCreateFlagBits, VkPipelineCreateFlagBits
,   VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT
,   VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT
,   VK_PIPELINE_CREATE_DERIVATIVE_BIT
,   VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT
,   VK_PIPELINE_CREATE_DISPATCH_BASE_BIT
,   VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR
,   VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR
,   VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR
,   VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR
,   VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR
,   VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR
,   VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV
,   VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR
,   VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR
,   VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV
,   VK_PIPELINE_CREATE_LIBRARY_BIT_KHR
,   VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT
,   VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT
,   VK_PIPELINE_CREATE_DISPATCH_BASE
,   VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR
,   VK_PIPELINE_CREATE_DISPATCH_BASE_KHR
,   VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPipelineShaderStageCreateFlagBits);
DAS_BASE_BIND_ENUM(VkPipelineShaderStageCreateFlagBits, VkPipelineShaderStageCreateFlagBits
,   VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT
,   VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT
,   VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkShaderStageFlagBits);
DAS_BASE_BIND_ENUM(VkShaderStageFlagBits, VkShaderStageFlagBits
,   VK_SHADER_STAGE_VERTEX_BIT
,   VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT
,   VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT
,   VK_SHADER_STAGE_GEOMETRY_BIT
,   VK_SHADER_STAGE_FRAGMENT_BIT
,   VK_SHADER_STAGE_COMPUTE_BIT
,   VK_SHADER_STAGE_ALL_GRAPHICS
,   VK_SHADER_STAGE_ALL
,   VK_SHADER_STAGE_RAYGEN_BIT_KHR
,   VK_SHADER_STAGE_ANY_HIT_BIT_KHR
,   VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR
,   VK_SHADER_STAGE_MISS_BIT_KHR
,   VK_SHADER_STAGE_INTERSECTION_BIT_KHR
,   VK_SHADER_STAGE_CALLABLE_BIT_KHR
,   VK_SHADER_STAGE_TASK_BIT_NV
,   VK_SHADER_STAGE_MESH_BIT_NV
,   VK_SHADER_STAGE_RAYGEN_BIT_NV
,   VK_SHADER_STAGE_ANY_HIT_BIT_NV
,   VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV
,   VK_SHADER_STAGE_MISS_BIT_NV
,   VK_SHADER_STAGE_INTERSECTION_BIT_NV
,   VK_SHADER_STAGE_CALLABLE_BIT_NV
,   VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkCullModeFlagBits);
DAS_BASE_BIND_ENUM(VkCullModeFlagBits, VkCullModeFlagBits
,   VK_CULL_MODE_NONE
,   VK_CULL_MODE_FRONT_BIT
,   VK_CULL_MODE_BACK_BIT
,   VK_CULL_MODE_FRONT_AND_BACK
,   VK_CULL_MODE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSamplerCreateFlagBits);
DAS_BASE_BIND_ENUM(VkSamplerCreateFlagBits, VkSamplerCreateFlagBits
,   VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT
,   VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT
,   VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkDescriptorPoolCreateFlagBits);
DAS_BASE_BIND_ENUM(VkDescriptorPoolCreateFlagBits, VkDescriptorPoolCreateFlagBits
,   VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT
,   VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT
,   VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT
,   VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkDescriptorSetLayoutCreateFlagBits);
DAS_BASE_BIND_ENUM(VkDescriptorSetLayoutCreateFlagBits, VkDescriptorSetLayoutCreateFlagBits
,   VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT
,   VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR
,   VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT
,   VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkAttachmentDescriptionFlagBits);
DAS_BASE_BIND_ENUM(VkAttachmentDescriptionFlagBits, VkAttachmentDescriptionFlagBits
,   VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT
,   VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkDependencyFlagBits);
DAS_BASE_BIND_ENUM(VkDependencyFlagBits, VkDependencyFlagBits
,   VK_DEPENDENCY_BY_REGION_BIT
,   VK_DEPENDENCY_DEVICE_GROUP_BIT
,   VK_DEPENDENCY_VIEW_LOCAL_BIT
,   VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR
,   VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR
,   VK_DEPENDENCY_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkFramebufferCreateFlagBits);
DAS_BASE_BIND_ENUM(VkFramebufferCreateFlagBits, VkFramebufferCreateFlagBits
,   VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT
,   VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR
,   VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkRenderPassCreateFlagBits);
DAS_BASE_BIND_ENUM(VkRenderPassCreateFlagBits, VkRenderPassCreateFlagBits
,   VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM
,   VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSubpassDescriptionFlagBits);
DAS_BASE_BIND_ENUM(VkSubpassDescriptionFlagBits, VkSubpassDescriptionFlagBits
,   VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX
,   VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX
,   VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM
,   VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM
,   VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkCommandPoolCreateFlagBits);
DAS_BASE_BIND_ENUM(VkCommandPoolCreateFlagBits, VkCommandPoolCreateFlagBits
,   VK_COMMAND_POOL_CREATE_TRANSIENT_BIT
,   VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT
,   VK_COMMAND_POOL_CREATE_PROTECTED_BIT
,   VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkCommandPoolResetFlagBits);
DAS_BASE_BIND_ENUM(VkCommandPoolResetFlagBits, VkCommandPoolResetFlagBits
,   VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT
,   VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkCommandBufferUsageFlagBits);
DAS_BASE_BIND_ENUM(VkCommandBufferUsageFlagBits, VkCommandBufferUsageFlagBits
,   VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT
,   VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT
,   VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT
,   VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkQueryControlFlagBits);
DAS_BASE_BIND_ENUM(VkQueryControlFlagBits, VkQueryControlFlagBits
,   VK_QUERY_CONTROL_PRECISE_BIT
,   VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkCommandBufferResetFlagBits);
DAS_BASE_BIND_ENUM(VkCommandBufferResetFlagBits, VkCommandBufferResetFlagBits
,   VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT
,   VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkStencilFaceFlagBits);
DAS_BASE_BIND_ENUM(VkStencilFaceFlagBits, VkStencilFaceFlagBits
,   VK_STENCIL_FACE_FRONT_BIT
,   VK_STENCIL_FACE_BACK_BIT
,   VK_STENCIL_FACE_FRONT_AND_BACK
,   VK_STENCIL_FRONT_AND_BACK
,   VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPointClippingBehavior);
DAS_BASE_BIND_ENUM(VkPointClippingBehavior, VkPointClippingBehavior
,   VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES
,   VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY
,   VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR
,   VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR
,   VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkTessellationDomainOrigin);
DAS_BASE_BIND_ENUM(VkTessellationDomainOrigin, VkTessellationDomainOrigin
,   VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT
,   VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT
,   VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR
,   VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR
,   VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSamplerYcbcrModelConversion);
DAS_BASE_BIND_ENUM(VkSamplerYcbcrModelConversion, VkSamplerYcbcrModelConversion
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR
,   VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSamplerYcbcrRange);
DAS_BASE_BIND_ENUM(VkSamplerYcbcrRange, VkSamplerYcbcrRange
,   VK_SAMPLER_YCBCR_RANGE_ITU_FULL
,   VK_SAMPLER_YCBCR_RANGE_ITU_NARROW
,   VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR
,   VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR
,   VK_SAMPLER_YCBCR_RANGE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkChromaLocation);
DAS_BASE_BIND_ENUM(VkChromaLocation, VkChromaLocation
,   VK_CHROMA_LOCATION_COSITED_EVEN
,   VK_CHROMA_LOCATION_MIDPOINT
,   VK_CHROMA_LOCATION_COSITED_EVEN_KHR
,   VK_CHROMA_LOCATION_MIDPOINT_KHR
,   VK_CHROMA_LOCATION_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkDescriptorUpdateTemplateType);
DAS_BASE_BIND_ENUM(VkDescriptorUpdateTemplateType, VkDescriptorUpdateTemplateType
,   VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET
,   VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR
,   VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR
,   VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSubgroupFeatureFlagBits);
DAS_BASE_BIND_ENUM(VkSubgroupFeatureFlagBits, VkSubgroupFeatureFlagBits
,   VK_SUBGROUP_FEATURE_BASIC_BIT
,   VK_SUBGROUP_FEATURE_VOTE_BIT
,   VK_SUBGROUP_FEATURE_ARITHMETIC_BIT
,   VK_SUBGROUP_FEATURE_BALLOT_BIT
,   VK_SUBGROUP_FEATURE_SHUFFLE_BIT
,   VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT
,   VK_SUBGROUP_FEATURE_CLUSTERED_BIT
,   VK_SUBGROUP_FEATURE_QUAD_BIT
,   VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV
,   VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPeerMemoryFeatureFlagBits);
DAS_BASE_BIND_ENUM(VkPeerMemoryFeatureFlagBits, VkPeerMemoryFeatureFlagBits
,   VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT
,   VK_PEER_MEMORY_FEATURE_COPY_DST_BIT
,   VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT
,   VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT
,   VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR
,   VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR
,   VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR
,   VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR
,   VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkMemoryAllocateFlagBits);
DAS_BASE_BIND_ENUM(VkMemoryAllocateFlagBits, VkMemoryAllocateFlagBits
,   VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT
,   VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT
,   VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT
,   VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR
,   VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR
,   VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR
,   VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkExternalMemoryHandleTypeFlagBits);
DAS_BASE_BIND_ENUM(VkExternalMemoryHandleTypeFlagBits, VkExternalMemoryHandleTypeFlagBits
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkExternalMemoryFeatureFlagBits);
DAS_BASE_BIND_ENUM(VkExternalMemoryFeatureFlagBits, VkExternalMemoryFeatureFlagBits
,   VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT
,   VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT
,   VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT
,   VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR
,   VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR
,   VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR
,   VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkExternalFenceHandleTypeFlagBits);
DAS_BASE_BIND_ENUM(VkExternalFenceHandleTypeFlagBits, VkExternalFenceHandleTypeFlagBits
,   VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT
,   VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT
,   VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
,   VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT
,   VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
,   VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
,   VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
,   VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR
,   VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkExternalFenceFeatureFlagBits);
DAS_BASE_BIND_ENUM(VkExternalFenceFeatureFlagBits, VkExternalFenceFeatureFlagBits
,   VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT
,   VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT
,   VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR
,   VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR
,   VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkFenceImportFlagBits);
DAS_BASE_BIND_ENUM(VkFenceImportFlagBits, VkFenceImportFlagBits
,   VK_FENCE_IMPORT_TEMPORARY_BIT
,   VK_FENCE_IMPORT_TEMPORARY_BIT_KHR
,   VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSemaphoreImportFlagBits);
DAS_BASE_BIND_ENUM(VkSemaphoreImportFlagBits, VkSemaphoreImportFlagBits
,   VK_SEMAPHORE_IMPORT_TEMPORARY_BIT
,   VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR
,   VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkExternalSemaphoreHandleTypeFlagBits);
DAS_BASE_BIND_ENUM(VkExternalSemaphoreHandleTypeFlagBits, VkExternalSemaphoreHandleTypeFlagBits
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR
,   VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkExternalSemaphoreFeatureFlagBits);
DAS_BASE_BIND_ENUM(VkExternalSemaphoreFeatureFlagBits, VkExternalSemaphoreFeatureFlagBits
,   VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT
,   VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT
,   VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR
,   VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR
,   VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkDriverId);
DAS_BASE_BIND_ENUM(VkDriverId, VkDriverId
,   VK_DRIVER_ID_AMD_PROPRIETARY
,   VK_DRIVER_ID_AMD_OPEN_SOURCE
,   VK_DRIVER_ID_MESA_RADV
,   VK_DRIVER_ID_NVIDIA_PROPRIETARY
,   VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS
,   VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA
,   VK_DRIVER_ID_IMAGINATION_PROPRIETARY
,   VK_DRIVER_ID_QUALCOMM_PROPRIETARY
,   VK_DRIVER_ID_ARM_PROPRIETARY
,   VK_DRIVER_ID_GOOGLE_SWIFTSHADER
,   VK_DRIVER_ID_GGP_PROPRIETARY
,   VK_DRIVER_ID_BROADCOM_PROPRIETARY
,   VK_DRIVER_ID_MESA_LLVMPIPE
,   VK_DRIVER_ID_MOLTENVK
,   VK_DRIVER_ID_AMD_PROPRIETARY_KHR
,   VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR
,   VK_DRIVER_ID_MESA_RADV_KHR
,   VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR
,   VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR
,   VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR
,   VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR
,   VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR
,   VK_DRIVER_ID_ARM_PROPRIETARY_KHR
,   VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR
,   VK_DRIVER_ID_GGP_PROPRIETARY_KHR
,   VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR
,   VK_DRIVER_ID_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkShaderFloatControlsIndependence);
DAS_BASE_BIND_ENUM(VkShaderFloatControlsIndependence, VkShaderFloatControlsIndependence
,   VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY
,   VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL
,   VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE
,   VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR
,   VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR
,   VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR
,   VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSamplerReductionMode);
DAS_BASE_BIND_ENUM(VkSamplerReductionMode, VkSamplerReductionMode
,   VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE
,   VK_SAMPLER_REDUCTION_MODE_MIN
,   VK_SAMPLER_REDUCTION_MODE_MAX
,   VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT
,   VK_SAMPLER_REDUCTION_MODE_MIN_EXT
,   VK_SAMPLER_REDUCTION_MODE_MAX_EXT
,   VK_SAMPLER_REDUCTION_MODE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSemaphoreType);
DAS_BASE_BIND_ENUM(VkSemaphoreType, VkSemaphoreType
,   VK_SEMAPHORE_TYPE_BINARY
,   VK_SEMAPHORE_TYPE_TIMELINE
,   VK_SEMAPHORE_TYPE_BINARY_KHR
,   VK_SEMAPHORE_TYPE_TIMELINE_KHR
,   VK_SEMAPHORE_TYPE_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkResolveModeFlagBits);
DAS_BASE_BIND_ENUM(VkResolveModeFlagBits, VkResolveModeFlagBits
,   VK_RESOLVE_MODE_NONE
,   VK_RESOLVE_MODE_SAMPLE_ZERO_BIT
,   VK_RESOLVE_MODE_AVERAGE_BIT
,   VK_RESOLVE_MODE_MIN_BIT
,   VK_RESOLVE_MODE_MAX_BIT
,   VK_RESOLVE_MODE_NONE_KHR
,   VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR
,   VK_RESOLVE_MODE_AVERAGE_BIT_KHR
,   VK_RESOLVE_MODE_MIN_BIT_KHR
,   VK_RESOLVE_MODE_MAX_BIT_KHR
,   VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkDescriptorBindingFlagBits);
DAS_BASE_BIND_ENUM(VkDescriptorBindingFlagBits, VkDescriptorBindingFlagBits
,   VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT
,   VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT
,   VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT
,   VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT
,   VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT
,   VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT
,   VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT
,   VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT
,   VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkSemaphoreWaitFlagBits);
DAS_BASE_BIND_ENUM(VkSemaphoreWaitFlagBits, VkSemaphoreWaitFlagBits
,   VK_SEMAPHORE_WAIT_ANY_BIT
,   VK_SEMAPHORE_WAIT_ANY_BIT_KHR
,   VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM
)
DAS_BIND_ENUM_CAST(VkPresentModeKHR);
DAS_BASE_BIND_ENUM(VkPresentModeKHR, VkPresentModeKHR
,   VK_PRESENT_MODE_IMMEDIATE_KHR
,   VK_PRESENT_MODE_MAILBOX_KHR
,   VK_PRESENT_MODE_FIFO_KHR
,   VK_PRESENT_MODE_FIFO_RELAXED_KHR
,   VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR
,   VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR
,   VK_PRESENT_MODE_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkColorSpaceKHR);
DAS_BASE_BIND_ENUM(VkColorSpaceKHR, VkColorSpaceKHR
,   VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
,   VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT
,   VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT
,   VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT
,   VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT
,   VK_COLOR_SPACE_BT709_LINEAR_EXT
,   VK_COLOR_SPACE_BT709_NONLINEAR_EXT
,   VK_COLOR_SPACE_BT2020_LINEAR_EXT
,   VK_COLOR_SPACE_HDR10_ST2084_EXT
,   VK_COLOR_SPACE_DOLBYVISION_EXT
,   VK_COLOR_SPACE_HDR10_HLG_EXT
,   VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT
,   VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT
,   VK_COLOR_SPACE_PASS_THROUGH_EXT
,   VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT
,   VK_COLOR_SPACE_DISPLAY_NATIVE_AMD
,   VK_COLORSPACE_SRGB_NONLINEAR_KHR
,   VK_COLOR_SPACE_DCI_P3_LINEAR_EXT
,   VK_COLOR_SPACE_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkSurfaceTransformFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkSurfaceTransformFlagBitsKHR, VkSurfaceTransformFlagBitsKHR
,   VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR
,   VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR
,   VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR
,   VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR
,   VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR
,   VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR
,   VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR
,   VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR
,   VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR
,   VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkCompositeAlphaFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkCompositeAlphaFlagBitsKHR, VkCompositeAlphaFlagBitsKHR
,   VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR
,   VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR
,   VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR
,   VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR
,   VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkSwapchainCreateFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkSwapchainCreateFlagBitsKHR, VkSwapchainCreateFlagBitsKHR
,   VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR
,   VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR
,   VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR
,   VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkDeviceGroupPresentModeFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkDeviceGroupPresentModeFlagBitsKHR, VkDeviceGroupPresentModeFlagBitsKHR
,   VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR
,   VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR
,   VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR
,   VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR
,   VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkDisplayPlaneAlphaFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkDisplayPlaneAlphaFlagBitsKHR, VkDisplayPlaneAlphaFlagBitsKHR
,   VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR
,   VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR
,   VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR
,   VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR
,   VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkPerformanceCounterUnitKHR);
DAS_BASE_BIND_ENUM(VkPerformanceCounterUnitKHR, VkPerformanceCounterUnitKHR
,   VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR
,   VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkPerformanceCounterScopeKHR);
DAS_BASE_BIND_ENUM(VkPerformanceCounterScopeKHR, VkPerformanceCounterScopeKHR
,   VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR
,   VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR
,   VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR
,   VK_QUERY_SCOPE_COMMAND_BUFFER_KHR
,   VK_QUERY_SCOPE_RENDER_PASS_KHR
,   VK_QUERY_SCOPE_COMMAND_KHR
,   VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkPerformanceCounterStorageKHR);
DAS_BASE_BIND_ENUM(VkPerformanceCounterStorageKHR, VkPerformanceCounterStorageKHR
,   VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR
,   VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR
,   VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR
,   VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR
,   VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR
,   VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR
,   VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkPerformanceCounterDescriptionFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkPerformanceCounterDescriptionFlagBitsKHR, VkPerformanceCounterDescriptionFlagBitsKHR
,   VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR
,   VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR
,   VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkAcquireProfilingLockFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkAcquireProfilingLockFlagBitsKHR, VkAcquireProfilingLockFlagBitsKHR
,   VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkPipelineExecutableStatisticFormatKHR);
DAS_BASE_BIND_ENUM(VkPipelineExecutableStatisticFormatKHR, VkPipelineExecutableStatisticFormatKHR
,   VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR
,   VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR
,   VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR
,   VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR
,   VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkDebugReportObjectTypeEXT);
DAS_BASE_BIND_ENUM(VkDebugReportObjectTypeEXT, VkDebugReportObjectTypeEXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT
,   VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkDebugReportFlagBitsEXT);
DAS_BASE_BIND_ENUM(VkDebugReportFlagBitsEXT, VkDebugReportFlagBitsEXT
,   VK_DEBUG_REPORT_INFORMATION_BIT_EXT
,   VK_DEBUG_REPORT_WARNING_BIT_EXT
,   VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT
,   VK_DEBUG_REPORT_ERROR_BIT_EXT
,   VK_DEBUG_REPORT_DEBUG_BIT_EXT
,   VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkRasterizationOrderAMD);
DAS_BASE_BIND_ENUM(VkRasterizationOrderAMD, VkRasterizationOrderAMD
,   VK_RASTERIZATION_ORDER_STRICT_AMD
,   VK_RASTERIZATION_ORDER_RELAXED_AMD
,   VK_RASTERIZATION_ORDER_MAX_ENUM_AMD
)
DAS_BIND_ENUM_CAST(VkShaderInfoTypeAMD);
DAS_BASE_BIND_ENUM(VkShaderInfoTypeAMD, VkShaderInfoTypeAMD
,   VK_SHADER_INFO_TYPE_STATISTICS_AMD
,   VK_SHADER_INFO_TYPE_BINARY_AMD
,   VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD
,   VK_SHADER_INFO_TYPE_MAX_ENUM_AMD
)
DAS_BIND_ENUM_CAST(VkExternalMemoryHandleTypeFlagBitsNV);
DAS_BASE_BIND_ENUM(VkExternalMemoryHandleTypeFlagBitsNV, VkExternalMemoryHandleTypeFlagBitsNV
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV
,   VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkExternalMemoryFeatureFlagBitsNV);
DAS_BASE_BIND_ENUM(VkExternalMemoryFeatureFlagBitsNV, VkExternalMemoryFeatureFlagBitsNV
,   VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV
,   VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV
,   VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV
,   VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkValidationCheckEXT);
DAS_BASE_BIND_ENUM(VkValidationCheckEXT, VkValidationCheckEXT
,   VK_VALIDATION_CHECK_ALL_EXT
,   VK_VALIDATION_CHECK_SHADERS_EXT
,   VK_VALIDATION_CHECK_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkConditionalRenderingFlagBitsEXT);
DAS_BASE_BIND_ENUM(VkConditionalRenderingFlagBitsEXT, VkConditionalRenderingFlagBitsEXT
,   VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT
,   VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkSurfaceCounterFlagBitsEXT);
DAS_BASE_BIND_ENUM(VkSurfaceCounterFlagBitsEXT, VkSurfaceCounterFlagBitsEXT
,   VK_SURFACE_COUNTER_VBLANK_EXT
,   VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkDisplayPowerStateEXT);
DAS_BASE_BIND_ENUM(VkDisplayPowerStateEXT, VkDisplayPowerStateEXT
,   VK_DISPLAY_POWER_STATE_OFF_EXT
,   VK_DISPLAY_POWER_STATE_SUSPEND_EXT
,   VK_DISPLAY_POWER_STATE_ON_EXT
,   VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkDeviceEventTypeEXT);
DAS_BASE_BIND_ENUM(VkDeviceEventTypeEXT, VkDeviceEventTypeEXT
,   VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT
,   VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkDisplayEventTypeEXT);
DAS_BASE_BIND_ENUM(VkDisplayEventTypeEXT, VkDisplayEventTypeEXT
,   VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT
,   VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkViewportCoordinateSwizzleNV);
DAS_BASE_BIND_ENUM(VkViewportCoordinateSwizzleNV, VkViewportCoordinateSwizzleNV
,   VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV
,   VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV
,   VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV
,   VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV
,   VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV
,   VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV
,   VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV
,   VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV
,   VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkDiscardRectangleModeEXT);
DAS_BASE_BIND_ENUM(VkDiscardRectangleModeEXT, VkDiscardRectangleModeEXT
,   VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT
,   VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT
,   VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkConservativeRasterizationModeEXT);
DAS_BASE_BIND_ENUM(VkConservativeRasterizationModeEXT, VkConservativeRasterizationModeEXT
,   VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT
,   VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT
,   VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT
,   VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkDebugUtilsMessageSeverityFlagBitsEXT);
DAS_BASE_BIND_ENUM(VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageSeverityFlagBitsEXT
,   VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT
,   VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT
,   VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT
,   VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT
,   VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkDebugUtilsMessageTypeFlagBitsEXT);
DAS_BASE_BIND_ENUM(VkDebugUtilsMessageTypeFlagBitsEXT, VkDebugUtilsMessageTypeFlagBitsEXT
,   VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT
,   VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT
,   VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT
,   VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkBlendOverlapEXT);
DAS_BASE_BIND_ENUM(VkBlendOverlapEXT, VkBlendOverlapEXT
,   VK_BLEND_OVERLAP_UNCORRELATED_EXT
,   VK_BLEND_OVERLAP_DISJOINT_EXT
,   VK_BLEND_OVERLAP_CONJOINT_EXT
,   VK_BLEND_OVERLAP_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkCoverageModulationModeNV);
DAS_BASE_BIND_ENUM(VkCoverageModulationModeNV, VkCoverageModulationModeNV
,   VK_COVERAGE_MODULATION_MODE_NONE_NV
,   VK_COVERAGE_MODULATION_MODE_RGB_NV
,   VK_COVERAGE_MODULATION_MODE_ALPHA_NV
,   VK_COVERAGE_MODULATION_MODE_RGBA_NV
,   VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkValidationCacheHeaderVersionEXT);
DAS_BASE_BIND_ENUM(VkValidationCacheHeaderVersionEXT, VkValidationCacheHeaderVersionEXT
,   VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT
,   VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkShadingRatePaletteEntryNV);
DAS_BASE_BIND_ENUM(VkShadingRatePaletteEntryNV, VkShadingRatePaletteEntryNV
,   VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV
,   VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkCoarseSampleOrderTypeNV);
DAS_BASE_BIND_ENUM(VkCoarseSampleOrderTypeNV, VkCoarseSampleOrderTypeNV
,   VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV
,   VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV
,   VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV
,   VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV
,   VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkRayTracingShaderGroupTypeKHR);
DAS_BASE_BIND_ENUM(VkRayTracingShaderGroupTypeKHR, VkRayTracingShaderGroupTypeKHR
,   VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR
,   VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR
,   VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR
,   VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV
,   VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV
,   VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV
,   VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkGeometryTypeKHR);
DAS_BASE_BIND_ENUM(VkGeometryTypeKHR, VkGeometryTypeKHR
,   VK_GEOMETRY_TYPE_TRIANGLES_KHR
,   VK_GEOMETRY_TYPE_AABBS_KHR
,   VK_GEOMETRY_TYPE_INSTANCES_KHR
,   VK_GEOMETRY_TYPE_TRIANGLES_NV
,   VK_GEOMETRY_TYPE_AABBS_NV
,   VK_GEOMETRY_TYPE_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkAccelerationStructureTypeKHR);
DAS_BASE_BIND_ENUM(VkAccelerationStructureTypeKHR, VkAccelerationStructureTypeKHR
,   VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR
,   VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR
,   VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV
,   VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV
,   VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkCopyAccelerationStructureModeKHR);
DAS_BASE_BIND_ENUM(VkCopyAccelerationStructureModeKHR, VkCopyAccelerationStructureModeKHR
,   VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR
,   VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR
,   VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR
,   VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR
,   VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV
,   VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV
,   VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkAccelerationStructureMemoryRequirementsTypeKHR);
DAS_BASE_BIND_ENUM(VkAccelerationStructureMemoryRequirementsTypeKHR, VkAccelerationStructureMemoryRequirementsTypeKHR
,   VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR
,   VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR
,   VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR
,   VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV
,   VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV
,   VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV
,   VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkGeometryFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkGeometryFlagBitsKHR, VkGeometryFlagBitsKHR
,   VK_GEOMETRY_OPAQUE_BIT_KHR
,   VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR
,   VK_GEOMETRY_OPAQUE_BIT_NV
,   VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV
,   VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkGeometryInstanceFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkGeometryInstanceFlagBitsKHR, VkGeometryInstanceFlagBitsKHR
,   VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR
,   VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR
,   VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR
,   VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR
,   VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV
,   VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV
,   VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV
,   VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV
,   VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkBuildAccelerationStructureFlagBitsKHR);
DAS_BASE_BIND_ENUM(VkBuildAccelerationStructureFlagBitsKHR, VkBuildAccelerationStructureFlagBitsKHR
,   VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR
,   VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR
,   VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR
,   VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR
,   VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR
,   VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV
,   VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV
,   VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV
,   VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV
,   VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV
,   VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR
)
DAS_BIND_ENUM_CAST(VkQueueGlobalPriorityEXT);
DAS_BASE_BIND_ENUM(VkQueueGlobalPriorityEXT, VkQueueGlobalPriorityEXT
,   VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT
,   VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT
,   VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT
,   VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT
,   VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkPipelineCompilerControlFlagBitsAMD);
DAS_BASE_BIND_ENUM(VkPipelineCompilerControlFlagBitsAMD, VkPipelineCompilerControlFlagBitsAMD
,   VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD
)
DAS_BIND_ENUM_CAST(VkTimeDomainEXT);
DAS_BASE_BIND_ENUM(VkTimeDomainEXT, VkTimeDomainEXT
,   VK_TIME_DOMAIN_DEVICE_EXT
,   VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT
,   VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT
,   VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT
,   VK_TIME_DOMAIN_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkMemoryOverallocationBehaviorAMD);
DAS_BASE_BIND_ENUM(VkMemoryOverallocationBehaviorAMD, VkMemoryOverallocationBehaviorAMD
,   VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD
,   VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD
,   VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD
,   VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD
)
DAS_BIND_ENUM_CAST(VkPipelineCreationFeedbackFlagBitsEXT);
DAS_BASE_BIND_ENUM(VkPipelineCreationFeedbackFlagBitsEXT, VkPipelineCreationFeedbackFlagBitsEXT
,   VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT
,   VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT
,   VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT
,   VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkPerformanceConfigurationTypeINTEL);
DAS_BASE_BIND_ENUM(VkPerformanceConfigurationTypeINTEL, VkPerformanceConfigurationTypeINTEL
,   VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL
,   VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL
)
DAS_BIND_ENUM_CAST(VkQueryPoolSamplingModeINTEL);
DAS_BASE_BIND_ENUM(VkQueryPoolSamplingModeINTEL, VkQueryPoolSamplingModeINTEL
,   VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL
,   VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL
)
DAS_BIND_ENUM_CAST(VkPerformanceOverrideTypeINTEL);
DAS_BASE_BIND_ENUM(VkPerformanceOverrideTypeINTEL, VkPerformanceOverrideTypeINTEL
,   VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL
,   VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL
,   VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL
)
DAS_BIND_ENUM_CAST(VkPerformanceParameterTypeINTEL);
DAS_BASE_BIND_ENUM(VkPerformanceParameterTypeINTEL, VkPerformanceParameterTypeINTEL
,   VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL
,   VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL
,   VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL
)
DAS_BIND_ENUM_CAST(VkPerformanceValueTypeINTEL);
DAS_BASE_BIND_ENUM(VkPerformanceValueTypeINTEL, VkPerformanceValueTypeINTEL
,   VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL
,   VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL
,   VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL
,   VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL
,   VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL
,   VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL
)
DAS_BIND_ENUM_CAST(VkShaderCorePropertiesFlagBitsAMD);
DAS_BASE_BIND_ENUM(VkShaderCorePropertiesFlagBitsAMD, VkShaderCorePropertiesFlagBitsAMD
,   VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD
)
DAS_BIND_ENUM_CAST(VkToolPurposeFlagBitsEXT);
DAS_BASE_BIND_ENUM(VkToolPurposeFlagBitsEXT, VkToolPurposeFlagBitsEXT
,   VK_TOOL_PURPOSE_VALIDATION_BIT_EXT
,   VK_TOOL_PURPOSE_PROFILING_BIT_EXT
,   VK_TOOL_PURPOSE_TRACING_BIT_EXT
,   VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT
,   VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT
,   VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT
,   VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT
,   VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkValidationFeatureEnableEXT);
DAS_BASE_BIND_ENUM(VkValidationFeatureEnableEXT, VkValidationFeatureEnableEXT
,   VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT
,   VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT
,   VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT
,   VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT
,   VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkValidationFeatureDisableEXT);
DAS_BASE_BIND_ENUM(VkValidationFeatureDisableEXT, VkValidationFeatureDisableEXT
,   VK_VALIDATION_FEATURE_DISABLE_ALL_EXT
,   VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT
,   VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT
,   VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT
,   VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT
,   VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT
,   VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT
,   VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkComponentTypeNV);
DAS_BASE_BIND_ENUM(VkComponentTypeNV, VkComponentTypeNV
,   VK_COMPONENT_TYPE_FLOAT16_NV
,   VK_COMPONENT_TYPE_FLOAT32_NV
,   VK_COMPONENT_TYPE_FLOAT64_NV
,   VK_COMPONENT_TYPE_SINT8_NV
,   VK_COMPONENT_TYPE_SINT16_NV
,   VK_COMPONENT_TYPE_SINT32_NV
,   VK_COMPONENT_TYPE_SINT64_NV
,   VK_COMPONENT_TYPE_UINT8_NV
,   VK_COMPONENT_TYPE_UINT16_NV
,   VK_COMPONENT_TYPE_UINT32_NV
,   VK_COMPONENT_TYPE_UINT64_NV
,   VK_COMPONENT_TYPE_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkScopeNV);
DAS_BASE_BIND_ENUM(VkScopeNV, VkScopeNV
,   VK_SCOPE_DEVICE_NV
,   VK_SCOPE_WORKGROUP_NV
,   VK_SCOPE_SUBGROUP_NV
,   VK_SCOPE_QUEUE_FAMILY_NV
,   VK_SCOPE_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkCoverageReductionModeNV);
DAS_BASE_BIND_ENUM(VkCoverageReductionModeNV, VkCoverageReductionModeNV
,   VK_COVERAGE_REDUCTION_MODE_MERGE_NV
,   VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV
,   VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkLineRasterizationModeEXT);
DAS_BASE_BIND_ENUM(VkLineRasterizationModeEXT, VkLineRasterizationModeEXT
,   VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT
,   VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT
,   VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT
,   VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT
,   VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkIndirectCommandsTokenTypeNV);
DAS_BASE_BIND_ENUM(VkIndirectCommandsTokenTypeNV, VkIndirectCommandsTokenTypeNV
,   VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV
,   VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV
,   VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV
,   VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV
,   VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV
,   VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV
,   VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV
,   VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV
,   VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkIndirectStateFlagBitsNV);
DAS_BASE_BIND_ENUM(VkIndirectStateFlagBitsNV, VkIndirectStateFlagBitsNV
,   VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV
,   VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkIndirectCommandsLayoutUsageFlagBitsNV);
DAS_BASE_BIND_ENUM(VkIndirectCommandsLayoutUsageFlagBitsNV, VkIndirectCommandsLayoutUsageFlagBitsNV
,   VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV
,   VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV
,   VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV
,   VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV
)
DAS_BIND_ENUM_CAST(VkPrivateDataSlotCreateFlagBitsEXT);
DAS_BASE_BIND_ENUM(VkPrivateDataSlotCreateFlagBitsEXT, VkPrivateDataSlotCreateFlagBitsEXT
,   VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT
)
DAS_BIND_ENUM_CAST(VkDeviceDiagnosticsConfigFlagBitsNV);
DAS_BASE_BIND_ENUM(VkDeviceDiagnosticsConfigFlagBitsNV, VkDeviceDiagnosticsConfigFlagBitsNV
,   VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV
,   VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV
,   VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV
,   VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV
)

//
// structs
//

MAKE_TYPE_FACTORY(VkExtent2D, VkExtent2D);
struct VkExtent2DAnnotation
: public ManagedStructureAnnotation<VkExtent2D,true,true> {
    VkExtent2DAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExtent2D", ml) {
        addField<DAS_BIND_MANAGED_FIELD(width)>("width");
        addField<DAS_BIND_MANAGED_FIELD(height)>("height");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExtent3D, VkExtent3D);
struct VkExtent3DAnnotation
: public ManagedStructureAnnotation<VkExtent3D,true,true> {
    VkExtent3DAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExtent3D", ml) {
        addField<DAS_BIND_MANAGED_FIELD(width)>("width");
        addField<DAS_BIND_MANAGED_FIELD(height)>("height");
        addField<DAS_BIND_MANAGED_FIELD(depth)>("depth");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkOffset2D, VkOffset2D);
struct VkOffset2DAnnotation
: public ManagedStructureAnnotation<VkOffset2D,true,true> {
    VkOffset2DAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkOffset2D", ml) {
        addField<DAS_BIND_MANAGED_FIELD(x)>("x");
        addField<DAS_BIND_MANAGED_FIELD(y)>("y");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkOffset3D, VkOffset3D);
struct VkOffset3DAnnotation
: public ManagedStructureAnnotation<VkOffset3D,true,true> {
    VkOffset3DAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkOffset3D", ml) {
        addField<DAS_BIND_MANAGED_FIELD(x)>("x");
        addField<DAS_BIND_MANAGED_FIELD(y)>("y");
        addField<DAS_BIND_MANAGED_FIELD(z)>("z");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRect2D, VkRect2D);
struct VkRect2DAnnotation
: public ManagedStructureAnnotation<VkRect2D,true,true> {
    VkRect2DAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRect2D", ml) {
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBaseInStructure, VkBaseInStructure);
struct VkBaseInStructureAnnotation
: public ManagedStructureAnnotation<VkBaseInStructure,true,true> {
    VkBaseInStructureAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBaseInStructure", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBaseOutStructure, VkBaseOutStructure);
struct VkBaseOutStructureAnnotation
: public ManagedStructureAnnotation<VkBaseOutStructure,true,true> {
    VkBaseOutStructureAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBaseOutStructure", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBufferMemoryBarrier, VkBufferMemoryBarrier);
struct VkBufferMemoryBarrierAnnotation
: public ManagedStructureAnnotation<VkBufferMemoryBarrier,true,true> {
    VkBufferMemoryBarrierAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferMemoryBarrier", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(srcAccessMask)>("srcAccessMask");
        addField<DAS_BIND_MANAGED_FIELD(dstAccessMask)>("dstAccessMask");
        addField<DAS_BIND_MANAGED_FIELD(srcQueueFamilyIndex)>("srcQueueFamilyIndex");
        addField<DAS_BIND_MANAGED_FIELD(dstQueueFamilyIndex)>("dstQueueFamilyIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDispatchIndirectCommand, VkDispatchIndirectCommand);
struct VkDispatchIndirectCommandAnnotation
: public ManagedStructureAnnotation<VkDispatchIndirectCommand,true,true> {
    VkDispatchIndirectCommandAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDispatchIndirectCommand", ml) {
        addField<DAS_BIND_MANAGED_FIELD(x)>("x");
        addField<DAS_BIND_MANAGED_FIELD(y)>("y");
        addField<DAS_BIND_MANAGED_FIELD(z)>("z");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDrawIndexedIndirectCommand, VkDrawIndexedIndirectCommand);
struct VkDrawIndexedIndirectCommandAnnotation
: public ManagedStructureAnnotation<VkDrawIndexedIndirectCommand,true,true> {
    VkDrawIndexedIndirectCommandAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDrawIndexedIndirectCommand", ml) {
        addField<DAS_BIND_MANAGED_FIELD(indexCount)>("indexCount");
        addField<DAS_BIND_MANAGED_FIELD(instanceCount)>("instanceCount");
        addField<DAS_BIND_MANAGED_FIELD(firstIndex)>("firstIndex");
        addField<DAS_BIND_MANAGED_FIELD(vertexOffset)>("vertexOffset");
        addField<DAS_BIND_MANAGED_FIELD(firstInstance)>("firstInstance");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDrawIndirectCommand, VkDrawIndirectCommand);
struct VkDrawIndirectCommandAnnotation
: public ManagedStructureAnnotation<VkDrawIndirectCommand,true,true> {
    VkDrawIndirectCommandAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDrawIndirectCommand", ml) {
        addField<DAS_BIND_MANAGED_FIELD(vertexCount)>("vertexCount");
        addField<DAS_BIND_MANAGED_FIELD(instanceCount)>("instanceCount");
        addField<DAS_BIND_MANAGED_FIELD(firstVertex)>("firstVertex");
        addField<DAS_BIND_MANAGED_FIELD(firstInstance)>("firstInstance");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageSubresourceRange, VkImageSubresourceRange);
struct VkImageSubresourceRangeAnnotation
: public ManagedStructureAnnotation<VkImageSubresourceRange,true,true> {
    VkImageSubresourceRangeAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageSubresourceRange", ml) {
        addField<DAS_BIND_MANAGED_FIELD(aspectMask)>("aspectMask");
        addField<DAS_BIND_MANAGED_FIELD(baseMipLevel)>("baseMipLevel");
        addField<DAS_BIND_MANAGED_FIELD(levelCount)>("levelCount");
        addField<DAS_BIND_MANAGED_FIELD(baseArrayLayer)>("baseArrayLayer");
        addField<DAS_BIND_MANAGED_FIELD(layerCount)>("layerCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageMemoryBarrier, VkImageMemoryBarrier);
struct VkImageMemoryBarrierAnnotation
: public ManagedStructureAnnotation<VkImageMemoryBarrier,true,true> {
    VkImageMemoryBarrierAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageMemoryBarrier", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(srcAccessMask)>("srcAccessMask");
        addField<DAS_BIND_MANAGED_FIELD(dstAccessMask)>("dstAccessMask");
        addField<DAS_BIND_MANAGED_FIELD(oldLayout)>("oldLayout");
        addField<DAS_BIND_MANAGED_FIELD(newLayout)>("newLayout");
        addField<DAS_BIND_MANAGED_FIELD(srcQueueFamilyIndex)>("srcQueueFamilyIndex");
        addField<DAS_BIND_MANAGED_FIELD(dstQueueFamilyIndex)>("dstQueueFamilyIndex");
        addField<DAS_BIND_MANAGED_FIELD(subresourceRange)>("subresourceRange");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryBarrier, VkMemoryBarrier);
struct VkMemoryBarrierAnnotation
: public ManagedStructureAnnotation<VkMemoryBarrier,true,true> {
    VkMemoryBarrierAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryBarrier", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(srcAccessMask)>("srcAccessMask");
        addField<DAS_BIND_MANAGED_FIELD(dstAccessMask)>("dstAccessMask");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAllocationCallbacks, VkAllocationCallbacks);
struct VkAllocationCallbacksAnnotation
: public ManagedStructureAnnotation<VkAllocationCallbacks,true,true> {
    VkAllocationCallbacksAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAllocationCallbacks", ml) {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkApplicationInfo, VkApplicationInfo);
struct VkApplicationInfoAnnotation
: public ManagedStructureAnnotation<VkApplicationInfo,true,true> {
    VkApplicationInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkApplicationInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(applicationVersion)>("applicationVersion");
        addField<DAS_BIND_MANAGED_FIELD(engineVersion)>("engineVersion");
        addField<DAS_BIND_MANAGED_FIELD(apiVersion)>("apiVersion");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkFormatProperties, VkFormatProperties);
struct VkFormatPropertiesAnnotation
: public ManagedStructureAnnotation<VkFormatProperties,true,true> {
    VkFormatPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFormatProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(linearTilingFeatures)>("linearTilingFeatures");
        addField<DAS_BIND_MANAGED_FIELD(optimalTilingFeatures)>("optimalTilingFeatures");
        addField<DAS_BIND_MANAGED_FIELD(bufferFeatures)>("bufferFeatures");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageFormatProperties, VkImageFormatProperties);
struct VkImageFormatPropertiesAnnotation
: public ManagedStructureAnnotation<VkImageFormatProperties,true,true> {
    VkImageFormatPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageFormatProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(maxExtent)>("maxExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxMipLevels)>("maxMipLevels");
        addField<DAS_BIND_MANAGED_FIELD(maxArrayLayers)>("maxArrayLayers");
        addField<DAS_BIND_MANAGED_FIELD(sampleCounts)>("sampleCounts");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkInstanceCreateInfo, VkInstanceCreateInfo);
struct VkInstanceCreateInfoAnnotation
: public ManagedStructureAnnotation<VkInstanceCreateInfo,true,true> {
    VkInstanceCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkInstanceCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(enabledLayerCount)>("enabledLayerCount");
        addField<DAS_BIND_MANAGED_FIELD(enabledExtensionCount)>("enabledExtensionCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryHeap, VkMemoryHeap);
struct VkMemoryHeapAnnotation
: public ManagedStructureAnnotation<VkMemoryHeap,true,true> {
    VkMemoryHeapAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryHeap", ml) {
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryType, VkMemoryType);
struct VkMemoryTypeAnnotation
: public ManagedStructureAnnotation<VkMemoryType,true,true> {
    VkMemoryTypeAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryType", ml) {
        addField<DAS_BIND_MANAGED_FIELD(propertyFlags)>("propertyFlags");
        addField<DAS_BIND_MANAGED_FIELD(heapIndex)>("heapIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceFeatures, VkPhysicalDeviceFeatures);
struct VkPhysicalDeviceFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFeatures,true,true> {
    VkPhysicalDeviceFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(robustBufferAccess)>("robustBufferAccess");
        addField<DAS_BIND_MANAGED_FIELD(fullDrawIndexUint32)>("fullDrawIndexUint32");
        addField<DAS_BIND_MANAGED_FIELD(imageCubeArray)>("imageCubeArray");
        addField<DAS_BIND_MANAGED_FIELD(independentBlend)>("independentBlend");
        addField<DAS_BIND_MANAGED_FIELD(geometryShader)>("geometryShader");
        addField<DAS_BIND_MANAGED_FIELD(tessellationShader)>("tessellationShader");
        addField<DAS_BIND_MANAGED_FIELD(sampleRateShading)>("sampleRateShading");
        addField<DAS_BIND_MANAGED_FIELD(dualSrcBlend)>("dualSrcBlend");
        addField<DAS_BIND_MANAGED_FIELD(logicOp)>("logicOp");
        addField<DAS_BIND_MANAGED_FIELD(multiDrawIndirect)>("multiDrawIndirect");
        addField<DAS_BIND_MANAGED_FIELD(drawIndirectFirstInstance)>("drawIndirectFirstInstance");
        addField<DAS_BIND_MANAGED_FIELD(depthClamp)>("depthClamp");
        addField<DAS_BIND_MANAGED_FIELD(depthBiasClamp)>("depthBiasClamp");
        addField<DAS_BIND_MANAGED_FIELD(fillModeNonSolid)>("fillModeNonSolid");
        addField<DAS_BIND_MANAGED_FIELD(depthBounds)>("depthBounds");
        addField<DAS_BIND_MANAGED_FIELD(wideLines)>("wideLines");
        addField<DAS_BIND_MANAGED_FIELD(largePoints)>("largePoints");
        addField<DAS_BIND_MANAGED_FIELD(alphaToOne)>("alphaToOne");
        addField<DAS_BIND_MANAGED_FIELD(multiViewport)>("multiViewport");
        addField<DAS_BIND_MANAGED_FIELD(samplerAnisotropy)>("samplerAnisotropy");
        addField<DAS_BIND_MANAGED_FIELD(textureCompressionETC2)>("textureCompressionETC2");
        addField<DAS_BIND_MANAGED_FIELD(textureCompressionASTC_LDR)>("textureCompressionASTC_LDR");
        addField<DAS_BIND_MANAGED_FIELD(textureCompressionBC)>("textureCompressionBC");
        addField<DAS_BIND_MANAGED_FIELD(occlusionQueryPrecise)>("occlusionQueryPrecise");
        addField<DAS_BIND_MANAGED_FIELD(pipelineStatisticsQuery)>("pipelineStatisticsQuery");
        addField<DAS_BIND_MANAGED_FIELD(vertexPipelineStoresAndAtomics)>("vertexPipelineStoresAndAtomics");
        addField<DAS_BIND_MANAGED_FIELD(fragmentStoresAndAtomics)>("fragmentStoresAndAtomics");
        addField<DAS_BIND_MANAGED_FIELD(shaderTessellationAndGeometryPointSize)>("shaderTessellationAndGeometryPointSize");
        addField<DAS_BIND_MANAGED_FIELD(shaderImageGatherExtended)>("shaderImageGatherExtended");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageImageExtendedFormats)>("shaderStorageImageExtendedFormats");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageImageMultisample)>("shaderStorageImageMultisample");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageImageReadWithoutFormat)>("shaderStorageImageReadWithoutFormat");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageImageWriteWithoutFormat)>("shaderStorageImageWriteWithoutFormat");
        addField<DAS_BIND_MANAGED_FIELD(shaderUniformBufferArrayDynamicIndexing)>("shaderUniformBufferArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderSampledImageArrayDynamicIndexing)>("shaderSampledImageArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageBufferArrayDynamicIndexing)>("shaderStorageBufferArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageImageArrayDynamicIndexing)>("shaderStorageImageArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderClipDistance)>("shaderClipDistance");
        addField<DAS_BIND_MANAGED_FIELD(shaderCullDistance)>("shaderCullDistance");
        addField<DAS_BIND_MANAGED_FIELD(shaderFloat64)>("shaderFloat64");
        addField<DAS_BIND_MANAGED_FIELD(shaderInt64)>("shaderInt64");
        addField<DAS_BIND_MANAGED_FIELD(shaderInt16)>("shaderInt16");
        addField<DAS_BIND_MANAGED_FIELD(shaderResourceResidency)>("shaderResourceResidency");
        addField<DAS_BIND_MANAGED_FIELD(shaderResourceMinLod)>("shaderResourceMinLod");
        addField<DAS_BIND_MANAGED_FIELD(sparseBinding)>("sparseBinding");
        addField<DAS_BIND_MANAGED_FIELD(sparseResidencyBuffer)>("sparseResidencyBuffer");
        addField<DAS_BIND_MANAGED_FIELD(sparseResidencyImage2D)>("sparseResidencyImage2D");
        addField<DAS_BIND_MANAGED_FIELD(sparseResidencyImage3D)>("sparseResidencyImage3D");
        addField<DAS_BIND_MANAGED_FIELD(sparseResidency2Samples)>("sparseResidency2Samples");
        addField<DAS_BIND_MANAGED_FIELD(sparseResidency4Samples)>("sparseResidency4Samples");
        addField<DAS_BIND_MANAGED_FIELD(sparseResidency8Samples)>("sparseResidency8Samples");
        addField<DAS_BIND_MANAGED_FIELD(sparseResidency16Samples)>("sparseResidency16Samples");
        addField<DAS_BIND_MANAGED_FIELD(sparseResidencyAliased)>("sparseResidencyAliased");
        addField<DAS_BIND_MANAGED_FIELD(variableMultisampleRate)>("variableMultisampleRate");
        addField<DAS_BIND_MANAGED_FIELD(inheritedQueries)>("inheritedQueries");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceLimits, VkPhysicalDeviceLimits);
struct VkPhysicalDeviceLimitsAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceLimits,true,true> {
    VkPhysicalDeviceLimitsAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceLimits", ml) {
        addField<DAS_BIND_MANAGED_FIELD(maxImageDimension1D)>("maxImageDimension1D");
        addField<DAS_BIND_MANAGED_FIELD(maxImageDimension2D)>("maxImageDimension2D");
        addField<DAS_BIND_MANAGED_FIELD(maxImageDimension3D)>("maxImageDimension3D");
        addField<DAS_BIND_MANAGED_FIELD(maxImageDimensionCube)>("maxImageDimensionCube");
        addField<DAS_BIND_MANAGED_FIELD(maxImageArrayLayers)>("maxImageArrayLayers");
        addField<DAS_BIND_MANAGED_FIELD(maxTexelBufferElements)>("maxTexelBufferElements");
        addField<DAS_BIND_MANAGED_FIELD(maxUniformBufferRange)>("maxUniformBufferRange");
        addField<DAS_BIND_MANAGED_FIELD(maxStorageBufferRange)>("maxStorageBufferRange");
        addField<DAS_BIND_MANAGED_FIELD(maxPushConstantsSize)>("maxPushConstantsSize");
        addField<DAS_BIND_MANAGED_FIELD(maxMemoryAllocationCount)>("maxMemoryAllocationCount");
        addField<DAS_BIND_MANAGED_FIELD(maxSamplerAllocationCount)>("maxSamplerAllocationCount");
        addField<DAS_BIND_MANAGED_FIELD(maxBoundDescriptorSets)>("maxBoundDescriptorSets");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorSamplers)>("maxPerStageDescriptorSamplers");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUniformBuffers)>("maxPerStageDescriptorUniformBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorStorageBuffers)>("maxPerStageDescriptorStorageBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorSampledImages)>("maxPerStageDescriptorSampledImages");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorStorageImages)>("maxPerStageDescriptorStorageImages");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorInputAttachments)>("maxPerStageDescriptorInputAttachments");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageResources)>("maxPerStageResources");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetSamplers)>("maxDescriptorSetSamplers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUniformBuffers)>("maxDescriptorSetUniformBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUniformBuffersDynamic)>("maxDescriptorSetUniformBuffersDynamic");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetStorageBuffers)>("maxDescriptorSetStorageBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetStorageBuffersDynamic)>("maxDescriptorSetStorageBuffersDynamic");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetSampledImages)>("maxDescriptorSetSampledImages");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetStorageImages)>("maxDescriptorSetStorageImages");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetInputAttachments)>("maxDescriptorSetInputAttachments");
        addField<DAS_BIND_MANAGED_FIELD(maxVertexInputAttributes)>("maxVertexInputAttributes");
        addField<DAS_BIND_MANAGED_FIELD(maxVertexInputBindings)>("maxVertexInputBindings");
        addField<DAS_BIND_MANAGED_FIELD(maxVertexInputAttributeOffset)>("maxVertexInputAttributeOffset");
        addField<DAS_BIND_MANAGED_FIELD(maxVertexInputBindingStride)>("maxVertexInputBindingStride");
        addField<DAS_BIND_MANAGED_FIELD(maxVertexOutputComponents)>("maxVertexOutputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxTessellationGenerationLevel)>("maxTessellationGenerationLevel");
        addField<DAS_BIND_MANAGED_FIELD(maxTessellationPatchSize)>("maxTessellationPatchSize");
        addField<DAS_BIND_MANAGED_FIELD(maxTessellationControlPerVertexInputComponents)>("maxTessellationControlPerVertexInputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxTessellationControlPerVertexOutputComponents)>("maxTessellationControlPerVertexOutputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxTessellationControlPerPatchOutputComponents)>("maxTessellationControlPerPatchOutputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxTessellationControlTotalOutputComponents)>("maxTessellationControlTotalOutputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxTessellationEvaluationInputComponents)>("maxTessellationEvaluationInputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxTessellationEvaluationOutputComponents)>("maxTessellationEvaluationOutputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxGeometryShaderInvocations)>("maxGeometryShaderInvocations");
        addField<DAS_BIND_MANAGED_FIELD(maxGeometryInputComponents)>("maxGeometryInputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxGeometryOutputComponents)>("maxGeometryOutputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxGeometryOutputVertices)>("maxGeometryOutputVertices");
        addField<DAS_BIND_MANAGED_FIELD(maxGeometryTotalOutputComponents)>("maxGeometryTotalOutputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentInputComponents)>("maxFragmentInputComponents");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentOutputAttachments)>("maxFragmentOutputAttachments");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentDualSrcAttachments)>("maxFragmentDualSrcAttachments");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentCombinedOutputResources)>("maxFragmentCombinedOutputResources");
        addField<DAS_BIND_MANAGED_FIELD(maxComputeSharedMemorySize)>("maxComputeSharedMemorySize");
        addField<DAS_BIND_MANAGED_FIELD(maxComputeWorkGroupInvocations)>("maxComputeWorkGroupInvocations");
        addField<DAS_BIND_MANAGED_FIELD(subPixelPrecisionBits)>("subPixelPrecisionBits");
        addField<DAS_BIND_MANAGED_FIELD(subTexelPrecisionBits)>("subTexelPrecisionBits");
        addField<DAS_BIND_MANAGED_FIELD(mipmapPrecisionBits)>("mipmapPrecisionBits");
        addField<DAS_BIND_MANAGED_FIELD(maxDrawIndexedIndexValue)>("maxDrawIndexedIndexValue");
        addField<DAS_BIND_MANAGED_FIELD(maxDrawIndirectCount)>("maxDrawIndirectCount");
        addField<DAS_BIND_MANAGED_FIELD(maxSamplerLodBias)>("maxSamplerLodBias");
        addField<DAS_BIND_MANAGED_FIELD(maxSamplerAnisotropy)>("maxSamplerAnisotropy");
        addField<DAS_BIND_MANAGED_FIELD(maxViewports)>("maxViewports");
        addField<DAS_BIND_MANAGED_FIELD(viewportSubPixelBits)>("viewportSubPixelBits");
        addField<DAS_BIND_MANAGED_FIELD(minTexelOffset)>("minTexelOffset");
        addField<DAS_BIND_MANAGED_FIELD(maxTexelOffset)>("maxTexelOffset");
        addField<DAS_BIND_MANAGED_FIELD(minTexelGatherOffset)>("minTexelGatherOffset");
        addField<DAS_BIND_MANAGED_FIELD(maxTexelGatherOffset)>("maxTexelGatherOffset");
        addField<DAS_BIND_MANAGED_FIELD(minInterpolationOffset)>("minInterpolationOffset");
        addField<DAS_BIND_MANAGED_FIELD(maxInterpolationOffset)>("maxInterpolationOffset");
        addField<DAS_BIND_MANAGED_FIELD(subPixelInterpolationOffsetBits)>("subPixelInterpolationOffsetBits");
        addField<DAS_BIND_MANAGED_FIELD(maxFramebufferWidth)>("maxFramebufferWidth");
        addField<DAS_BIND_MANAGED_FIELD(maxFramebufferHeight)>("maxFramebufferHeight");
        addField<DAS_BIND_MANAGED_FIELD(maxFramebufferLayers)>("maxFramebufferLayers");
        addField<DAS_BIND_MANAGED_FIELD(framebufferColorSampleCounts)>("framebufferColorSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(framebufferDepthSampleCounts)>("framebufferDepthSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(framebufferStencilSampleCounts)>("framebufferStencilSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(framebufferNoAttachmentsSampleCounts)>("framebufferNoAttachmentsSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(maxColorAttachments)>("maxColorAttachments");
        addField<DAS_BIND_MANAGED_FIELD(sampledImageColorSampleCounts)>("sampledImageColorSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(sampledImageIntegerSampleCounts)>("sampledImageIntegerSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(sampledImageDepthSampleCounts)>("sampledImageDepthSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(sampledImageStencilSampleCounts)>("sampledImageStencilSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(storageImageSampleCounts)>("storageImageSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(maxSampleMaskWords)>("maxSampleMaskWords");
        addField<DAS_BIND_MANAGED_FIELD(timestampComputeAndGraphics)>("timestampComputeAndGraphics");
        addField<DAS_BIND_MANAGED_FIELD(timestampPeriod)>("timestampPeriod");
        addField<DAS_BIND_MANAGED_FIELD(maxClipDistances)>("maxClipDistances");
        addField<DAS_BIND_MANAGED_FIELD(maxCullDistances)>("maxCullDistances");
        addField<DAS_BIND_MANAGED_FIELD(maxCombinedClipAndCullDistances)>("maxCombinedClipAndCullDistances");
        addField<DAS_BIND_MANAGED_FIELD(discreteQueuePriorities)>("discreteQueuePriorities");
        addField<DAS_BIND_MANAGED_FIELD(pointSizeGranularity)>("pointSizeGranularity");
        addField<DAS_BIND_MANAGED_FIELD(lineWidthGranularity)>("lineWidthGranularity");
        addField<DAS_BIND_MANAGED_FIELD(strictLines)>("strictLines");
        addField<DAS_BIND_MANAGED_FIELD(standardSampleLocations)>("standardSampleLocations");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMemoryProperties, VkPhysicalDeviceMemoryProperties);
struct VkPhysicalDeviceMemoryPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMemoryProperties,true,true> {
    VkPhysicalDeviceMemoryPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMemoryProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(memoryTypeCount)>("memoryTypeCount");
        addField<DAS_BIND_MANAGED_FIELD(memoryHeapCount)>("memoryHeapCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSparseProperties, VkPhysicalDeviceSparseProperties);
struct VkPhysicalDeviceSparsePropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSparseProperties,true,true> {
    VkPhysicalDeviceSparsePropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSparseProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(residencyStandard2DBlockShape)>("residencyStandard2DBlockShape");
        addField<DAS_BIND_MANAGED_FIELD(residencyStandard2DMultisampleBlockShape)>("residencyStandard2DMultisampleBlockShape");
        addField<DAS_BIND_MANAGED_FIELD(residencyStandard3DBlockShape)>("residencyStandard3DBlockShape");
        addField<DAS_BIND_MANAGED_FIELD(residencyAlignedMipSize)>("residencyAlignedMipSize");
        addField<DAS_BIND_MANAGED_FIELD(residencyNonResidentStrict)>("residencyNonResidentStrict");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceProperties, VkPhysicalDeviceProperties);
struct VkPhysicalDevicePropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceProperties,true,true> {
    VkPhysicalDevicePropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(apiVersion)>("apiVersion");
        addField<DAS_BIND_MANAGED_FIELD(driverVersion)>("driverVersion");
        addField<DAS_BIND_MANAGED_FIELD(vendorID)>("vendorID");
        addField<DAS_BIND_MANAGED_FIELD(deviceID)>("deviceID");
        addField<DAS_BIND_MANAGED_FIELD(deviceType)>("deviceType");
        addField<DAS_BIND_MANAGED_FIELD(limits)>("limits");
        addField<DAS_BIND_MANAGED_FIELD(sparseProperties)>("sparseProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkQueueFamilyProperties, VkQueueFamilyProperties);
struct VkQueueFamilyPropertiesAnnotation
: public ManagedStructureAnnotation<VkQueueFamilyProperties,true,true> {
    VkQueueFamilyPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkQueueFamilyProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(queueFlags)>("queueFlags");
        addField<DAS_BIND_MANAGED_FIELD(queueCount)>("queueCount");
        addField<DAS_BIND_MANAGED_FIELD(timestampValidBits)>("timestampValidBits");
        addField<DAS_BIND_MANAGED_FIELD(minImageTransferGranularity)>("minImageTransferGranularity");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceQueueCreateInfo, VkDeviceQueueCreateInfo);
struct VkDeviceQueueCreateInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceQueueCreateInfo,true,true> {
    VkDeviceQueueCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceQueueCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndex)>("queueFamilyIndex");
        addField<DAS_BIND_MANAGED_FIELD(queueCount)>("queueCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceCreateInfo, VkDeviceCreateInfo);
struct VkDeviceCreateInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceCreateInfo,true,true> {
    VkDeviceCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(queueCreateInfoCount)>("queueCreateInfoCount");
        addField<DAS_BIND_MANAGED_FIELD(enabledLayerCount)>("enabledLayerCount");
        addField<DAS_BIND_MANAGED_FIELD(enabledExtensionCount)>("enabledExtensionCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExtensionProperties, VkExtensionProperties);
struct VkExtensionPropertiesAnnotation
: public ManagedStructureAnnotation<VkExtensionProperties,true,true> {
    VkExtensionPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExtensionProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(specVersion)>("specVersion");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkLayerProperties, VkLayerProperties);
struct VkLayerPropertiesAnnotation
: public ManagedStructureAnnotation<VkLayerProperties,true,true> {
    VkLayerPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkLayerProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(specVersion)>("specVersion");
        addField<DAS_BIND_MANAGED_FIELD(implementationVersion)>("implementationVersion");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubmitInfo, VkSubmitInfo);
struct VkSubmitInfoAnnotation
: public ManagedStructureAnnotation<VkSubmitInfo,true,true> {
    VkSubmitInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubmitInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(waitSemaphoreCount)>("waitSemaphoreCount");
        addField<DAS_BIND_MANAGED_FIELD(commandBufferCount)>("commandBufferCount");
        addField<DAS_BIND_MANAGED_FIELD(signalSemaphoreCount)>("signalSemaphoreCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMappedMemoryRange, VkMappedMemoryRange);
struct VkMappedMemoryRangeAnnotation
: public ManagedStructureAnnotation<VkMappedMemoryRange,true,true> {
    VkMappedMemoryRangeAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMappedMemoryRange", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryAllocateInfo, VkMemoryAllocateInfo);
struct VkMemoryAllocateInfoAnnotation
: public ManagedStructureAnnotation<VkMemoryAllocateInfo,true,true> {
    VkMemoryAllocateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryAllocateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(memoryTypeIndex)>("memoryTypeIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryRequirements, VkMemoryRequirements);
struct VkMemoryRequirementsAnnotation
: public ManagedStructureAnnotation<VkMemoryRequirements,true,true> {
    VkMemoryRequirementsAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryRequirements", ml) {
        addField<DAS_BIND_MANAGED_FIELD(memoryTypeBits)>("memoryTypeBits");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSparseMemoryBind, VkSparseMemoryBind);
struct VkSparseMemoryBindAnnotation
: public ManagedStructureAnnotation<VkSparseMemoryBind,true,true> {
    VkSparseMemoryBindAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseMemoryBind", ml) {
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSparseBufferMemoryBindInfo, VkSparseBufferMemoryBindInfo);
struct VkSparseBufferMemoryBindInfoAnnotation
: public ManagedStructureAnnotation<VkSparseBufferMemoryBindInfo,true,true> {
    VkSparseBufferMemoryBindInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseBufferMemoryBindInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(bindCount)>("bindCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSparseImageOpaqueMemoryBindInfo, VkSparseImageOpaqueMemoryBindInfo);
struct VkSparseImageOpaqueMemoryBindInfoAnnotation
: public ManagedStructureAnnotation<VkSparseImageOpaqueMemoryBindInfo,true,true> {
    VkSparseImageOpaqueMemoryBindInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseImageOpaqueMemoryBindInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(bindCount)>("bindCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageSubresource, VkImageSubresource);
struct VkImageSubresourceAnnotation
: public ManagedStructureAnnotation<VkImageSubresource,true,true> {
    VkImageSubresourceAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageSubresource", ml) {
        addField<DAS_BIND_MANAGED_FIELD(aspectMask)>("aspectMask");
        addField<DAS_BIND_MANAGED_FIELD(mipLevel)>("mipLevel");
        addField<DAS_BIND_MANAGED_FIELD(arrayLayer)>("arrayLayer");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSparseImageMemoryBind, VkSparseImageMemoryBind);
struct VkSparseImageMemoryBindAnnotation
: public ManagedStructureAnnotation<VkSparseImageMemoryBind,true,true> {
    VkSparseImageMemoryBindAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseImageMemoryBind", ml) {
        addField<DAS_BIND_MANAGED_FIELD(subresource)>("subresource");
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSparseImageMemoryBindInfo, VkSparseImageMemoryBindInfo);
struct VkSparseImageMemoryBindInfoAnnotation
: public ManagedStructureAnnotation<VkSparseImageMemoryBindInfo,true,true> {
    VkSparseImageMemoryBindInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseImageMemoryBindInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(bindCount)>("bindCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindSparseInfo, VkBindSparseInfo);
struct VkBindSparseInfoAnnotation
: public ManagedStructureAnnotation<VkBindSparseInfo,true,true> {
    VkBindSparseInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindSparseInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(waitSemaphoreCount)>("waitSemaphoreCount");
        addField<DAS_BIND_MANAGED_FIELD(bufferBindCount)>("bufferBindCount");
        addField<DAS_BIND_MANAGED_FIELD(imageOpaqueBindCount)>("imageOpaqueBindCount");
        addField<DAS_BIND_MANAGED_FIELD(imageBindCount)>("imageBindCount");
        addField<DAS_BIND_MANAGED_FIELD(signalSemaphoreCount)>("signalSemaphoreCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSparseImageFormatProperties, VkSparseImageFormatProperties);
struct VkSparseImageFormatPropertiesAnnotation
: public ManagedStructureAnnotation<VkSparseImageFormatProperties,true,true> {
    VkSparseImageFormatPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseImageFormatProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(aspectMask)>("aspectMask");
        addField<DAS_BIND_MANAGED_FIELD(imageGranularity)>("imageGranularity");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSparseImageMemoryRequirements, VkSparseImageMemoryRequirements);
struct VkSparseImageMemoryRequirementsAnnotation
: public ManagedStructureAnnotation<VkSparseImageMemoryRequirements,true,true> {
    VkSparseImageMemoryRequirementsAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseImageMemoryRequirements", ml) {
        addField<DAS_BIND_MANAGED_FIELD(formatProperties)>("formatProperties");
        addField<DAS_BIND_MANAGED_FIELD(imageMipTailFirstLod)>("imageMipTailFirstLod");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkFenceCreateInfo, VkFenceCreateInfo);
struct VkFenceCreateInfoAnnotation
: public ManagedStructureAnnotation<VkFenceCreateInfo,true,true> {
    VkFenceCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFenceCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSemaphoreCreateInfo, VkSemaphoreCreateInfo);
struct VkSemaphoreCreateInfoAnnotation
: public ManagedStructureAnnotation<VkSemaphoreCreateInfo,true,true> {
    VkSemaphoreCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSemaphoreCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkEventCreateInfo, VkEventCreateInfo);
struct VkEventCreateInfoAnnotation
: public ManagedStructureAnnotation<VkEventCreateInfo,true,true> {
    VkEventCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkEventCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkQueryPoolCreateInfo, VkQueryPoolCreateInfo);
struct VkQueryPoolCreateInfoAnnotation
: public ManagedStructureAnnotation<VkQueryPoolCreateInfo,true,true> {
    VkQueryPoolCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkQueryPoolCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(queryType)>("queryType");
        addField<DAS_BIND_MANAGED_FIELD(queryCount)>("queryCount");
        addField<DAS_BIND_MANAGED_FIELD(pipelineStatistics)>("pipelineStatistics");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBufferCreateInfo, VkBufferCreateInfo);
struct VkBufferCreateInfoAnnotation
: public ManagedStructureAnnotation<VkBufferCreateInfo,true,true> {
    VkBufferCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(usage)>("usage");
        addField<DAS_BIND_MANAGED_FIELD(sharingMode)>("sharingMode");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndexCount)>("queueFamilyIndexCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBufferViewCreateInfo, VkBufferViewCreateInfo);
struct VkBufferViewCreateInfoAnnotation
: public ManagedStructureAnnotation<VkBufferViewCreateInfo,true,true> {
    VkBufferViewCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferViewCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageCreateInfo, VkImageCreateInfo);
struct VkImageCreateInfoAnnotation
: public ManagedStructureAnnotation<VkImageCreateInfo,true,true> {
    VkImageCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(imageType)>("imageType");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
        addField<DAS_BIND_MANAGED_FIELD(mipLevels)>("mipLevels");
        addField<DAS_BIND_MANAGED_FIELD(arrayLayers)>("arrayLayers");
        addField<DAS_BIND_MANAGED_FIELD(samples)>("samples");
        addField<DAS_BIND_MANAGED_FIELD(tiling)>("tiling");
        addField<DAS_BIND_MANAGED_FIELD(usage)>("usage");
        addField<DAS_BIND_MANAGED_FIELD(sharingMode)>("sharingMode");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndexCount)>("queueFamilyIndexCount");
        addField<DAS_BIND_MANAGED_FIELD(initialLayout)>("initialLayout");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubresourceLayout, VkSubresourceLayout);
struct VkSubresourceLayoutAnnotation
: public ManagedStructureAnnotation<VkSubresourceLayout,true,true> {
    VkSubresourceLayoutAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubresourceLayout", ml) {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkComponentMapping, VkComponentMapping);
struct VkComponentMappingAnnotation
: public ManagedStructureAnnotation<VkComponentMapping,true,true> {
    VkComponentMappingAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkComponentMapping", ml) {
        addField<DAS_BIND_MANAGED_FIELD(r)>("r");
        addField<DAS_BIND_MANAGED_FIELD(g)>("g");
        addField<DAS_BIND_MANAGED_FIELD(b)>("b");
        addField<DAS_BIND_MANAGED_FIELD(a)>("a");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageViewCreateInfo, VkImageViewCreateInfo);
struct VkImageViewCreateInfoAnnotation
: public ManagedStructureAnnotation<VkImageViewCreateInfo,true,true> {
    VkImageViewCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageViewCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(viewType)>("viewType");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(components)>("components");
        addField<DAS_BIND_MANAGED_FIELD(subresourceRange)>("subresourceRange");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkShaderModuleCreateInfo, VkShaderModuleCreateInfo);
struct VkShaderModuleCreateInfoAnnotation
: public ManagedStructureAnnotation<VkShaderModuleCreateInfo,true,true> {
    VkShaderModuleCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkShaderModuleCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineCacheCreateInfo, VkPipelineCacheCreateInfo);
struct VkPipelineCacheCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineCacheCreateInfo,true,true> {
    VkPipelineCacheCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineCacheCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSpecializationMapEntry, VkSpecializationMapEntry);
struct VkSpecializationMapEntryAnnotation
: public ManagedStructureAnnotation<VkSpecializationMapEntry,true,true> {
    VkSpecializationMapEntryAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSpecializationMapEntry", ml) {
        addField<DAS_BIND_MANAGED_FIELD(constantID)>("constantID");
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSpecializationInfo, VkSpecializationInfo);
struct VkSpecializationInfoAnnotation
: public ManagedStructureAnnotation<VkSpecializationInfo,true,true> {
    VkSpecializationInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSpecializationInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(mapEntryCount)>("mapEntryCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineShaderStageCreateInfo, VkPipelineShaderStageCreateInfo);
struct VkPipelineShaderStageCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineShaderStageCreateInfo,true,true> {
    VkPipelineShaderStageCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineShaderStageCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(stage)>("stage");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkComputePipelineCreateInfo, VkComputePipelineCreateInfo);
struct VkComputePipelineCreateInfoAnnotation
: public ManagedStructureAnnotation<VkComputePipelineCreateInfo,true,true> {
    VkComputePipelineCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkComputePipelineCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(stage)>("stage");
        addField<DAS_BIND_MANAGED_FIELD(basePipelineIndex)>("basePipelineIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkVertexInputBindingDescription, VkVertexInputBindingDescription);
struct VkVertexInputBindingDescriptionAnnotation
: public ManagedStructureAnnotation<VkVertexInputBindingDescription,true,true> {
    VkVertexInputBindingDescriptionAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkVertexInputBindingDescription", ml) {
        addField<DAS_BIND_MANAGED_FIELD(binding)>("binding");
        addField<DAS_BIND_MANAGED_FIELD(stride)>("stride");
        addField<DAS_BIND_MANAGED_FIELD(inputRate)>("inputRate");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkVertexInputAttributeDescription, VkVertexInputAttributeDescription);
struct VkVertexInputAttributeDescriptionAnnotation
: public ManagedStructureAnnotation<VkVertexInputAttributeDescription,true,true> {
    VkVertexInputAttributeDescriptionAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkVertexInputAttributeDescription", ml) {
        addField<DAS_BIND_MANAGED_FIELD(location)>("location");
        addField<DAS_BIND_MANAGED_FIELD(binding)>("binding");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineVertexInputStateCreateInfo, VkPipelineVertexInputStateCreateInfo);
struct VkPipelineVertexInputStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineVertexInputStateCreateInfo,true,true> {
    VkPipelineVertexInputStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineVertexInputStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(vertexBindingDescriptionCount)>("vertexBindingDescriptionCount");
        addField<DAS_BIND_MANAGED_FIELD(vertexAttributeDescriptionCount)>("vertexAttributeDescriptionCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineInputAssemblyStateCreateInfo, VkPipelineInputAssemblyStateCreateInfo);
struct VkPipelineInputAssemblyStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineInputAssemblyStateCreateInfo,true,true> {
    VkPipelineInputAssemblyStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineInputAssemblyStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(topology)>("topology");
        addField<DAS_BIND_MANAGED_FIELD(primitiveRestartEnable)>("primitiveRestartEnable");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineTessellationStateCreateInfo, VkPipelineTessellationStateCreateInfo);
struct VkPipelineTessellationStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineTessellationStateCreateInfo,true,true> {
    VkPipelineTessellationStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineTessellationStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(patchControlPoints)>("patchControlPoints");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkViewport, VkViewport);
struct VkViewportAnnotation
: public ManagedStructureAnnotation<VkViewport,true,true> {
    VkViewportAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkViewport", ml) {
        addField<DAS_BIND_MANAGED_FIELD(x)>("x");
        addField<DAS_BIND_MANAGED_FIELD(y)>("y");
        addField<DAS_BIND_MANAGED_FIELD(width)>("width");
        addField<DAS_BIND_MANAGED_FIELD(height)>("height");
        addField<DAS_BIND_MANAGED_FIELD(minDepth)>("minDepth");
        addField<DAS_BIND_MANAGED_FIELD(maxDepth)>("maxDepth");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineViewportStateCreateInfo, VkPipelineViewportStateCreateInfo);
struct VkPipelineViewportStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineViewportStateCreateInfo,true,true> {
    VkPipelineViewportStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineViewportStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(viewportCount)>("viewportCount");
        addField<DAS_BIND_MANAGED_FIELD(scissorCount)>("scissorCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineRasterizationStateCreateInfo, VkPipelineRasterizationStateCreateInfo);
struct VkPipelineRasterizationStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineRasterizationStateCreateInfo,true,true> {
    VkPipelineRasterizationStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineRasterizationStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(depthClampEnable)>("depthClampEnable");
        addField<DAS_BIND_MANAGED_FIELD(rasterizerDiscardEnable)>("rasterizerDiscardEnable");
        addField<DAS_BIND_MANAGED_FIELD(polygonMode)>("polygonMode");
        addField<DAS_BIND_MANAGED_FIELD(cullMode)>("cullMode");
        addField<DAS_BIND_MANAGED_FIELD(frontFace)>("frontFace");
        addField<DAS_BIND_MANAGED_FIELD(depthBiasEnable)>("depthBiasEnable");
        addField<DAS_BIND_MANAGED_FIELD(depthBiasConstantFactor)>("depthBiasConstantFactor");
        addField<DAS_BIND_MANAGED_FIELD(depthBiasClamp)>("depthBiasClamp");
        addField<DAS_BIND_MANAGED_FIELD(depthBiasSlopeFactor)>("depthBiasSlopeFactor");
        addField<DAS_BIND_MANAGED_FIELD(lineWidth)>("lineWidth");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineMultisampleStateCreateInfo, VkPipelineMultisampleStateCreateInfo);
struct VkPipelineMultisampleStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineMultisampleStateCreateInfo,true,true> {
    VkPipelineMultisampleStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineMultisampleStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(rasterizationSamples)>("rasterizationSamples");
        addField<DAS_BIND_MANAGED_FIELD(sampleShadingEnable)>("sampleShadingEnable");
        addField<DAS_BIND_MANAGED_FIELD(minSampleShading)>("minSampleShading");
        addField<DAS_BIND_MANAGED_FIELD(alphaToCoverageEnable)>("alphaToCoverageEnable");
        addField<DAS_BIND_MANAGED_FIELD(alphaToOneEnable)>("alphaToOneEnable");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkStencilOpState, VkStencilOpState);
struct VkStencilOpStateAnnotation
: public ManagedStructureAnnotation<VkStencilOpState,true,true> {
    VkStencilOpStateAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkStencilOpState", ml) {
        addField<DAS_BIND_MANAGED_FIELD(failOp)>("failOp");
        addField<DAS_BIND_MANAGED_FIELD(passOp)>("passOp");
        addField<DAS_BIND_MANAGED_FIELD(depthFailOp)>("depthFailOp");
        addField<DAS_BIND_MANAGED_FIELD(compareOp)>("compareOp");
        addField<DAS_BIND_MANAGED_FIELD(compareMask)>("compareMask");
        addField<DAS_BIND_MANAGED_FIELD(writeMask)>("writeMask");
        addField<DAS_BIND_MANAGED_FIELD(reference)>("reference");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineDepthStencilStateCreateInfo, VkPipelineDepthStencilStateCreateInfo);
struct VkPipelineDepthStencilStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineDepthStencilStateCreateInfo,true,true> {
    VkPipelineDepthStencilStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineDepthStencilStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(depthTestEnable)>("depthTestEnable");
        addField<DAS_BIND_MANAGED_FIELD(depthWriteEnable)>("depthWriteEnable");
        addField<DAS_BIND_MANAGED_FIELD(depthCompareOp)>("depthCompareOp");
        addField<DAS_BIND_MANAGED_FIELD(depthBoundsTestEnable)>("depthBoundsTestEnable");
        addField<DAS_BIND_MANAGED_FIELD(stencilTestEnable)>("stencilTestEnable");
        addField<DAS_BIND_MANAGED_FIELD(front)>("front");
        addField<DAS_BIND_MANAGED_FIELD(back)>("back");
        addField<DAS_BIND_MANAGED_FIELD(minDepthBounds)>("minDepthBounds");
        addField<DAS_BIND_MANAGED_FIELD(maxDepthBounds)>("maxDepthBounds");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineColorBlendAttachmentState, VkPipelineColorBlendAttachmentState);
struct VkPipelineColorBlendAttachmentStateAnnotation
: public ManagedStructureAnnotation<VkPipelineColorBlendAttachmentState,true,true> {
    VkPipelineColorBlendAttachmentStateAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineColorBlendAttachmentState", ml) {
        addField<DAS_BIND_MANAGED_FIELD(blendEnable)>("blendEnable");
        addField<DAS_BIND_MANAGED_FIELD(srcColorBlendFactor)>("srcColorBlendFactor");
        addField<DAS_BIND_MANAGED_FIELD(dstColorBlendFactor)>("dstColorBlendFactor");
        addField<DAS_BIND_MANAGED_FIELD(colorBlendOp)>("colorBlendOp");
        addField<DAS_BIND_MANAGED_FIELD(srcAlphaBlendFactor)>("srcAlphaBlendFactor");
        addField<DAS_BIND_MANAGED_FIELD(dstAlphaBlendFactor)>("dstAlphaBlendFactor");
        addField<DAS_BIND_MANAGED_FIELD(alphaBlendOp)>("alphaBlendOp");
        addField<DAS_BIND_MANAGED_FIELD(colorWriteMask)>("colorWriteMask");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineColorBlendStateCreateInfo, VkPipelineColorBlendStateCreateInfo);
struct VkPipelineColorBlendStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineColorBlendStateCreateInfo,true,true> {
    VkPipelineColorBlendStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineColorBlendStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(logicOpEnable)>("logicOpEnable");
        addField<DAS_BIND_MANAGED_FIELD(logicOp)>("logicOp");
        addField<DAS_BIND_MANAGED_FIELD(attachmentCount)>("attachmentCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineDynamicStateCreateInfo, VkPipelineDynamicStateCreateInfo);
struct VkPipelineDynamicStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineDynamicStateCreateInfo,true,true> {
    VkPipelineDynamicStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineDynamicStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(dynamicStateCount)>("dynamicStateCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkGraphicsPipelineCreateInfo, VkGraphicsPipelineCreateInfo);
struct VkGraphicsPipelineCreateInfoAnnotation
: public ManagedStructureAnnotation<VkGraphicsPipelineCreateInfo,true,true> {
    VkGraphicsPipelineCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGraphicsPipelineCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(stageCount)>("stageCount");
        addField<DAS_BIND_MANAGED_FIELD(subpass)>("subpass");
        addField<DAS_BIND_MANAGED_FIELD(basePipelineIndex)>("basePipelineIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPushConstantRange, VkPushConstantRange);
struct VkPushConstantRangeAnnotation
: public ManagedStructureAnnotation<VkPushConstantRange,true,true> {
    VkPushConstantRangeAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPushConstantRange", ml) {
        addField<DAS_BIND_MANAGED_FIELD(stageFlags)>("stageFlags");
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
        addField<DAS_BIND_MANAGED_FIELD(size)>("size");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineLayoutCreateInfo, VkPipelineLayoutCreateInfo);
struct VkPipelineLayoutCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineLayoutCreateInfo,true,true> {
    VkPipelineLayoutCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineLayoutCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(setLayoutCount)>("setLayoutCount");
        addField<DAS_BIND_MANAGED_FIELD(pushConstantRangeCount)>("pushConstantRangeCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSamplerCreateInfo, VkSamplerCreateInfo);
struct VkSamplerCreateInfoAnnotation
: public ManagedStructureAnnotation<VkSamplerCreateInfo,true,true> {
    VkSamplerCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSamplerCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(magFilter)>("magFilter");
        addField<DAS_BIND_MANAGED_FIELD(minFilter)>("minFilter");
        addField<DAS_BIND_MANAGED_FIELD(mipmapMode)>("mipmapMode");
        addField<DAS_BIND_MANAGED_FIELD(addressModeU)>("addressModeU");
        addField<DAS_BIND_MANAGED_FIELD(addressModeV)>("addressModeV");
        addField<DAS_BIND_MANAGED_FIELD(addressModeW)>("addressModeW");
        addField<DAS_BIND_MANAGED_FIELD(mipLodBias)>("mipLodBias");
        addField<DAS_BIND_MANAGED_FIELD(anisotropyEnable)>("anisotropyEnable");
        addField<DAS_BIND_MANAGED_FIELD(maxAnisotropy)>("maxAnisotropy");
        addField<DAS_BIND_MANAGED_FIELD(compareEnable)>("compareEnable");
        addField<DAS_BIND_MANAGED_FIELD(compareOp)>("compareOp");
        addField<DAS_BIND_MANAGED_FIELD(minLod)>("minLod");
        addField<DAS_BIND_MANAGED_FIELD(maxLod)>("maxLod");
        addField<DAS_BIND_MANAGED_FIELD(borderColor)>("borderColor");
        addField<DAS_BIND_MANAGED_FIELD(unnormalizedCoordinates)>("unnormalizedCoordinates");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCopyDescriptorSet, VkCopyDescriptorSet);
struct VkCopyDescriptorSetAnnotation
: public ManagedStructureAnnotation<VkCopyDescriptorSet,true,true> {
    VkCopyDescriptorSetAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCopyDescriptorSet", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(srcBinding)>("srcBinding");
        addField<DAS_BIND_MANAGED_FIELD(srcArrayElement)>("srcArrayElement");
        addField<DAS_BIND_MANAGED_FIELD(dstBinding)>("dstBinding");
        addField<DAS_BIND_MANAGED_FIELD(dstArrayElement)>("dstArrayElement");
        addField<DAS_BIND_MANAGED_FIELD(descriptorCount)>("descriptorCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorBufferInfo, VkDescriptorBufferInfo);
struct VkDescriptorBufferInfoAnnotation
: public ManagedStructureAnnotation<VkDescriptorBufferInfo,true,true> {
    VkDescriptorBufferInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorBufferInfo", ml) {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorImageInfo, VkDescriptorImageInfo);
struct VkDescriptorImageInfoAnnotation
: public ManagedStructureAnnotation<VkDescriptorImageInfo,true,true> {
    VkDescriptorImageInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorImageInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(imageLayout)>("imageLayout");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorPoolSize, VkDescriptorPoolSize);
struct VkDescriptorPoolSizeAnnotation
: public ManagedStructureAnnotation<VkDescriptorPoolSize,true,true> {
    VkDescriptorPoolSizeAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorPoolSize", ml) {
        addField<DAS_BIND_MANAGED_FIELD(type)>("type");
        addField<DAS_BIND_MANAGED_FIELD(descriptorCount)>("descriptorCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorPoolCreateInfo, VkDescriptorPoolCreateInfo);
struct VkDescriptorPoolCreateInfoAnnotation
: public ManagedStructureAnnotation<VkDescriptorPoolCreateInfo,true,true> {
    VkDescriptorPoolCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorPoolCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(maxSets)>("maxSets");
        addField<DAS_BIND_MANAGED_FIELD(poolSizeCount)>("poolSizeCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorSetAllocateInfo, VkDescriptorSetAllocateInfo);
struct VkDescriptorSetAllocateInfoAnnotation
: public ManagedStructureAnnotation<VkDescriptorSetAllocateInfo,true,true> {
    VkDescriptorSetAllocateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorSetAllocateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(descriptorSetCount)>("descriptorSetCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorSetLayoutBinding, VkDescriptorSetLayoutBinding);
struct VkDescriptorSetLayoutBindingAnnotation
: public ManagedStructureAnnotation<VkDescriptorSetLayoutBinding,true,true> {
    VkDescriptorSetLayoutBindingAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorSetLayoutBinding", ml) {
        addField<DAS_BIND_MANAGED_FIELD(binding)>("binding");
        addField<DAS_BIND_MANAGED_FIELD(descriptorType)>("descriptorType");
        addField<DAS_BIND_MANAGED_FIELD(descriptorCount)>("descriptorCount");
        addField<DAS_BIND_MANAGED_FIELD(stageFlags)>("stageFlags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorSetLayoutCreateInfo, VkDescriptorSetLayoutCreateInfo);
struct VkDescriptorSetLayoutCreateInfoAnnotation
: public ManagedStructureAnnotation<VkDescriptorSetLayoutCreateInfo,true,true> {
    VkDescriptorSetLayoutCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorSetLayoutCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(bindingCount)>("bindingCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkWriteDescriptorSet, VkWriteDescriptorSet);
struct VkWriteDescriptorSetAnnotation
: public ManagedStructureAnnotation<VkWriteDescriptorSet,true,true> {
    VkWriteDescriptorSetAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkWriteDescriptorSet", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(dstBinding)>("dstBinding");
        addField<DAS_BIND_MANAGED_FIELD(dstArrayElement)>("dstArrayElement");
        addField<DAS_BIND_MANAGED_FIELD(descriptorCount)>("descriptorCount");
        addField<DAS_BIND_MANAGED_FIELD(descriptorType)>("descriptorType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAttachmentDescription, VkAttachmentDescription);
struct VkAttachmentDescriptionAnnotation
: public ManagedStructureAnnotation<VkAttachmentDescription,true,true> {
    VkAttachmentDescriptionAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAttachmentDescription", ml) {
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(samples)>("samples");
        addField<DAS_BIND_MANAGED_FIELD(loadOp)>("loadOp");
        addField<DAS_BIND_MANAGED_FIELD(storeOp)>("storeOp");
        addField<DAS_BIND_MANAGED_FIELD(stencilLoadOp)>("stencilLoadOp");
        addField<DAS_BIND_MANAGED_FIELD(stencilStoreOp)>("stencilStoreOp");
        addField<DAS_BIND_MANAGED_FIELD(initialLayout)>("initialLayout");
        addField<DAS_BIND_MANAGED_FIELD(finalLayout)>("finalLayout");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAttachmentReference, VkAttachmentReference);
struct VkAttachmentReferenceAnnotation
: public ManagedStructureAnnotation<VkAttachmentReference,true,true> {
    VkAttachmentReferenceAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAttachmentReference", ml) {
        addField<DAS_BIND_MANAGED_FIELD(attachment)>("attachment");
        addField<DAS_BIND_MANAGED_FIELD(layout)>("layout");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkFramebufferCreateInfo, VkFramebufferCreateInfo);
struct VkFramebufferCreateInfoAnnotation
: public ManagedStructureAnnotation<VkFramebufferCreateInfo,true,true> {
    VkFramebufferCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFramebufferCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(attachmentCount)>("attachmentCount");
        addField<DAS_BIND_MANAGED_FIELD(width)>("width");
        addField<DAS_BIND_MANAGED_FIELD(height)>("height");
        addField<DAS_BIND_MANAGED_FIELD(layers)>("layers");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubpassDescription, VkSubpassDescription);
struct VkSubpassDescriptionAnnotation
: public ManagedStructureAnnotation<VkSubpassDescription,true,true> {
    VkSubpassDescriptionAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubpassDescription", ml) {
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(pipelineBindPoint)>("pipelineBindPoint");
        addField<DAS_BIND_MANAGED_FIELD(inputAttachmentCount)>("inputAttachmentCount");
        addField<DAS_BIND_MANAGED_FIELD(colorAttachmentCount)>("colorAttachmentCount");
        addField<DAS_BIND_MANAGED_FIELD(preserveAttachmentCount)>("preserveAttachmentCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubpassDependency, VkSubpassDependency);
struct VkSubpassDependencyAnnotation
: public ManagedStructureAnnotation<VkSubpassDependency,true,true> {
    VkSubpassDependencyAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubpassDependency", ml) {
        addField<DAS_BIND_MANAGED_FIELD(srcSubpass)>("srcSubpass");
        addField<DAS_BIND_MANAGED_FIELD(dstSubpass)>("dstSubpass");
        addField<DAS_BIND_MANAGED_FIELD(srcStageMask)>("srcStageMask");
        addField<DAS_BIND_MANAGED_FIELD(dstStageMask)>("dstStageMask");
        addField<DAS_BIND_MANAGED_FIELD(srcAccessMask)>("srcAccessMask");
        addField<DAS_BIND_MANAGED_FIELD(dstAccessMask)>("dstAccessMask");
        addField<DAS_BIND_MANAGED_FIELD(dependencyFlags)>("dependencyFlags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRenderPassCreateInfo, VkRenderPassCreateInfo);
struct VkRenderPassCreateInfoAnnotation
: public ManagedStructureAnnotation<VkRenderPassCreateInfo,true,true> {
    VkRenderPassCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(attachmentCount)>("attachmentCount");
        addField<DAS_BIND_MANAGED_FIELD(subpassCount)>("subpassCount");
        addField<DAS_BIND_MANAGED_FIELD(dependencyCount)>("dependencyCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCommandPoolCreateInfo, VkCommandPoolCreateInfo);
struct VkCommandPoolCreateInfoAnnotation
: public ManagedStructureAnnotation<VkCommandPoolCreateInfo,true,true> {
    VkCommandPoolCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCommandPoolCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndex)>("queueFamilyIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCommandBufferAllocateInfo, VkCommandBufferAllocateInfo);
struct VkCommandBufferAllocateInfoAnnotation
: public ManagedStructureAnnotation<VkCommandBufferAllocateInfo,true,true> {
    VkCommandBufferAllocateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCommandBufferAllocateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(level)>("level");
        addField<DAS_BIND_MANAGED_FIELD(commandBufferCount)>("commandBufferCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCommandBufferInheritanceInfo, VkCommandBufferInheritanceInfo);
struct VkCommandBufferInheritanceInfoAnnotation
: public ManagedStructureAnnotation<VkCommandBufferInheritanceInfo,true,true> {
    VkCommandBufferInheritanceInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCommandBufferInheritanceInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(subpass)>("subpass");
        addField<DAS_BIND_MANAGED_FIELD(occlusionQueryEnable)>("occlusionQueryEnable");
        addField<DAS_BIND_MANAGED_FIELD(queryFlags)>("queryFlags");
        addField<DAS_BIND_MANAGED_FIELD(pipelineStatistics)>("pipelineStatistics");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCommandBufferBeginInfo, VkCommandBufferBeginInfo);
struct VkCommandBufferBeginInfoAnnotation
: public ManagedStructureAnnotation<VkCommandBufferBeginInfo,true,true> {
    VkCommandBufferBeginInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCommandBufferBeginInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBufferCopy, VkBufferCopy);
struct VkBufferCopyAnnotation
: public ManagedStructureAnnotation<VkBufferCopy,true,true> {
    VkBufferCopyAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferCopy", ml) {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageSubresourceLayers, VkImageSubresourceLayers);
struct VkImageSubresourceLayersAnnotation
: public ManagedStructureAnnotation<VkImageSubresourceLayers,true,true> {
    VkImageSubresourceLayersAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageSubresourceLayers", ml) {
        addField<DAS_BIND_MANAGED_FIELD(aspectMask)>("aspectMask");
        addField<DAS_BIND_MANAGED_FIELD(mipLevel)>("mipLevel");
        addField<DAS_BIND_MANAGED_FIELD(baseArrayLayer)>("baseArrayLayer");
        addField<DAS_BIND_MANAGED_FIELD(layerCount)>("layerCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBufferImageCopy, VkBufferImageCopy);
struct VkBufferImageCopyAnnotation
: public ManagedStructureAnnotation<VkBufferImageCopy,true,true> {
    VkBufferImageCopyAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferImageCopy", ml) {
        addField<DAS_BIND_MANAGED_FIELD(bufferRowLength)>("bufferRowLength");
        addField<DAS_BIND_MANAGED_FIELD(bufferImageHeight)>("bufferImageHeight");
        addField<DAS_BIND_MANAGED_FIELD(imageSubresource)>("imageSubresource");
        addField<DAS_BIND_MANAGED_FIELD(imageOffset)>("imageOffset");
        addField<DAS_BIND_MANAGED_FIELD(imageExtent)>("imageExtent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkClearDepthStencilValue, VkClearDepthStencilValue);
struct VkClearDepthStencilValueAnnotation
: public ManagedStructureAnnotation<VkClearDepthStencilValue,true,true> {
    VkClearDepthStencilValueAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkClearDepthStencilValue", ml) {
        addField<DAS_BIND_MANAGED_FIELD(depth)>("depth");
        addField<DAS_BIND_MANAGED_FIELD(stencil)>("stencil");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkClearAttachment, VkClearAttachment);
struct VkClearAttachmentAnnotation
: public ManagedStructureAnnotation<VkClearAttachment,true,true> {
    VkClearAttachmentAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkClearAttachment", ml) {
        addField<DAS_BIND_MANAGED_FIELD(aspectMask)>("aspectMask");
        addField<DAS_BIND_MANAGED_FIELD(colorAttachment)>("colorAttachment");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkClearRect, VkClearRect);
struct VkClearRectAnnotation
: public ManagedStructureAnnotation<VkClearRect,true,true> {
    VkClearRectAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkClearRect", ml) {
        addField<DAS_BIND_MANAGED_FIELD(rect)>("rect");
        addField<DAS_BIND_MANAGED_FIELD(baseArrayLayer)>("baseArrayLayer");
        addField<DAS_BIND_MANAGED_FIELD(layerCount)>("layerCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageBlit, VkImageBlit);
struct VkImageBlitAnnotation
: public ManagedStructureAnnotation<VkImageBlit,true,true> {
    VkImageBlitAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageBlit", ml) {
        addField<DAS_BIND_MANAGED_FIELD(srcSubresource)>("srcSubresource");
        addField<DAS_BIND_MANAGED_FIELD(dstSubresource)>("dstSubresource");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageCopy, VkImageCopy);
struct VkImageCopyAnnotation
: public ManagedStructureAnnotation<VkImageCopy,true,true> {
    VkImageCopyAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageCopy", ml) {
        addField<DAS_BIND_MANAGED_FIELD(srcSubresource)>("srcSubresource");
        addField<DAS_BIND_MANAGED_FIELD(srcOffset)>("srcOffset");
        addField<DAS_BIND_MANAGED_FIELD(dstSubresource)>("dstSubresource");
        addField<DAS_BIND_MANAGED_FIELD(dstOffset)>("dstOffset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageResolve, VkImageResolve);
struct VkImageResolveAnnotation
: public ManagedStructureAnnotation<VkImageResolve,true,true> {
    VkImageResolveAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageResolve", ml) {
        addField<DAS_BIND_MANAGED_FIELD(srcSubresource)>("srcSubresource");
        addField<DAS_BIND_MANAGED_FIELD(srcOffset)>("srcOffset");
        addField<DAS_BIND_MANAGED_FIELD(dstSubresource)>("dstSubresource");
        addField<DAS_BIND_MANAGED_FIELD(dstOffset)>("dstOffset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRenderPassBeginInfo, VkRenderPassBeginInfo);
struct VkRenderPassBeginInfoAnnotation
: public ManagedStructureAnnotation<VkRenderPassBeginInfo,true,true> {
    VkRenderPassBeginInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassBeginInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(renderArea)>("renderArea");
        addField<DAS_BIND_MANAGED_FIELD(clearValueCount)>("clearValueCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSubgroupProperties, VkPhysicalDeviceSubgroupProperties);
struct VkPhysicalDeviceSubgroupPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSubgroupProperties,true,true> {
    VkPhysicalDeviceSubgroupPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSubgroupProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(subgroupSize)>("subgroupSize");
        addField<DAS_BIND_MANAGED_FIELD(supportedStages)>("supportedStages");
        addField<DAS_BIND_MANAGED_FIELD(supportedOperations)>("supportedOperations");
        addField<DAS_BIND_MANAGED_FIELD(quadOperationsInAllStages)>("quadOperationsInAllStages");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindBufferMemoryInfo, VkBindBufferMemoryInfo);
struct VkBindBufferMemoryInfoAnnotation
: public ManagedStructureAnnotation<VkBindBufferMemoryInfo,true,true> {
    VkBindBufferMemoryInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindBufferMemoryInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindImageMemoryInfo, VkBindImageMemoryInfo);
struct VkBindImageMemoryInfoAnnotation
: public ManagedStructureAnnotation<VkBindImageMemoryInfo,true,true> {
    VkBindImageMemoryInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindImageMemoryInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevice16BitStorageFeatures, VkPhysicalDevice16BitStorageFeatures);
struct VkPhysicalDevice16BitStorageFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevice16BitStorageFeatures,true,true> {
    VkPhysicalDevice16BitStorageFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevice16BitStorageFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(storageBuffer16BitAccess)>("storageBuffer16BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(uniformAndStorageBuffer16BitAccess)>("uniformAndStorageBuffer16BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(storagePushConstant16)>("storagePushConstant16");
        addField<DAS_BIND_MANAGED_FIELD(storageInputOutput16)>("storageInputOutput16");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryDedicatedRequirements, VkMemoryDedicatedRequirements);
struct VkMemoryDedicatedRequirementsAnnotation
: public ManagedStructureAnnotation<VkMemoryDedicatedRequirements,true,true> {
    VkMemoryDedicatedRequirementsAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryDedicatedRequirements", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(prefersDedicatedAllocation)>("prefersDedicatedAllocation");
        addField<DAS_BIND_MANAGED_FIELD(requiresDedicatedAllocation)>("requiresDedicatedAllocation");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryDedicatedAllocateInfo, VkMemoryDedicatedAllocateInfo);
struct VkMemoryDedicatedAllocateInfoAnnotation
: public ManagedStructureAnnotation<VkMemoryDedicatedAllocateInfo,true,true> {
    VkMemoryDedicatedAllocateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryDedicatedAllocateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryAllocateFlagsInfo, VkMemoryAllocateFlagsInfo);
struct VkMemoryAllocateFlagsInfoAnnotation
: public ManagedStructureAnnotation<VkMemoryAllocateFlagsInfo,true,true> {
    VkMemoryAllocateFlagsInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryAllocateFlagsInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(deviceMask)>("deviceMask");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceGroupRenderPassBeginInfo, VkDeviceGroupRenderPassBeginInfo);
struct VkDeviceGroupRenderPassBeginInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupRenderPassBeginInfo,true,true> {
    VkDeviceGroupRenderPassBeginInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupRenderPassBeginInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceMask)>("deviceMask");
        addField<DAS_BIND_MANAGED_FIELD(deviceRenderAreaCount)>("deviceRenderAreaCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceGroupCommandBufferBeginInfo, VkDeviceGroupCommandBufferBeginInfo);
struct VkDeviceGroupCommandBufferBeginInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupCommandBufferBeginInfo,true,true> {
    VkDeviceGroupCommandBufferBeginInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupCommandBufferBeginInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceMask)>("deviceMask");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceGroupSubmitInfo, VkDeviceGroupSubmitInfo);
struct VkDeviceGroupSubmitInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupSubmitInfo,true,true> {
    VkDeviceGroupSubmitInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupSubmitInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(waitSemaphoreCount)>("waitSemaphoreCount");
        addField<DAS_BIND_MANAGED_FIELD(commandBufferCount)>("commandBufferCount");
        addField<DAS_BIND_MANAGED_FIELD(signalSemaphoreCount)>("signalSemaphoreCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceGroupBindSparseInfo, VkDeviceGroupBindSparseInfo);
struct VkDeviceGroupBindSparseInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupBindSparseInfo,true,true> {
    VkDeviceGroupBindSparseInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupBindSparseInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(resourceDeviceIndex)>("resourceDeviceIndex");
        addField<DAS_BIND_MANAGED_FIELD(memoryDeviceIndex)>("memoryDeviceIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindBufferMemoryDeviceGroupInfo, VkBindBufferMemoryDeviceGroupInfo);
struct VkBindBufferMemoryDeviceGroupInfoAnnotation
: public ManagedStructureAnnotation<VkBindBufferMemoryDeviceGroupInfo,true,true> {
    VkBindBufferMemoryDeviceGroupInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindBufferMemoryDeviceGroupInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceIndexCount)>("deviceIndexCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindImageMemoryDeviceGroupInfo, VkBindImageMemoryDeviceGroupInfo);
struct VkBindImageMemoryDeviceGroupInfoAnnotation
: public ManagedStructureAnnotation<VkBindImageMemoryDeviceGroupInfo,true,true> {
    VkBindImageMemoryDeviceGroupInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindImageMemoryDeviceGroupInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceIndexCount)>("deviceIndexCount");
        addField<DAS_BIND_MANAGED_FIELD(splitInstanceBindRegionCount)>("splitInstanceBindRegionCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceGroupProperties, VkPhysicalDeviceGroupProperties);
struct VkPhysicalDeviceGroupPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceGroupProperties,true,true> {
    VkPhysicalDeviceGroupPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceGroupProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(physicalDeviceCount)>("physicalDeviceCount");
        addField<DAS_BIND_MANAGED_FIELD(subsetAllocation)>("subsetAllocation");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceGroupDeviceCreateInfo, VkDeviceGroupDeviceCreateInfo);
struct VkDeviceGroupDeviceCreateInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupDeviceCreateInfo,true,true> {
    VkDeviceGroupDeviceCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupDeviceCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(physicalDeviceCount)>("physicalDeviceCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBufferMemoryRequirementsInfo2, VkBufferMemoryRequirementsInfo2);
struct VkBufferMemoryRequirementsInfo2Annotation
: public ManagedStructureAnnotation<VkBufferMemoryRequirementsInfo2,true,true> {
    VkBufferMemoryRequirementsInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferMemoryRequirementsInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageMemoryRequirementsInfo2, VkImageMemoryRequirementsInfo2);
struct VkImageMemoryRequirementsInfo2Annotation
: public ManagedStructureAnnotation<VkImageMemoryRequirementsInfo2,true,true> {
    VkImageMemoryRequirementsInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageMemoryRequirementsInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageSparseMemoryRequirementsInfo2, VkImageSparseMemoryRequirementsInfo2);
struct VkImageSparseMemoryRequirementsInfo2Annotation
: public ManagedStructureAnnotation<VkImageSparseMemoryRequirementsInfo2,true,true> {
    VkImageSparseMemoryRequirementsInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageSparseMemoryRequirementsInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryRequirements2, VkMemoryRequirements2);
struct VkMemoryRequirements2Annotation
: public ManagedStructureAnnotation<VkMemoryRequirements2,true,true> {
    VkMemoryRequirements2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryRequirements2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(memoryRequirements)>("memoryRequirements");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSparseImageMemoryRequirements2, VkSparseImageMemoryRequirements2);
struct VkSparseImageMemoryRequirements2Annotation
: public ManagedStructureAnnotation<VkSparseImageMemoryRequirements2,true,true> {
    VkSparseImageMemoryRequirements2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseImageMemoryRequirements2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(memoryRequirements)>("memoryRequirements");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceFeatures2, VkPhysicalDeviceFeatures2);
struct VkPhysicalDeviceFeatures2Annotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFeatures2,true,true> {
    VkPhysicalDeviceFeatures2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFeatures2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(features)>("features");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceProperties2, VkPhysicalDeviceProperties2);
struct VkPhysicalDeviceProperties2Annotation
: public ManagedStructureAnnotation<VkPhysicalDeviceProperties2,true,true> {
    VkPhysicalDeviceProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(properties)>("properties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkFormatProperties2, VkFormatProperties2);
struct VkFormatProperties2Annotation
: public ManagedStructureAnnotation<VkFormatProperties2,true,true> {
    VkFormatProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFormatProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(formatProperties)>("formatProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageFormatProperties2, VkImageFormatProperties2);
struct VkImageFormatProperties2Annotation
: public ManagedStructureAnnotation<VkImageFormatProperties2,true,true> {
    VkImageFormatProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageFormatProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(imageFormatProperties)>("imageFormatProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceImageFormatInfo2, VkPhysicalDeviceImageFormatInfo2);
struct VkPhysicalDeviceImageFormatInfo2Annotation
: public ManagedStructureAnnotation<VkPhysicalDeviceImageFormatInfo2,true,true> {
    VkPhysicalDeviceImageFormatInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceImageFormatInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type");
        addField<DAS_BIND_MANAGED_FIELD(tiling)>("tiling");
        addField<DAS_BIND_MANAGED_FIELD(usage)>("usage");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkQueueFamilyProperties2, VkQueueFamilyProperties2);
struct VkQueueFamilyProperties2Annotation
: public ManagedStructureAnnotation<VkQueueFamilyProperties2,true,true> {
    VkQueueFamilyProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkQueueFamilyProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyProperties)>("queueFamilyProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMemoryProperties2, VkPhysicalDeviceMemoryProperties2);
struct VkPhysicalDeviceMemoryProperties2Annotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMemoryProperties2,true,true> {
    VkPhysicalDeviceMemoryProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMemoryProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(memoryProperties)>("memoryProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSparseImageFormatProperties2, VkSparseImageFormatProperties2);
struct VkSparseImageFormatProperties2Annotation
: public ManagedStructureAnnotation<VkSparseImageFormatProperties2,true,true> {
    VkSparseImageFormatProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseImageFormatProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(properties)>("properties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSparseImageFormatInfo2, VkPhysicalDeviceSparseImageFormatInfo2);
struct VkPhysicalDeviceSparseImageFormatInfo2Annotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSparseImageFormatInfo2,true,true> {
    VkPhysicalDeviceSparseImageFormatInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSparseImageFormatInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type");
        addField<DAS_BIND_MANAGED_FIELD(samples)>("samples");
        addField<DAS_BIND_MANAGED_FIELD(usage)>("usage");
        addField<DAS_BIND_MANAGED_FIELD(tiling)>("tiling");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevicePointClippingProperties, VkPhysicalDevicePointClippingProperties);
struct VkPhysicalDevicePointClippingPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePointClippingProperties,true,true> {
    VkPhysicalDevicePointClippingPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePointClippingProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pointClippingBehavior)>("pointClippingBehavior");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkInputAttachmentAspectReference, VkInputAttachmentAspectReference);
struct VkInputAttachmentAspectReferenceAnnotation
: public ManagedStructureAnnotation<VkInputAttachmentAspectReference,true,true> {
    VkInputAttachmentAspectReferenceAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkInputAttachmentAspectReference", ml) {
        addField<DAS_BIND_MANAGED_FIELD(subpass)>("subpass");
        addField<DAS_BIND_MANAGED_FIELD(inputAttachmentIndex)>("inputAttachmentIndex");
        addField<DAS_BIND_MANAGED_FIELD(aspectMask)>("aspectMask");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRenderPassInputAttachmentAspectCreateInfo, VkRenderPassInputAttachmentAspectCreateInfo);
struct VkRenderPassInputAttachmentAspectCreateInfoAnnotation
: public ManagedStructureAnnotation<VkRenderPassInputAttachmentAspectCreateInfo,true,true> {
    VkRenderPassInputAttachmentAspectCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassInputAttachmentAspectCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(aspectReferenceCount)>("aspectReferenceCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageViewUsageCreateInfo, VkImageViewUsageCreateInfo);
struct VkImageViewUsageCreateInfoAnnotation
: public ManagedStructureAnnotation<VkImageViewUsageCreateInfo,true,true> {
    VkImageViewUsageCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageViewUsageCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(usage)>("usage");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineTessellationDomainOriginStateCreateInfo, VkPipelineTessellationDomainOriginStateCreateInfo);
struct VkPipelineTessellationDomainOriginStateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkPipelineTessellationDomainOriginStateCreateInfo,true,true> {
    VkPipelineTessellationDomainOriginStateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineTessellationDomainOriginStateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(domainOrigin)>("domainOrigin");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRenderPassMultiviewCreateInfo, VkRenderPassMultiviewCreateInfo);
struct VkRenderPassMultiviewCreateInfoAnnotation
: public ManagedStructureAnnotation<VkRenderPassMultiviewCreateInfo,true,true> {
    VkRenderPassMultiviewCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassMultiviewCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(subpassCount)>("subpassCount");
        addField<DAS_BIND_MANAGED_FIELD(dependencyCount)>("dependencyCount");
        addField<DAS_BIND_MANAGED_FIELD(correlationMaskCount)>("correlationMaskCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMultiviewFeatures, VkPhysicalDeviceMultiviewFeatures);
struct VkPhysicalDeviceMultiviewFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMultiviewFeatures,true,true> {
    VkPhysicalDeviceMultiviewFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMultiviewFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(multiview)>("multiview");
        addField<DAS_BIND_MANAGED_FIELD(multiviewGeometryShader)>("multiviewGeometryShader");
        addField<DAS_BIND_MANAGED_FIELD(multiviewTessellationShader)>("multiviewTessellationShader");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMultiviewProperties, VkPhysicalDeviceMultiviewProperties);
struct VkPhysicalDeviceMultiviewPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMultiviewProperties,true,true> {
    VkPhysicalDeviceMultiviewPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMultiviewProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxMultiviewViewCount)>("maxMultiviewViewCount");
        addField<DAS_BIND_MANAGED_FIELD(maxMultiviewInstanceIndex)>("maxMultiviewInstanceIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceVariablePointersFeatures, VkPhysicalDeviceVariablePointersFeatures);
struct VkPhysicalDeviceVariablePointersFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceVariablePointersFeatures,true,true> {
    VkPhysicalDeviceVariablePointersFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceVariablePointersFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(variablePointersStorageBuffer)>("variablePointersStorageBuffer");
        addField<DAS_BIND_MANAGED_FIELD(variablePointers)>("variablePointers");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceProtectedMemoryFeatures, VkPhysicalDeviceProtectedMemoryFeatures);
struct VkPhysicalDeviceProtectedMemoryFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceProtectedMemoryFeatures,true,true> {
    VkPhysicalDeviceProtectedMemoryFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceProtectedMemoryFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(protectedMemory)>("protectedMemory");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceProtectedMemoryProperties, VkPhysicalDeviceProtectedMemoryProperties);
struct VkPhysicalDeviceProtectedMemoryPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceProtectedMemoryProperties,true,true> {
    VkPhysicalDeviceProtectedMemoryPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceProtectedMemoryProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(protectedNoFault)>("protectedNoFault");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceQueueInfo2, VkDeviceQueueInfo2);
struct VkDeviceQueueInfo2Annotation
: public ManagedStructureAnnotation<VkDeviceQueueInfo2,true,true> {
    VkDeviceQueueInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceQueueInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndex)>("queueFamilyIndex");
        addField<DAS_BIND_MANAGED_FIELD(queueIndex)>("queueIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkProtectedSubmitInfo, VkProtectedSubmitInfo);
struct VkProtectedSubmitInfoAnnotation
: public ManagedStructureAnnotation<VkProtectedSubmitInfo,true,true> {
    VkProtectedSubmitInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkProtectedSubmitInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(protectedSubmit)>("protectedSubmit");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSamplerYcbcrConversionCreateInfo, VkSamplerYcbcrConversionCreateInfo);
struct VkSamplerYcbcrConversionCreateInfoAnnotation
: public ManagedStructureAnnotation<VkSamplerYcbcrConversionCreateInfo,true,true> {
    VkSamplerYcbcrConversionCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSamplerYcbcrConversionCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(ycbcrModel)>("ycbcrModel");
        addField<DAS_BIND_MANAGED_FIELD(ycbcrRange)>("ycbcrRange");
        addField<DAS_BIND_MANAGED_FIELD(components)>("components");
        addField<DAS_BIND_MANAGED_FIELD(xChromaOffset)>("xChromaOffset");
        addField<DAS_BIND_MANAGED_FIELD(yChromaOffset)>("yChromaOffset");
        addField<DAS_BIND_MANAGED_FIELD(chromaFilter)>("chromaFilter");
        addField<DAS_BIND_MANAGED_FIELD(forceExplicitReconstruction)>("forceExplicitReconstruction");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSamplerYcbcrConversionInfo, VkSamplerYcbcrConversionInfo);
struct VkSamplerYcbcrConversionInfoAnnotation
: public ManagedStructureAnnotation<VkSamplerYcbcrConversionInfo,true,true> {
    VkSamplerYcbcrConversionInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSamplerYcbcrConversionInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindImagePlaneMemoryInfo, VkBindImagePlaneMemoryInfo);
struct VkBindImagePlaneMemoryInfoAnnotation
: public ManagedStructureAnnotation<VkBindImagePlaneMemoryInfo,true,true> {
    VkBindImagePlaneMemoryInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindImagePlaneMemoryInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(planeAspect)>("planeAspect");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImagePlaneMemoryRequirementsInfo, VkImagePlaneMemoryRequirementsInfo);
struct VkImagePlaneMemoryRequirementsInfoAnnotation
: public ManagedStructureAnnotation<VkImagePlaneMemoryRequirementsInfo,true,true> {
    VkImagePlaneMemoryRequirementsInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImagePlaneMemoryRequirementsInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(planeAspect)>("planeAspect");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSamplerYcbcrConversionFeatures, VkPhysicalDeviceSamplerYcbcrConversionFeatures);
struct VkPhysicalDeviceSamplerYcbcrConversionFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSamplerYcbcrConversionFeatures,true,true> {
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSamplerYcbcrConversionFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(samplerYcbcrConversion)>("samplerYcbcrConversion");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSamplerYcbcrConversionImageFormatProperties, VkSamplerYcbcrConversionImageFormatProperties);
struct VkSamplerYcbcrConversionImageFormatPropertiesAnnotation
: public ManagedStructureAnnotation<VkSamplerYcbcrConversionImageFormatProperties,true,true> {
    VkSamplerYcbcrConversionImageFormatPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSamplerYcbcrConversionImageFormatProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(combinedImageSamplerDescriptorCount)>("combinedImageSamplerDescriptorCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorUpdateTemplateEntry, VkDescriptorUpdateTemplateEntry);
struct VkDescriptorUpdateTemplateEntryAnnotation
: public ManagedStructureAnnotation<VkDescriptorUpdateTemplateEntry,true,true> {
    VkDescriptorUpdateTemplateEntryAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorUpdateTemplateEntry", ml) {
        addField<DAS_BIND_MANAGED_FIELD(dstBinding)>("dstBinding");
        addField<DAS_BIND_MANAGED_FIELD(dstArrayElement)>("dstArrayElement");
        addField<DAS_BIND_MANAGED_FIELD(descriptorCount)>("descriptorCount");
        addField<DAS_BIND_MANAGED_FIELD(descriptorType)>("descriptorType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorUpdateTemplateCreateInfo, VkDescriptorUpdateTemplateCreateInfo);
struct VkDescriptorUpdateTemplateCreateInfoAnnotation
: public ManagedStructureAnnotation<VkDescriptorUpdateTemplateCreateInfo,true,true> {
    VkDescriptorUpdateTemplateCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorUpdateTemplateCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(descriptorUpdateEntryCount)>("descriptorUpdateEntryCount");
        addField<DAS_BIND_MANAGED_FIELD(templateType)>("templateType");
        addField<DAS_BIND_MANAGED_FIELD(pipelineBindPoint)>("pipelineBindPoint");
        addField<DAS_BIND_MANAGED_FIELD(set)>("set");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExternalMemoryProperties, VkExternalMemoryProperties);
struct VkExternalMemoryPropertiesAnnotation
: public ManagedStructureAnnotation<VkExternalMemoryProperties,true,true> {
    VkExternalMemoryPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExternalMemoryProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(externalMemoryFeatures)>("externalMemoryFeatures");
        addField<DAS_BIND_MANAGED_FIELD(exportFromImportedHandleTypes)>("exportFromImportedHandleTypes");
        addField<DAS_BIND_MANAGED_FIELD(compatibleHandleTypes)>("compatibleHandleTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceExternalImageFormatInfo, VkPhysicalDeviceExternalImageFormatInfo);
struct VkPhysicalDeviceExternalImageFormatInfoAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceExternalImageFormatInfo,true,true> {
    VkPhysicalDeviceExternalImageFormatInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceExternalImageFormatInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExternalImageFormatProperties, VkExternalImageFormatProperties);
struct VkExternalImageFormatPropertiesAnnotation
: public ManagedStructureAnnotation<VkExternalImageFormatProperties,true,true> {
    VkExternalImageFormatPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExternalImageFormatProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(externalMemoryProperties)>("externalMemoryProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceExternalBufferInfo, VkPhysicalDeviceExternalBufferInfo);
struct VkPhysicalDeviceExternalBufferInfoAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceExternalBufferInfo,true,true> {
    VkPhysicalDeviceExternalBufferInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceExternalBufferInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(usage)>("usage");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExternalBufferProperties, VkExternalBufferProperties);
struct VkExternalBufferPropertiesAnnotation
: public ManagedStructureAnnotation<VkExternalBufferProperties,true,true> {
    VkExternalBufferPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExternalBufferProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(externalMemoryProperties)>("externalMemoryProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceIDProperties, VkPhysicalDeviceIDProperties);
struct VkPhysicalDeviceIDPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceIDProperties,true,true> {
    VkPhysicalDeviceIDPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceIDProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceNodeMask)>("deviceNodeMask");
        addField<DAS_BIND_MANAGED_FIELD(deviceLUIDValid)>("deviceLUIDValid");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExternalMemoryImageCreateInfo, VkExternalMemoryImageCreateInfo);
struct VkExternalMemoryImageCreateInfoAnnotation
: public ManagedStructureAnnotation<VkExternalMemoryImageCreateInfo,true,true> {
    VkExternalMemoryImageCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExternalMemoryImageCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleTypes)>("handleTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExternalMemoryBufferCreateInfo, VkExternalMemoryBufferCreateInfo);
struct VkExternalMemoryBufferCreateInfoAnnotation
: public ManagedStructureAnnotation<VkExternalMemoryBufferCreateInfo,true,true> {
    VkExternalMemoryBufferCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExternalMemoryBufferCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleTypes)>("handleTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExportMemoryAllocateInfo, VkExportMemoryAllocateInfo);
struct VkExportMemoryAllocateInfoAnnotation
: public ManagedStructureAnnotation<VkExportMemoryAllocateInfo,true,true> {
    VkExportMemoryAllocateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExportMemoryAllocateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleTypes)>("handleTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceExternalFenceInfo, VkPhysicalDeviceExternalFenceInfo);
struct VkPhysicalDeviceExternalFenceInfoAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceExternalFenceInfo,true,true> {
    VkPhysicalDeviceExternalFenceInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceExternalFenceInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExternalFenceProperties, VkExternalFenceProperties);
struct VkExternalFencePropertiesAnnotation
: public ManagedStructureAnnotation<VkExternalFenceProperties,true,true> {
    VkExternalFencePropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExternalFenceProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(exportFromImportedHandleTypes)>("exportFromImportedHandleTypes");
        addField<DAS_BIND_MANAGED_FIELD(compatibleHandleTypes)>("compatibleHandleTypes");
        addField<DAS_BIND_MANAGED_FIELD(externalFenceFeatures)>("externalFenceFeatures");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExportFenceCreateInfo, VkExportFenceCreateInfo);
struct VkExportFenceCreateInfoAnnotation
: public ManagedStructureAnnotation<VkExportFenceCreateInfo,true,true> {
    VkExportFenceCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExportFenceCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleTypes)>("handleTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExportSemaphoreCreateInfo, VkExportSemaphoreCreateInfo);
struct VkExportSemaphoreCreateInfoAnnotation
: public ManagedStructureAnnotation<VkExportSemaphoreCreateInfo,true,true> {
    VkExportSemaphoreCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExportSemaphoreCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleTypes)>("handleTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceExternalSemaphoreInfo, VkPhysicalDeviceExternalSemaphoreInfo);
struct VkPhysicalDeviceExternalSemaphoreInfoAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceExternalSemaphoreInfo,true,true> {
    VkPhysicalDeviceExternalSemaphoreInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceExternalSemaphoreInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExternalSemaphoreProperties, VkExternalSemaphoreProperties);
struct VkExternalSemaphorePropertiesAnnotation
: public ManagedStructureAnnotation<VkExternalSemaphoreProperties,true,true> {
    VkExternalSemaphorePropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExternalSemaphoreProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(exportFromImportedHandleTypes)>("exportFromImportedHandleTypes");
        addField<DAS_BIND_MANAGED_FIELD(compatibleHandleTypes)>("compatibleHandleTypes");
        addField<DAS_BIND_MANAGED_FIELD(externalSemaphoreFeatures)>("externalSemaphoreFeatures");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMaintenance3Properties, VkPhysicalDeviceMaintenance3Properties);
struct VkPhysicalDeviceMaintenance3PropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMaintenance3Properties,true,true> {
    VkPhysicalDeviceMaintenance3PropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMaintenance3Properties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxPerSetDescriptors)>("maxPerSetDescriptors");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorSetLayoutSupport, VkDescriptorSetLayoutSupport);
struct VkDescriptorSetLayoutSupportAnnotation
: public ManagedStructureAnnotation<VkDescriptorSetLayoutSupport,true,true> {
    VkDescriptorSetLayoutSupportAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorSetLayoutSupport", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(supported)>("supported");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderDrawParametersFeatures, VkPhysicalDeviceShaderDrawParametersFeatures);
struct VkPhysicalDeviceShaderDrawParametersFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderDrawParametersFeatures,true,true> {
    VkPhysicalDeviceShaderDrawParametersFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderDrawParametersFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderDrawParameters)>("shaderDrawParameters");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceVulkan11Features, VkPhysicalDeviceVulkan11Features);
struct VkPhysicalDeviceVulkan11FeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceVulkan11Features,true,true> {
    VkPhysicalDeviceVulkan11FeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceVulkan11Features", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(storageBuffer16BitAccess)>("storageBuffer16BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(uniformAndStorageBuffer16BitAccess)>("uniformAndStorageBuffer16BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(storagePushConstant16)>("storagePushConstant16");
        addField<DAS_BIND_MANAGED_FIELD(storageInputOutput16)>("storageInputOutput16");
        addField<DAS_BIND_MANAGED_FIELD(multiview)>("multiview");
        addField<DAS_BIND_MANAGED_FIELD(multiviewGeometryShader)>("multiviewGeometryShader");
        addField<DAS_BIND_MANAGED_FIELD(multiviewTessellationShader)>("multiviewTessellationShader");
        addField<DAS_BIND_MANAGED_FIELD(variablePointersStorageBuffer)>("variablePointersStorageBuffer");
        addField<DAS_BIND_MANAGED_FIELD(variablePointers)>("variablePointers");
        addField<DAS_BIND_MANAGED_FIELD(protectedMemory)>("protectedMemory");
        addField<DAS_BIND_MANAGED_FIELD(samplerYcbcrConversion)>("samplerYcbcrConversion");
        addField<DAS_BIND_MANAGED_FIELD(shaderDrawParameters)>("shaderDrawParameters");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceVulkan11Properties, VkPhysicalDeviceVulkan11Properties);
struct VkPhysicalDeviceVulkan11PropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceVulkan11Properties,true,true> {
    VkPhysicalDeviceVulkan11PropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceVulkan11Properties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceNodeMask)>("deviceNodeMask");
        addField<DAS_BIND_MANAGED_FIELD(deviceLUIDValid)>("deviceLUIDValid");
        addField<DAS_BIND_MANAGED_FIELD(subgroupSize)>("subgroupSize");
        addField<DAS_BIND_MANAGED_FIELD(subgroupSupportedStages)>("subgroupSupportedStages");
        addField<DAS_BIND_MANAGED_FIELD(subgroupSupportedOperations)>("subgroupSupportedOperations");
        addField<DAS_BIND_MANAGED_FIELD(subgroupQuadOperationsInAllStages)>("subgroupQuadOperationsInAllStages");
        addField<DAS_BIND_MANAGED_FIELD(pointClippingBehavior)>("pointClippingBehavior");
        addField<DAS_BIND_MANAGED_FIELD(maxMultiviewViewCount)>("maxMultiviewViewCount");
        addField<DAS_BIND_MANAGED_FIELD(maxMultiviewInstanceIndex)>("maxMultiviewInstanceIndex");
        addField<DAS_BIND_MANAGED_FIELD(protectedNoFault)>("protectedNoFault");
        addField<DAS_BIND_MANAGED_FIELD(maxPerSetDescriptors)>("maxPerSetDescriptors");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceVulkan12Features, VkPhysicalDeviceVulkan12Features);
struct VkPhysicalDeviceVulkan12FeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceVulkan12Features,true,true> {
    VkPhysicalDeviceVulkan12FeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceVulkan12Features", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(samplerMirrorClampToEdge)>("samplerMirrorClampToEdge");
        addField<DAS_BIND_MANAGED_FIELD(drawIndirectCount)>("drawIndirectCount");
        addField<DAS_BIND_MANAGED_FIELD(storageBuffer8BitAccess)>("storageBuffer8BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(uniformAndStorageBuffer8BitAccess)>("uniformAndStorageBuffer8BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(storagePushConstant8)>("storagePushConstant8");
        addField<DAS_BIND_MANAGED_FIELD(shaderBufferInt64Atomics)>("shaderBufferInt64Atomics");
        addField<DAS_BIND_MANAGED_FIELD(shaderSharedInt64Atomics)>("shaderSharedInt64Atomics");
        addField<DAS_BIND_MANAGED_FIELD(shaderFloat16)>("shaderFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderInt8)>("shaderInt8");
        addField<DAS_BIND_MANAGED_FIELD(descriptorIndexing)>("descriptorIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderInputAttachmentArrayDynamicIndexing)>("shaderInputAttachmentArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderUniformTexelBufferArrayDynamicIndexing)>("shaderUniformTexelBufferArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageTexelBufferArrayDynamicIndexing)>("shaderStorageTexelBufferArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderUniformBufferArrayNonUniformIndexing)>("shaderUniformBufferArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderSampledImageArrayNonUniformIndexing)>("shaderSampledImageArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageBufferArrayNonUniformIndexing)>("shaderStorageBufferArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageImageArrayNonUniformIndexing)>("shaderStorageImageArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderInputAttachmentArrayNonUniformIndexing)>("shaderInputAttachmentArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderUniformTexelBufferArrayNonUniformIndexing)>("shaderUniformTexelBufferArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageTexelBufferArrayNonUniformIndexing)>("shaderStorageTexelBufferArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingUniformBufferUpdateAfterBind)>("descriptorBindingUniformBufferUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingSampledImageUpdateAfterBind)>("descriptorBindingSampledImageUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingStorageImageUpdateAfterBind)>("descriptorBindingStorageImageUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingStorageBufferUpdateAfterBind)>("descriptorBindingStorageBufferUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingUniformTexelBufferUpdateAfterBind)>("descriptorBindingUniformTexelBufferUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingStorageTexelBufferUpdateAfterBind)>("descriptorBindingStorageTexelBufferUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingUpdateUnusedWhilePending)>("descriptorBindingUpdateUnusedWhilePending");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingPartiallyBound)>("descriptorBindingPartiallyBound");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingVariableDescriptorCount)>("descriptorBindingVariableDescriptorCount");
        addField<DAS_BIND_MANAGED_FIELD(runtimeDescriptorArray)>("runtimeDescriptorArray");
        addField<DAS_BIND_MANAGED_FIELD(samplerFilterMinmax)>("samplerFilterMinmax");
        addField<DAS_BIND_MANAGED_FIELD(scalarBlockLayout)>("scalarBlockLayout");
        addField<DAS_BIND_MANAGED_FIELD(imagelessFramebuffer)>("imagelessFramebuffer");
        addField<DAS_BIND_MANAGED_FIELD(uniformBufferStandardLayout)>("uniformBufferStandardLayout");
        addField<DAS_BIND_MANAGED_FIELD(shaderSubgroupExtendedTypes)>("shaderSubgroupExtendedTypes");
        addField<DAS_BIND_MANAGED_FIELD(separateDepthStencilLayouts)>("separateDepthStencilLayouts");
        addField<DAS_BIND_MANAGED_FIELD(hostQueryReset)>("hostQueryReset");
        addField<DAS_BIND_MANAGED_FIELD(timelineSemaphore)>("timelineSemaphore");
        addField<DAS_BIND_MANAGED_FIELD(bufferDeviceAddress)>("bufferDeviceAddress");
        addField<DAS_BIND_MANAGED_FIELD(bufferDeviceAddressCaptureReplay)>("bufferDeviceAddressCaptureReplay");
        addField<DAS_BIND_MANAGED_FIELD(bufferDeviceAddressMultiDevice)>("bufferDeviceAddressMultiDevice");
        addField<DAS_BIND_MANAGED_FIELD(vulkanMemoryModel)>("vulkanMemoryModel");
        addField<DAS_BIND_MANAGED_FIELD(vulkanMemoryModelDeviceScope)>("vulkanMemoryModelDeviceScope");
        addField<DAS_BIND_MANAGED_FIELD(vulkanMemoryModelAvailabilityVisibilityChains)>("vulkanMemoryModelAvailabilityVisibilityChains");
        addField<DAS_BIND_MANAGED_FIELD(shaderOutputViewportIndex)>("shaderOutputViewportIndex");
        addField<DAS_BIND_MANAGED_FIELD(shaderOutputLayer)>("shaderOutputLayer");
        addField<DAS_BIND_MANAGED_FIELD(subgroupBroadcastDynamicId)>("subgroupBroadcastDynamicId");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkConformanceVersion, VkConformanceVersion);
struct VkConformanceVersionAnnotation
: public ManagedStructureAnnotation<VkConformanceVersion,true,true> {
    VkConformanceVersionAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkConformanceVersion", ml) {
        addField<DAS_BIND_MANAGED_FIELD(major)>("major");
        addField<DAS_BIND_MANAGED_FIELD(minor)>("minor");
        addField<DAS_BIND_MANAGED_FIELD(subminor)>("subminor");
        addField<DAS_BIND_MANAGED_FIELD(patch)>("patch");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceVulkan12Properties, VkPhysicalDeviceVulkan12Properties);
struct VkPhysicalDeviceVulkan12PropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceVulkan12Properties,true,true> {
    VkPhysicalDeviceVulkan12PropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceVulkan12Properties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(driverID)>("driverID");
        addField<DAS_BIND_MANAGED_FIELD(conformanceVersion)>("conformanceVersion");
        addField<DAS_BIND_MANAGED_FIELD(denormBehaviorIndependence)>("denormBehaviorIndependence");
        addField<DAS_BIND_MANAGED_FIELD(roundingModeIndependence)>("roundingModeIndependence");
        addField<DAS_BIND_MANAGED_FIELD(shaderSignedZeroInfNanPreserveFloat16)>("shaderSignedZeroInfNanPreserveFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderSignedZeroInfNanPreserveFloat32)>("shaderSignedZeroInfNanPreserveFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderSignedZeroInfNanPreserveFloat64)>("shaderSignedZeroInfNanPreserveFloat64");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormPreserveFloat16)>("shaderDenormPreserveFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormPreserveFloat32)>("shaderDenormPreserveFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormPreserveFloat64)>("shaderDenormPreserveFloat64");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormFlushToZeroFloat16)>("shaderDenormFlushToZeroFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormFlushToZeroFloat32)>("shaderDenormFlushToZeroFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormFlushToZeroFloat64)>("shaderDenormFlushToZeroFloat64");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTEFloat16)>("shaderRoundingModeRTEFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTEFloat32)>("shaderRoundingModeRTEFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTEFloat64)>("shaderRoundingModeRTEFloat64");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTZFloat16)>("shaderRoundingModeRTZFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTZFloat32)>("shaderRoundingModeRTZFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTZFloat64)>("shaderRoundingModeRTZFloat64");
        addField<DAS_BIND_MANAGED_FIELD(maxUpdateAfterBindDescriptorsInAllPools)>("maxUpdateAfterBindDescriptorsInAllPools");
        addField<DAS_BIND_MANAGED_FIELD(shaderUniformBufferArrayNonUniformIndexingNative)>("shaderUniformBufferArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(shaderSampledImageArrayNonUniformIndexingNative)>("shaderSampledImageArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageBufferArrayNonUniformIndexingNative)>("shaderStorageBufferArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageImageArrayNonUniformIndexingNative)>("shaderStorageImageArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(shaderInputAttachmentArrayNonUniformIndexingNative)>("shaderInputAttachmentArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(robustBufferAccessUpdateAfterBind)>("robustBufferAccessUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(quadDivergentImplicitLod)>("quadDivergentImplicitLod");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindSamplers)>("maxPerStageDescriptorUpdateAfterBindSamplers");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindUniformBuffers)>("maxPerStageDescriptorUpdateAfterBindUniformBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindStorageBuffers)>("maxPerStageDescriptorUpdateAfterBindStorageBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindSampledImages)>("maxPerStageDescriptorUpdateAfterBindSampledImages");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindStorageImages)>("maxPerStageDescriptorUpdateAfterBindStorageImages");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindInputAttachments)>("maxPerStageDescriptorUpdateAfterBindInputAttachments");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageUpdateAfterBindResources)>("maxPerStageUpdateAfterBindResources");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindSamplers)>("maxDescriptorSetUpdateAfterBindSamplers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindUniformBuffers)>("maxDescriptorSetUpdateAfterBindUniformBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)>("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindStorageBuffers)>("maxDescriptorSetUpdateAfterBindStorageBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)>("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindSampledImages)>("maxDescriptorSetUpdateAfterBindSampledImages");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindStorageImages)>("maxDescriptorSetUpdateAfterBindStorageImages");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindInputAttachments)>("maxDescriptorSetUpdateAfterBindInputAttachments");
        addField<DAS_BIND_MANAGED_FIELD(supportedDepthResolveModes)>("supportedDepthResolveModes");
        addField<DAS_BIND_MANAGED_FIELD(supportedStencilResolveModes)>("supportedStencilResolveModes");
        addField<DAS_BIND_MANAGED_FIELD(independentResolveNone)>("independentResolveNone");
        addField<DAS_BIND_MANAGED_FIELD(independentResolve)>("independentResolve");
        addField<DAS_BIND_MANAGED_FIELD(filterMinmaxSingleComponentFormats)>("filterMinmaxSingleComponentFormats");
        addField<DAS_BIND_MANAGED_FIELD(filterMinmaxImageComponentMapping)>("filterMinmaxImageComponentMapping");
        addField<DAS_BIND_MANAGED_FIELD(framebufferIntegerColorSampleCounts)>("framebufferIntegerColorSampleCounts");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageFormatListCreateInfo, VkImageFormatListCreateInfo);
struct VkImageFormatListCreateInfoAnnotation
: public ManagedStructureAnnotation<VkImageFormatListCreateInfo,true,true> {
    VkImageFormatListCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageFormatListCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(viewFormatCount)>("viewFormatCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAttachmentDescription2, VkAttachmentDescription2);
struct VkAttachmentDescription2Annotation
: public ManagedStructureAnnotation<VkAttachmentDescription2,true,true> {
    VkAttachmentDescription2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAttachmentDescription2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(samples)>("samples");
        addField<DAS_BIND_MANAGED_FIELD(loadOp)>("loadOp");
        addField<DAS_BIND_MANAGED_FIELD(storeOp)>("storeOp");
        addField<DAS_BIND_MANAGED_FIELD(stencilLoadOp)>("stencilLoadOp");
        addField<DAS_BIND_MANAGED_FIELD(stencilStoreOp)>("stencilStoreOp");
        addField<DAS_BIND_MANAGED_FIELD(initialLayout)>("initialLayout");
        addField<DAS_BIND_MANAGED_FIELD(finalLayout)>("finalLayout");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAttachmentReference2, VkAttachmentReference2);
struct VkAttachmentReference2Annotation
: public ManagedStructureAnnotation<VkAttachmentReference2,true,true> {
    VkAttachmentReference2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAttachmentReference2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(attachment)>("attachment");
        addField<DAS_BIND_MANAGED_FIELD(layout)>("layout");
        addField<DAS_BIND_MANAGED_FIELD(aspectMask)>("aspectMask");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubpassDescription2, VkSubpassDescription2);
struct VkSubpassDescription2Annotation
: public ManagedStructureAnnotation<VkSubpassDescription2,true,true> {
    VkSubpassDescription2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubpassDescription2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(pipelineBindPoint)>("pipelineBindPoint");
        addField<DAS_BIND_MANAGED_FIELD(viewMask)>("viewMask");
        addField<DAS_BIND_MANAGED_FIELD(inputAttachmentCount)>("inputAttachmentCount");
        addField<DAS_BIND_MANAGED_FIELD(colorAttachmentCount)>("colorAttachmentCount");
        addField<DAS_BIND_MANAGED_FIELD(preserveAttachmentCount)>("preserveAttachmentCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubpassDependency2, VkSubpassDependency2);
struct VkSubpassDependency2Annotation
: public ManagedStructureAnnotation<VkSubpassDependency2,true,true> {
    VkSubpassDependency2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubpassDependency2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(srcSubpass)>("srcSubpass");
        addField<DAS_BIND_MANAGED_FIELD(dstSubpass)>("dstSubpass");
        addField<DAS_BIND_MANAGED_FIELD(srcStageMask)>("srcStageMask");
        addField<DAS_BIND_MANAGED_FIELD(dstStageMask)>("dstStageMask");
        addField<DAS_BIND_MANAGED_FIELD(srcAccessMask)>("srcAccessMask");
        addField<DAS_BIND_MANAGED_FIELD(dstAccessMask)>("dstAccessMask");
        addField<DAS_BIND_MANAGED_FIELD(dependencyFlags)>("dependencyFlags");
        addField<DAS_BIND_MANAGED_FIELD(viewOffset)>("viewOffset");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRenderPassCreateInfo2, VkRenderPassCreateInfo2);
struct VkRenderPassCreateInfo2Annotation
: public ManagedStructureAnnotation<VkRenderPassCreateInfo2,true,true> {
    VkRenderPassCreateInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassCreateInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(attachmentCount)>("attachmentCount");
        addField<DAS_BIND_MANAGED_FIELD(subpassCount)>("subpassCount");
        addField<DAS_BIND_MANAGED_FIELD(dependencyCount)>("dependencyCount");
        addField<DAS_BIND_MANAGED_FIELD(correlatedViewMaskCount)>("correlatedViewMaskCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubpassBeginInfo, VkSubpassBeginInfo);
struct VkSubpassBeginInfoAnnotation
: public ManagedStructureAnnotation<VkSubpassBeginInfo,true,true> {
    VkSubpassBeginInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubpassBeginInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(contents)>("contents");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubpassEndInfo, VkSubpassEndInfo);
struct VkSubpassEndInfoAnnotation
: public ManagedStructureAnnotation<VkSubpassEndInfo,true,true> {
    VkSubpassEndInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubpassEndInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevice8BitStorageFeatures, VkPhysicalDevice8BitStorageFeatures);
struct VkPhysicalDevice8BitStorageFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevice8BitStorageFeatures,true,true> {
    VkPhysicalDevice8BitStorageFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevice8BitStorageFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(storageBuffer8BitAccess)>("storageBuffer8BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(uniformAndStorageBuffer8BitAccess)>("uniformAndStorageBuffer8BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(storagePushConstant8)>("storagePushConstant8");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDriverProperties, VkPhysicalDeviceDriverProperties);
struct VkPhysicalDeviceDriverPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDriverProperties,true,true> {
    VkPhysicalDeviceDriverPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDriverProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(driverID)>("driverID");
        addField<DAS_BIND_MANAGED_FIELD(conformanceVersion)>("conformanceVersion");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderAtomicInt64Features, VkPhysicalDeviceShaderAtomicInt64Features);
struct VkPhysicalDeviceShaderAtomicInt64FeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderAtomicInt64Features,true,true> {
    VkPhysicalDeviceShaderAtomicInt64FeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderAtomicInt64Features", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderBufferInt64Atomics)>("shaderBufferInt64Atomics");
        addField<DAS_BIND_MANAGED_FIELD(shaderSharedInt64Atomics)>("shaderSharedInt64Atomics");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderFloat16Int8Features, VkPhysicalDeviceShaderFloat16Int8Features);
struct VkPhysicalDeviceShaderFloat16Int8FeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderFloat16Int8Features,true,true> {
    VkPhysicalDeviceShaderFloat16Int8FeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderFloat16Int8Features", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderFloat16)>("shaderFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderInt8)>("shaderInt8");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceFloatControlsProperties, VkPhysicalDeviceFloatControlsProperties);
struct VkPhysicalDeviceFloatControlsPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFloatControlsProperties,true,true> {
    VkPhysicalDeviceFloatControlsPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFloatControlsProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(denormBehaviorIndependence)>("denormBehaviorIndependence");
        addField<DAS_BIND_MANAGED_FIELD(roundingModeIndependence)>("roundingModeIndependence");
        addField<DAS_BIND_MANAGED_FIELD(shaderSignedZeroInfNanPreserveFloat16)>("shaderSignedZeroInfNanPreserveFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderSignedZeroInfNanPreserveFloat32)>("shaderSignedZeroInfNanPreserveFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderSignedZeroInfNanPreserveFloat64)>("shaderSignedZeroInfNanPreserveFloat64");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormPreserveFloat16)>("shaderDenormPreserveFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormPreserveFloat32)>("shaderDenormPreserveFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormPreserveFloat64)>("shaderDenormPreserveFloat64");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormFlushToZeroFloat16)>("shaderDenormFlushToZeroFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormFlushToZeroFloat32)>("shaderDenormFlushToZeroFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderDenormFlushToZeroFloat64)>("shaderDenormFlushToZeroFloat64");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTEFloat16)>("shaderRoundingModeRTEFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTEFloat32)>("shaderRoundingModeRTEFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTEFloat64)>("shaderRoundingModeRTEFloat64");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTZFloat16)>("shaderRoundingModeRTZFloat16");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTZFloat32)>("shaderRoundingModeRTZFloat32");
        addField<DAS_BIND_MANAGED_FIELD(shaderRoundingModeRTZFloat64)>("shaderRoundingModeRTZFloat64");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorSetLayoutBindingFlagsCreateInfo, VkDescriptorSetLayoutBindingFlagsCreateInfo);
struct VkDescriptorSetLayoutBindingFlagsCreateInfoAnnotation
: public ManagedStructureAnnotation<VkDescriptorSetLayoutBindingFlagsCreateInfo,true,true> {
    VkDescriptorSetLayoutBindingFlagsCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorSetLayoutBindingFlagsCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(bindingCount)>("bindingCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDescriptorIndexingFeatures, VkPhysicalDeviceDescriptorIndexingFeatures);
struct VkPhysicalDeviceDescriptorIndexingFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDescriptorIndexingFeatures,true,true> {
    VkPhysicalDeviceDescriptorIndexingFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDescriptorIndexingFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderInputAttachmentArrayDynamicIndexing)>("shaderInputAttachmentArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderUniformTexelBufferArrayDynamicIndexing)>("shaderUniformTexelBufferArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageTexelBufferArrayDynamicIndexing)>("shaderStorageTexelBufferArrayDynamicIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderUniformBufferArrayNonUniformIndexing)>("shaderUniformBufferArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderSampledImageArrayNonUniformIndexing)>("shaderSampledImageArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageBufferArrayNonUniformIndexing)>("shaderStorageBufferArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageImageArrayNonUniformIndexing)>("shaderStorageImageArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderInputAttachmentArrayNonUniformIndexing)>("shaderInputAttachmentArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderUniformTexelBufferArrayNonUniformIndexing)>("shaderUniformTexelBufferArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageTexelBufferArrayNonUniformIndexing)>("shaderStorageTexelBufferArrayNonUniformIndexing");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingUniformBufferUpdateAfterBind)>("descriptorBindingUniformBufferUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingSampledImageUpdateAfterBind)>("descriptorBindingSampledImageUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingStorageImageUpdateAfterBind)>("descriptorBindingStorageImageUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingStorageBufferUpdateAfterBind)>("descriptorBindingStorageBufferUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingUniformTexelBufferUpdateAfterBind)>("descriptorBindingUniformTexelBufferUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingStorageTexelBufferUpdateAfterBind)>("descriptorBindingStorageTexelBufferUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingUpdateUnusedWhilePending)>("descriptorBindingUpdateUnusedWhilePending");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingPartiallyBound)>("descriptorBindingPartiallyBound");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingVariableDescriptorCount)>("descriptorBindingVariableDescriptorCount");
        addField<DAS_BIND_MANAGED_FIELD(runtimeDescriptorArray)>("runtimeDescriptorArray");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDescriptorIndexingProperties, VkPhysicalDeviceDescriptorIndexingProperties);
struct VkPhysicalDeviceDescriptorIndexingPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDescriptorIndexingProperties,true,true> {
    VkPhysicalDeviceDescriptorIndexingPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDescriptorIndexingProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxUpdateAfterBindDescriptorsInAllPools)>("maxUpdateAfterBindDescriptorsInAllPools");
        addField<DAS_BIND_MANAGED_FIELD(shaderUniformBufferArrayNonUniformIndexingNative)>("shaderUniformBufferArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(shaderSampledImageArrayNonUniformIndexingNative)>("shaderSampledImageArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageBufferArrayNonUniformIndexingNative)>("shaderStorageBufferArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(shaderStorageImageArrayNonUniformIndexingNative)>("shaderStorageImageArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(shaderInputAttachmentArrayNonUniformIndexingNative)>("shaderInputAttachmentArrayNonUniformIndexingNative");
        addField<DAS_BIND_MANAGED_FIELD(robustBufferAccessUpdateAfterBind)>("robustBufferAccessUpdateAfterBind");
        addField<DAS_BIND_MANAGED_FIELD(quadDivergentImplicitLod)>("quadDivergentImplicitLod");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindSamplers)>("maxPerStageDescriptorUpdateAfterBindSamplers");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindUniformBuffers)>("maxPerStageDescriptorUpdateAfterBindUniformBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindStorageBuffers)>("maxPerStageDescriptorUpdateAfterBindStorageBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindSampledImages)>("maxPerStageDescriptorUpdateAfterBindSampledImages");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindStorageImages)>("maxPerStageDescriptorUpdateAfterBindStorageImages");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindInputAttachments)>("maxPerStageDescriptorUpdateAfterBindInputAttachments");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageUpdateAfterBindResources)>("maxPerStageUpdateAfterBindResources");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindSamplers)>("maxDescriptorSetUpdateAfterBindSamplers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindUniformBuffers)>("maxDescriptorSetUpdateAfterBindUniformBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)>("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindStorageBuffers)>("maxDescriptorSetUpdateAfterBindStorageBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)>("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindSampledImages)>("maxDescriptorSetUpdateAfterBindSampledImages");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindStorageImages)>("maxDescriptorSetUpdateAfterBindStorageImages");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindInputAttachments)>("maxDescriptorSetUpdateAfterBindInputAttachments");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorSetVariableDescriptorCountAllocateInfo, VkDescriptorSetVariableDescriptorCountAllocateInfo);
struct VkDescriptorSetVariableDescriptorCountAllocateInfoAnnotation
: public ManagedStructureAnnotation<VkDescriptorSetVariableDescriptorCountAllocateInfo,true,true> {
    VkDescriptorSetVariableDescriptorCountAllocateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorSetVariableDescriptorCountAllocateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(descriptorSetCount)>("descriptorSetCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorSetVariableDescriptorCountLayoutSupport, VkDescriptorSetVariableDescriptorCountLayoutSupport);
struct VkDescriptorSetVariableDescriptorCountLayoutSupportAnnotation
: public ManagedStructureAnnotation<VkDescriptorSetVariableDescriptorCountLayoutSupport,true,true> {
    VkDescriptorSetVariableDescriptorCountLayoutSupportAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorSetVariableDescriptorCountLayoutSupport", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxVariableDescriptorCount)>("maxVariableDescriptorCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubpassDescriptionDepthStencilResolve, VkSubpassDescriptionDepthStencilResolve);
struct VkSubpassDescriptionDepthStencilResolveAnnotation
: public ManagedStructureAnnotation<VkSubpassDescriptionDepthStencilResolve,true,true> {
    VkSubpassDescriptionDepthStencilResolveAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubpassDescriptionDepthStencilResolve", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(depthResolveMode)>("depthResolveMode");
        addField<DAS_BIND_MANAGED_FIELD(stencilResolveMode)>("stencilResolveMode");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDepthStencilResolveProperties, VkPhysicalDeviceDepthStencilResolveProperties);
struct VkPhysicalDeviceDepthStencilResolvePropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDepthStencilResolveProperties,true,true> {
    VkPhysicalDeviceDepthStencilResolvePropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDepthStencilResolveProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(supportedDepthResolveModes)>("supportedDepthResolveModes");
        addField<DAS_BIND_MANAGED_FIELD(supportedStencilResolveModes)>("supportedStencilResolveModes");
        addField<DAS_BIND_MANAGED_FIELD(independentResolveNone)>("independentResolveNone");
        addField<DAS_BIND_MANAGED_FIELD(independentResolve)>("independentResolve");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceScalarBlockLayoutFeatures, VkPhysicalDeviceScalarBlockLayoutFeatures);
struct VkPhysicalDeviceScalarBlockLayoutFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceScalarBlockLayoutFeatures,true,true> {
    VkPhysicalDeviceScalarBlockLayoutFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceScalarBlockLayoutFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(scalarBlockLayout)>("scalarBlockLayout");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageStencilUsageCreateInfo, VkImageStencilUsageCreateInfo);
struct VkImageStencilUsageCreateInfoAnnotation
: public ManagedStructureAnnotation<VkImageStencilUsageCreateInfo,true,true> {
    VkImageStencilUsageCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageStencilUsageCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(stencilUsage)>("stencilUsage");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSamplerReductionModeCreateInfo, VkSamplerReductionModeCreateInfo);
struct VkSamplerReductionModeCreateInfoAnnotation
: public ManagedStructureAnnotation<VkSamplerReductionModeCreateInfo,true,true> {
    VkSamplerReductionModeCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSamplerReductionModeCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(reductionMode)>("reductionMode");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSamplerFilterMinmaxProperties, VkPhysicalDeviceSamplerFilterMinmaxProperties);
struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSamplerFilterMinmaxProperties,true,true> {
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSamplerFilterMinmaxProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(filterMinmaxSingleComponentFormats)>("filterMinmaxSingleComponentFormats");
        addField<DAS_BIND_MANAGED_FIELD(filterMinmaxImageComponentMapping)>("filterMinmaxImageComponentMapping");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceVulkanMemoryModelFeatures, VkPhysicalDeviceVulkanMemoryModelFeatures);
struct VkPhysicalDeviceVulkanMemoryModelFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceVulkanMemoryModelFeatures,true,true> {
    VkPhysicalDeviceVulkanMemoryModelFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceVulkanMemoryModelFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(vulkanMemoryModel)>("vulkanMemoryModel");
        addField<DAS_BIND_MANAGED_FIELD(vulkanMemoryModelDeviceScope)>("vulkanMemoryModelDeviceScope");
        addField<DAS_BIND_MANAGED_FIELD(vulkanMemoryModelAvailabilityVisibilityChains)>("vulkanMemoryModelAvailabilityVisibilityChains");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceImagelessFramebufferFeatures, VkPhysicalDeviceImagelessFramebufferFeatures);
struct VkPhysicalDeviceImagelessFramebufferFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceImagelessFramebufferFeatures,true,true> {
    VkPhysicalDeviceImagelessFramebufferFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceImagelessFramebufferFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(imagelessFramebuffer)>("imagelessFramebuffer");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkFramebufferAttachmentImageInfo, VkFramebufferAttachmentImageInfo);
struct VkFramebufferAttachmentImageInfoAnnotation
: public ManagedStructureAnnotation<VkFramebufferAttachmentImageInfo,true,true> {
    VkFramebufferAttachmentImageInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFramebufferAttachmentImageInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(usage)>("usage");
        addField<DAS_BIND_MANAGED_FIELD(width)>("width");
        addField<DAS_BIND_MANAGED_FIELD(height)>("height");
        addField<DAS_BIND_MANAGED_FIELD(layerCount)>("layerCount");
        addField<DAS_BIND_MANAGED_FIELD(viewFormatCount)>("viewFormatCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkFramebufferAttachmentsCreateInfo, VkFramebufferAttachmentsCreateInfo);
struct VkFramebufferAttachmentsCreateInfoAnnotation
: public ManagedStructureAnnotation<VkFramebufferAttachmentsCreateInfo,true,true> {
    VkFramebufferAttachmentsCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFramebufferAttachmentsCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(attachmentImageInfoCount)>("attachmentImageInfoCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRenderPassAttachmentBeginInfo, VkRenderPassAttachmentBeginInfo);
struct VkRenderPassAttachmentBeginInfoAnnotation
: public ManagedStructureAnnotation<VkRenderPassAttachmentBeginInfo,true,true> {
    VkRenderPassAttachmentBeginInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassAttachmentBeginInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(attachmentCount)>("attachmentCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, VkPhysicalDeviceUniformBufferStandardLayoutFeatures);
struct VkPhysicalDeviceUniformBufferStandardLayoutFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceUniformBufferStandardLayoutFeatures,true,true> {
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceUniformBufferStandardLayoutFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(uniformBufferStandardLayout)>("uniformBufferStandardLayout");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures);
struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures,true,true> {
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderSubgroupExtendedTypes)>("shaderSubgroupExtendedTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures);
struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures,true,true> {
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(separateDepthStencilLayouts)>("separateDepthStencilLayouts");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAttachmentReferenceStencilLayout, VkAttachmentReferenceStencilLayout);
struct VkAttachmentReferenceStencilLayoutAnnotation
: public ManagedStructureAnnotation<VkAttachmentReferenceStencilLayout,true,true> {
    VkAttachmentReferenceStencilLayoutAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAttachmentReferenceStencilLayout", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(stencilLayout)>("stencilLayout");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAttachmentDescriptionStencilLayout, VkAttachmentDescriptionStencilLayout);
struct VkAttachmentDescriptionStencilLayoutAnnotation
: public ManagedStructureAnnotation<VkAttachmentDescriptionStencilLayout,true,true> {
    VkAttachmentDescriptionStencilLayoutAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAttachmentDescriptionStencilLayout", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(stencilInitialLayout)>("stencilInitialLayout");
        addField<DAS_BIND_MANAGED_FIELD(stencilFinalLayout)>("stencilFinalLayout");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceHostQueryResetFeatures, VkPhysicalDeviceHostQueryResetFeatures);
struct VkPhysicalDeviceHostQueryResetFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceHostQueryResetFeatures,true,true> {
    VkPhysicalDeviceHostQueryResetFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceHostQueryResetFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(hostQueryReset)>("hostQueryReset");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceTimelineSemaphoreFeatures, VkPhysicalDeviceTimelineSemaphoreFeatures);
struct VkPhysicalDeviceTimelineSemaphoreFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceTimelineSemaphoreFeatures,true,true> {
    VkPhysicalDeviceTimelineSemaphoreFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceTimelineSemaphoreFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(timelineSemaphore)>("timelineSemaphore");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceTimelineSemaphoreProperties, VkPhysicalDeviceTimelineSemaphoreProperties);
struct VkPhysicalDeviceTimelineSemaphorePropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceTimelineSemaphoreProperties,true,true> {
    VkPhysicalDeviceTimelineSemaphorePropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceTimelineSemaphoreProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSemaphoreTypeCreateInfo, VkSemaphoreTypeCreateInfo);
struct VkSemaphoreTypeCreateInfoAnnotation
: public ManagedStructureAnnotation<VkSemaphoreTypeCreateInfo,true,true> {
    VkSemaphoreTypeCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSemaphoreTypeCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(semaphoreType)>("semaphoreType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkTimelineSemaphoreSubmitInfo, VkTimelineSemaphoreSubmitInfo);
struct VkTimelineSemaphoreSubmitInfoAnnotation
: public ManagedStructureAnnotation<VkTimelineSemaphoreSubmitInfo,true,true> {
    VkTimelineSemaphoreSubmitInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkTimelineSemaphoreSubmitInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(waitSemaphoreValueCount)>("waitSemaphoreValueCount");
        addField<DAS_BIND_MANAGED_FIELD(signalSemaphoreValueCount)>("signalSemaphoreValueCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSemaphoreWaitInfo, VkSemaphoreWaitInfo);
struct VkSemaphoreWaitInfoAnnotation
: public ManagedStructureAnnotation<VkSemaphoreWaitInfo,true,true> {
    VkSemaphoreWaitInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSemaphoreWaitInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(semaphoreCount)>("semaphoreCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSemaphoreSignalInfo, VkSemaphoreSignalInfo);
struct VkSemaphoreSignalInfoAnnotation
: public ManagedStructureAnnotation<VkSemaphoreSignalInfo,true,true> {
    VkSemaphoreSignalInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSemaphoreSignalInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceBufferDeviceAddressFeatures, VkPhysicalDeviceBufferDeviceAddressFeatures);
struct VkPhysicalDeviceBufferDeviceAddressFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceBufferDeviceAddressFeatures,true,true> {
    VkPhysicalDeviceBufferDeviceAddressFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceBufferDeviceAddressFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(bufferDeviceAddress)>("bufferDeviceAddress");
        addField<DAS_BIND_MANAGED_FIELD(bufferDeviceAddressCaptureReplay)>("bufferDeviceAddressCaptureReplay");
        addField<DAS_BIND_MANAGED_FIELD(bufferDeviceAddressMultiDevice)>("bufferDeviceAddressMultiDevice");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBufferDeviceAddressInfo, VkBufferDeviceAddressInfo);
struct VkBufferDeviceAddressInfoAnnotation
: public ManagedStructureAnnotation<VkBufferDeviceAddressInfo,true,true> {
    VkBufferDeviceAddressInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferDeviceAddressInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBufferOpaqueCaptureAddressCreateInfo, VkBufferOpaqueCaptureAddressCreateInfo);
struct VkBufferOpaqueCaptureAddressCreateInfoAnnotation
: public ManagedStructureAnnotation<VkBufferOpaqueCaptureAddressCreateInfo,true,true> {
    VkBufferOpaqueCaptureAddressCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferOpaqueCaptureAddressCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryOpaqueCaptureAddressAllocateInfo, VkMemoryOpaqueCaptureAddressAllocateInfo);
struct VkMemoryOpaqueCaptureAddressAllocateInfoAnnotation
: public ManagedStructureAnnotation<VkMemoryOpaqueCaptureAddressAllocateInfo,true,true> {
    VkMemoryOpaqueCaptureAddressAllocateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryOpaqueCaptureAddressAllocateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceMemoryOpaqueCaptureAddressInfo, VkDeviceMemoryOpaqueCaptureAddressInfo);
struct VkDeviceMemoryOpaqueCaptureAddressInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceMemoryOpaqueCaptureAddressInfo,true,true> {
    VkDeviceMemoryOpaqueCaptureAddressInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceMemoryOpaqueCaptureAddressInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSurfaceCapabilitiesKHR, VkSurfaceCapabilitiesKHR);
struct VkSurfaceCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceCapabilitiesKHR,true,true> {
    VkSurfaceCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(minImageCount)>("minImageCount");
        addField<DAS_BIND_MANAGED_FIELD(maxImageCount)>("maxImageCount");
        addField<DAS_BIND_MANAGED_FIELD(currentExtent)>("currentExtent");
        addField<DAS_BIND_MANAGED_FIELD(minImageExtent)>("minImageExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxImageExtent)>("maxImageExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxImageArrayLayers)>("maxImageArrayLayers");
        addField<DAS_BIND_MANAGED_FIELD(supportedTransforms)>("supportedTransforms");
        addField<DAS_BIND_MANAGED_FIELD(currentTransform)>("currentTransform");
        addField<DAS_BIND_MANAGED_FIELD(supportedCompositeAlpha)>("supportedCompositeAlpha");
        addField<DAS_BIND_MANAGED_FIELD(supportedUsageFlags)>("supportedUsageFlags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSurfaceFormatKHR, VkSurfaceFormatKHR);
struct VkSurfaceFormatKHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceFormatKHR,true,true> {
    VkSurfaceFormatKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceFormatKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(colorSpace)>("colorSpace");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSwapchainCreateInfoKHR, VkSwapchainCreateInfoKHR);
struct VkSwapchainCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkSwapchainCreateInfoKHR,true,true> {
    VkSwapchainCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSwapchainCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(minImageCount)>("minImageCount");
        addField<DAS_BIND_MANAGED_FIELD(imageFormat)>("imageFormat");
        addField<DAS_BIND_MANAGED_FIELD(imageColorSpace)>("imageColorSpace");
        addField<DAS_BIND_MANAGED_FIELD(imageExtent)>("imageExtent");
        addField<DAS_BIND_MANAGED_FIELD(imageArrayLayers)>("imageArrayLayers");
        addField<DAS_BIND_MANAGED_FIELD(imageUsage)>("imageUsage");
        addField<DAS_BIND_MANAGED_FIELD(imageSharingMode)>("imageSharingMode");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndexCount)>("queueFamilyIndexCount");
        addField<DAS_BIND_MANAGED_FIELD(preTransform)>("preTransform");
        addField<DAS_BIND_MANAGED_FIELD(compositeAlpha)>("compositeAlpha");
        addField<DAS_BIND_MANAGED_FIELD(presentMode)>("presentMode");
        addField<DAS_BIND_MANAGED_FIELD(clipped)>("clipped");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPresentInfoKHR, VkPresentInfoKHR);
struct VkPresentInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPresentInfoKHR,true,true> {
    VkPresentInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPresentInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(waitSemaphoreCount)>("waitSemaphoreCount");
        addField<DAS_BIND_MANAGED_FIELD(swapchainCount)>("swapchainCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageSwapchainCreateInfoKHR, VkImageSwapchainCreateInfoKHR);
struct VkImageSwapchainCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImageSwapchainCreateInfoKHR,true,true> {
    VkImageSwapchainCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageSwapchainCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindImageMemorySwapchainInfoKHR, VkBindImageMemorySwapchainInfoKHR);
struct VkBindImageMemorySwapchainInfoKHRAnnotation
: public ManagedStructureAnnotation<VkBindImageMemorySwapchainInfoKHR,true,true> {
    VkBindImageMemorySwapchainInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindImageMemorySwapchainInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(imageIndex)>("imageIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAcquireNextImageInfoKHR, VkAcquireNextImageInfoKHR);
struct VkAcquireNextImageInfoKHRAnnotation
: public ManagedStructureAnnotation<VkAcquireNextImageInfoKHR,true,true> {
    VkAcquireNextImageInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAcquireNextImageInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceMask)>("deviceMask");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceGroupPresentCapabilitiesKHR, VkDeviceGroupPresentCapabilitiesKHR);
struct VkDeviceGroupPresentCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupPresentCapabilitiesKHR,true,true> {
    VkDeviceGroupPresentCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupPresentCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(modes)>("modes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceGroupPresentInfoKHR, VkDeviceGroupPresentInfoKHR);
struct VkDeviceGroupPresentInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupPresentInfoKHR,true,true> {
    VkDeviceGroupPresentInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupPresentInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(swapchainCount)>("swapchainCount");
        addField<DAS_BIND_MANAGED_FIELD(mode)>("mode");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceGroupSwapchainCreateInfoKHR, VkDeviceGroupSwapchainCreateInfoKHR);
struct VkDeviceGroupSwapchainCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupSwapchainCreateInfoKHR,true,true> {
    VkDeviceGroupSwapchainCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupSwapchainCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(modes)>("modes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayModeParametersKHR, VkDisplayModeParametersKHR);
struct VkDisplayModeParametersKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModeParametersKHR,true,true> {
    VkDisplayModeParametersKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModeParametersKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(visibleRegion)>("visibleRegion");
        addField<DAS_BIND_MANAGED_FIELD(refreshRate)>("refreshRate");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayModeCreateInfoKHR, VkDisplayModeCreateInfoKHR);
struct VkDisplayModeCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModeCreateInfoKHR,true,true> {
    VkDisplayModeCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModeCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(parameters)>("parameters");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayModePropertiesKHR, VkDisplayModePropertiesKHR);
struct VkDisplayModePropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModePropertiesKHR,true,true> {
    VkDisplayModePropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModePropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(parameters)>("parameters");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayPlaneCapabilitiesKHR, VkDisplayPlaneCapabilitiesKHR);
struct VkDisplayPlaneCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneCapabilitiesKHR,true,true> {
    VkDisplayPlaneCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(supportedAlpha)>("supportedAlpha");
        addField<DAS_BIND_MANAGED_FIELD(minSrcPosition)>("minSrcPosition");
        addField<DAS_BIND_MANAGED_FIELD(maxSrcPosition)>("maxSrcPosition");
        addField<DAS_BIND_MANAGED_FIELD(minSrcExtent)>("minSrcExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxSrcExtent)>("maxSrcExtent");
        addField<DAS_BIND_MANAGED_FIELD(minDstPosition)>("minDstPosition");
        addField<DAS_BIND_MANAGED_FIELD(maxDstPosition)>("maxDstPosition");
        addField<DAS_BIND_MANAGED_FIELD(minDstExtent)>("minDstExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxDstExtent)>("maxDstExtent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayPlanePropertiesKHR, VkDisplayPlanePropertiesKHR);
struct VkDisplayPlanePropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlanePropertiesKHR,true,true> {
    VkDisplayPlanePropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlanePropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(currentStackIndex)>("currentStackIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayPropertiesKHR, VkDisplayPropertiesKHR);
struct VkDisplayPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPropertiesKHR,true,true> {
    VkDisplayPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(physicalDimensions)>("physicalDimensions");
        addField<DAS_BIND_MANAGED_FIELD(physicalResolution)>("physicalResolution");
        addField<DAS_BIND_MANAGED_FIELD(supportedTransforms)>("supportedTransforms");
        addField<DAS_BIND_MANAGED_FIELD(planeReorderPossible)>("planeReorderPossible");
        addField<DAS_BIND_MANAGED_FIELD(persistentContent)>("persistentContent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplaySurfaceCreateInfoKHR, VkDisplaySurfaceCreateInfoKHR);
struct VkDisplaySurfaceCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDisplaySurfaceCreateInfoKHR,true,true> {
    VkDisplaySurfaceCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplaySurfaceCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(planeIndex)>("planeIndex");
        addField<DAS_BIND_MANAGED_FIELD(planeStackIndex)>("planeStackIndex");
        addField<DAS_BIND_MANAGED_FIELD(transform)>("transform");
        addField<DAS_BIND_MANAGED_FIELD(globalAlpha)>("globalAlpha");
        addField<DAS_BIND_MANAGED_FIELD(alphaMode)>("alphaMode");
        addField<DAS_BIND_MANAGED_FIELD(imageExtent)>("imageExtent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayPresentInfoKHR, VkDisplayPresentInfoKHR);
struct VkDisplayPresentInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPresentInfoKHR,true,true> {
    VkDisplayPresentInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPresentInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(srcRect)>("srcRect");
        addField<DAS_BIND_MANAGED_FIELD(dstRect)>("dstRect");
        addField<DAS_BIND_MANAGED_FIELD(persistent)>("persistent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImportMemoryFdInfoKHR, VkImportMemoryFdInfoKHR);
struct VkImportMemoryFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImportMemoryFdInfoKHR,true,true> {
    VkImportMemoryFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportMemoryFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
        addField<DAS_BIND_MANAGED_FIELD(fd)>("fd");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryFdPropertiesKHR, VkMemoryFdPropertiesKHR);
struct VkMemoryFdPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkMemoryFdPropertiesKHR,true,true> {
    VkMemoryFdPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryFdPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(memoryTypeBits)>("memoryTypeBits");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryGetFdInfoKHR, VkMemoryGetFdInfoKHR);
struct VkMemoryGetFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkMemoryGetFdInfoKHR,true,true> {
    VkMemoryGetFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryGetFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImportSemaphoreFdInfoKHR, VkImportSemaphoreFdInfoKHR);
struct VkImportSemaphoreFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImportSemaphoreFdInfoKHR,true,true> {
    VkImportSemaphoreFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportSemaphoreFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
        addField<DAS_BIND_MANAGED_FIELD(fd)>("fd");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSemaphoreGetFdInfoKHR, VkSemaphoreGetFdInfoKHR);
struct VkSemaphoreGetFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkSemaphoreGetFdInfoKHR,true,true> {
    VkSemaphoreGetFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSemaphoreGetFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevicePushDescriptorPropertiesKHR, VkPhysicalDevicePushDescriptorPropertiesKHR);
struct VkPhysicalDevicePushDescriptorPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePushDescriptorPropertiesKHR,true,true> {
    VkPhysicalDevicePushDescriptorPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePushDescriptorPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxPushDescriptors)>("maxPushDescriptors");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRectLayerKHR, VkRectLayerKHR);
struct VkRectLayerKHRAnnotation
: public ManagedStructureAnnotation<VkRectLayerKHR,true,true> {
    VkRectLayerKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRectLayerKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
        addField<DAS_BIND_MANAGED_FIELD(layer)>("layer");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPresentRegionKHR, VkPresentRegionKHR);
struct VkPresentRegionKHRAnnotation
: public ManagedStructureAnnotation<VkPresentRegionKHR,true,true> {
    VkPresentRegionKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPresentRegionKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(rectangleCount)>("rectangleCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPresentRegionsKHR, VkPresentRegionsKHR);
struct VkPresentRegionsKHRAnnotation
: public ManagedStructureAnnotation<VkPresentRegionsKHR,true,true> {
    VkPresentRegionsKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPresentRegionsKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(swapchainCount)>("swapchainCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSharedPresentSurfaceCapabilitiesKHR, VkSharedPresentSurfaceCapabilitiesKHR);
struct VkSharedPresentSurfaceCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkSharedPresentSurfaceCapabilitiesKHR,true,true> {
    VkSharedPresentSurfaceCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSharedPresentSurfaceCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(sharedPresentSupportedUsageFlags)>("sharedPresentSupportedUsageFlags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImportFenceFdInfoKHR, VkImportFenceFdInfoKHR);
struct VkImportFenceFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImportFenceFdInfoKHR,true,true> {
    VkImportFenceFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportFenceFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
        addField<DAS_BIND_MANAGED_FIELD(fd)>("fd");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkFenceGetFdInfoKHR, VkFenceGetFdInfoKHR);
struct VkFenceGetFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkFenceGetFdInfoKHR,true,true> {
    VkFenceGetFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFenceGetFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevicePerformanceQueryFeaturesKHR, VkPhysicalDevicePerformanceQueryFeaturesKHR);
struct VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePerformanceQueryFeaturesKHR,true,true> {
    VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePerformanceQueryFeaturesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(performanceCounterQueryPools)>("performanceCounterQueryPools");
        addField<DAS_BIND_MANAGED_FIELD(performanceCounterMultipleQueryPools)>("performanceCounterMultipleQueryPools");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevicePerformanceQueryPropertiesKHR, VkPhysicalDevicePerformanceQueryPropertiesKHR);
struct VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePerformanceQueryPropertiesKHR,true,true> {
    VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePerformanceQueryPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(allowCommandBufferQueryCopies)>("allowCommandBufferQueryCopies");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPerformanceCounterKHR, VkPerformanceCounterKHR);
struct VkPerformanceCounterKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceCounterKHR,true,true> {
    VkPerformanceCounterKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceCounterKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(unit)>("unit");
        addField<DAS_BIND_MANAGED_FIELD(scope)>("scope");
        addField<DAS_BIND_MANAGED_FIELD(storage)>("storage");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPerformanceCounterDescriptionKHR, VkPerformanceCounterDescriptionKHR);
struct VkPerformanceCounterDescriptionKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceCounterDescriptionKHR,true,true> {
    VkPerformanceCounterDescriptionKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceCounterDescriptionKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkQueryPoolPerformanceCreateInfoKHR, VkQueryPoolPerformanceCreateInfoKHR);
struct VkQueryPoolPerformanceCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkQueryPoolPerformanceCreateInfoKHR,true,true> {
    VkQueryPoolPerformanceCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkQueryPoolPerformanceCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndex)>("queueFamilyIndex");
        addField<DAS_BIND_MANAGED_FIELD(counterIndexCount)>("counterIndexCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAcquireProfilingLockInfoKHR, VkAcquireProfilingLockInfoKHR);
struct VkAcquireProfilingLockInfoKHRAnnotation
: public ManagedStructureAnnotation<VkAcquireProfilingLockInfoKHR,true,true> {
    VkAcquireProfilingLockInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAcquireProfilingLockInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPerformanceQuerySubmitInfoKHR, VkPerformanceQuerySubmitInfoKHR);
struct VkPerformanceQuerySubmitInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceQuerySubmitInfoKHR,true,true> {
    VkPerformanceQuerySubmitInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceQuerySubmitInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(counterPassIndex)>("counterPassIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSurfaceInfo2KHR, VkPhysicalDeviceSurfaceInfo2KHR);
struct VkPhysicalDeviceSurfaceInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSurfaceInfo2KHR,true,true> {
    VkPhysicalDeviceSurfaceInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSurfaceInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSurfaceCapabilities2KHR, VkSurfaceCapabilities2KHR);
struct VkSurfaceCapabilities2KHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceCapabilities2KHR,true,true> {
    VkSurfaceCapabilities2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceCapabilities2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(surfaceCapabilities)>("surfaceCapabilities");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSurfaceFormat2KHR, VkSurfaceFormat2KHR);
struct VkSurfaceFormat2KHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceFormat2KHR,true,true> {
    VkSurfaceFormat2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceFormat2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(surfaceFormat)>("surfaceFormat");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayProperties2KHR, VkDisplayProperties2KHR);
struct VkDisplayProperties2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayProperties2KHR,true,true> {
    VkDisplayProperties2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayProperties2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(displayProperties)>("displayProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayPlaneProperties2KHR, VkDisplayPlaneProperties2KHR);
struct VkDisplayPlaneProperties2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneProperties2KHR,true,true> {
    VkDisplayPlaneProperties2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneProperties2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(displayPlaneProperties)>("displayPlaneProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayModeProperties2KHR, VkDisplayModeProperties2KHR);
struct VkDisplayModeProperties2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModeProperties2KHR,true,true> {
    VkDisplayModeProperties2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModeProperties2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(displayModeProperties)>("displayModeProperties");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayPlaneInfo2KHR, VkDisplayPlaneInfo2KHR);
struct VkDisplayPlaneInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneInfo2KHR,true,true> {
    VkDisplayPlaneInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(planeIndex)>("planeIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayPlaneCapabilities2KHR, VkDisplayPlaneCapabilities2KHR);
struct VkDisplayPlaneCapabilities2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneCapabilities2KHR,true,true> {
    VkDisplayPlaneCapabilities2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneCapabilities2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(capabilities)>("capabilities");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderClockFeaturesKHR, VkPhysicalDeviceShaderClockFeaturesKHR);
struct VkPhysicalDeviceShaderClockFeaturesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderClockFeaturesKHR,true,true> {
    VkPhysicalDeviceShaderClockFeaturesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderClockFeaturesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderSubgroupClock)>("shaderSubgroupClock");
        addField<DAS_BIND_MANAGED_FIELD(shaderDeviceClock)>("shaderDeviceClock");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSurfaceProtectedCapabilitiesKHR, VkSurfaceProtectedCapabilitiesKHR);
struct VkSurfaceProtectedCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceProtectedCapabilitiesKHR,true,true> {
    VkSurfaceProtectedCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceProtectedCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(supportsProtected)>("supportsProtected");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR);
struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,true,true> {
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pipelineExecutableInfo)>("pipelineExecutableInfo");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineInfoKHR, VkPipelineInfoKHR);
struct VkPipelineInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineInfoKHR,true,true> {
    VkPipelineInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineExecutablePropertiesKHR, VkPipelineExecutablePropertiesKHR);
struct VkPipelineExecutablePropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineExecutablePropertiesKHR,true,true> {
    VkPipelineExecutablePropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineExecutablePropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(stages)>("stages");
        addField<DAS_BIND_MANAGED_FIELD(subgroupSize)>("subgroupSize");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineExecutableInfoKHR, VkPipelineExecutableInfoKHR);
struct VkPipelineExecutableInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineExecutableInfoKHR,true,true> {
    VkPipelineExecutableInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineExecutableInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(executableIndex)>("executableIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineExecutableStatisticKHR, VkPipelineExecutableStatisticKHR);
struct VkPipelineExecutableStatisticKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineExecutableStatisticKHR,true,true> {
    VkPipelineExecutableStatisticKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineExecutableStatisticKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineExecutableInternalRepresentationKHR, VkPipelineExecutableInternalRepresentationKHR);
struct VkPipelineExecutableInternalRepresentationKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineExecutableInternalRepresentationKHR,true,true> {
    VkPipelineExecutableInternalRepresentationKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineExecutableInternalRepresentationKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(isText)>("isText");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDebugReportCallbackCreateInfoEXT, VkDebugReportCallbackCreateInfoEXT);
struct VkDebugReportCallbackCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugReportCallbackCreateInfoEXT,true,true> {
    VkDebugReportCallbackCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugReportCallbackCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineRasterizationStateRasterizationOrderAMD, VkPipelineRasterizationStateRasterizationOrderAMD);
struct VkPipelineRasterizationStateRasterizationOrderAMDAnnotation
: public ManagedStructureAnnotation<VkPipelineRasterizationStateRasterizationOrderAMD,true,true> {
    VkPipelineRasterizationStateRasterizationOrderAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineRasterizationStateRasterizationOrderAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(rasterizationOrder)>("rasterizationOrder");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDebugMarkerObjectNameInfoEXT, VkDebugMarkerObjectNameInfoEXT);
struct VkDebugMarkerObjectNameInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugMarkerObjectNameInfoEXT,true,true> {
    VkDebugMarkerObjectNameInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugMarkerObjectNameInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(objectType)>("objectType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDebugMarkerObjectTagInfoEXT, VkDebugMarkerObjectTagInfoEXT);
struct VkDebugMarkerObjectTagInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugMarkerObjectTagInfoEXT,true,true> {
    VkDebugMarkerObjectTagInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugMarkerObjectTagInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(objectType)>("objectType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDebugMarkerMarkerInfoEXT, VkDebugMarkerMarkerInfoEXT);
struct VkDebugMarkerMarkerInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugMarkerMarkerInfoEXT,true,true> {
    VkDebugMarkerMarkerInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugMarkerMarkerInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDedicatedAllocationImageCreateInfoNV, VkDedicatedAllocationImageCreateInfoNV);
struct VkDedicatedAllocationImageCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkDedicatedAllocationImageCreateInfoNV,true,true> {
    VkDedicatedAllocationImageCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDedicatedAllocationImageCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(dedicatedAllocation)>("dedicatedAllocation");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDedicatedAllocationBufferCreateInfoNV, VkDedicatedAllocationBufferCreateInfoNV);
struct VkDedicatedAllocationBufferCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkDedicatedAllocationBufferCreateInfoNV,true,true> {
    VkDedicatedAllocationBufferCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDedicatedAllocationBufferCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(dedicatedAllocation)>("dedicatedAllocation");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDedicatedAllocationMemoryAllocateInfoNV, VkDedicatedAllocationMemoryAllocateInfoNV);
struct VkDedicatedAllocationMemoryAllocateInfoNVAnnotation
: public ManagedStructureAnnotation<VkDedicatedAllocationMemoryAllocateInfoNV,true,true> {
    VkDedicatedAllocationMemoryAllocateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDedicatedAllocationMemoryAllocateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceTransformFeedbackFeaturesEXT, VkPhysicalDeviceTransformFeedbackFeaturesEXT);
struct VkPhysicalDeviceTransformFeedbackFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceTransformFeedbackFeaturesEXT,true,true> {
    VkPhysicalDeviceTransformFeedbackFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceTransformFeedbackFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(transformFeedback)>("transformFeedback");
        addField<DAS_BIND_MANAGED_FIELD(geometryStreams)>("geometryStreams");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceTransformFeedbackPropertiesEXT, VkPhysicalDeviceTransformFeedbackPropertiesEXT);
struct VkPhysicalDeviceTransformFeedbackPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceTransformFeedbackPropertiesEXT,true,true> {
    VkPhysicalDeviceTransformFeedbackPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceTransformFeedbackPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxTransformFeedbackStreams)>("maxTransformFeedbackStreams");
        addField<DAS_BIND_MANAGED_FIELD(maxTransformFeedbackBuffers)>("maxTransformFeedbackBuffers");
        addField<DAS_BIND_MANAGED_FIELD(maxTransformFeedbackStreamDataSize)>("maxTransformFeedbackStreamDataSize");
        addField<DAS_BIND_MANAGED_FIELD(maxTransformFeedbackBufferDataSize)>("maxTransformFeedbackBufferDataSize");
        addField<DAS_BIND_MANAGED_FIELD(maxTransformFeedbackBufferDataStride)>("maxTransformFeedbackBufferDataStride");
        addField<DAS_BIND_MANAGED_FIELD(transformFeedbackQueries)>("transformFeedbackQueries");
        addField<DAS_BIND_MANAGED_FIELD(transformFeedbackStreamsLinesTriangles)>("transformFeedbackStreamsLinesTriangles");
        addField<DAS_BIND_MANAGED_FIELD(transformFeedbackRasterizationStreamSelect)>("transformFeedbackRasterizationStreamSelect");
        addField<DAS_BIND_MANAGED_FIELD(transformFeedbackDraw)>("transformFeedbackDraw");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineRasterizationStateStreamCreateInfoEXT, VkPipelineRasterizationStateStreamCreateInfoEXT);
struct VkPipelineRasterizationStateStreamCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineRasterizationStateStreamCreateInfoEXT,true,true> {
    VkPipelineRasterizationStateStreamCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineRasterizationStateStreamCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(rasterizationStream)>("rasterizationStream");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageViewHandleInfoNVX, VkImageViewHandleInfoNVX);
struct VkImageViewHandleInfoNVXAnnotation
: public ManagedStructureAnnotation<VkImageViewHandleInfoNVX,true,true> {
    VkImageViewHandleInfoNVXAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageViewHandleInfoNVX", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(descriptorType)>("descriptorType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageViewAddressPropertiesNVX, VkImageViewAddressPropertiesNVX);
struct VkImageViewAddressPropertiesNVXAnnotation
: public ManagedStructureAnnotation<VkImageViewAddressPropertiesNVX,true,true> {
    VkImageViewAddressPropertiesNVXAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageViewAddressPropertiesNVX", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkTextureLODGatherFormatPropertiesAMD, VkTextureLODGatherFormatPropertiesAMD);
struct VkTextureLODGatherFormatPropertiesAMDAnnotation
: public ManagedStructureAnnotation<VkTextureLODGatherFormatPropertiesAMD,true,true> {
    VkTextureLODGatherFormatPropertiesAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkTextureLODGatherFormatPropertiesAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(supportsTextureGatherLODBiasAMD)>("supportsTextureGatherLODBiasAMD");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkShaderResourceUsageAMD, VkShaderResourceUsageAMD);
struct VkShaderResourceUsageAMDAnnotation
: public ManagedStructureAnnotation<VkShaderResourceUsageAMD,true,true> {
    VkShaderResourceUsageAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkShaderResourceUsageAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(numUsedVgprs)>("numUsedVgprs");
        addField<DAS_BIND_MANAGED_FIELD(numUsedSgprs)>("numUsedSgprs");
        addField<DAS_BIND_MANAGED_FIELD(ldsSizePerLocalWorkGroup)>("ldsSizePerLocalWorkGroup");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkShaderStatisticsInfoAMD, VkShaderStatisticsInfoAMD);
struct VkShaderStatisticsInfoAMDAnnotation
: public ManagedStructureAnnotation<VkShaderStatisticsInfoAMD,true,true> {
    VkShaderStatisticsInfoAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkShaderStatisticsInfoAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(shaderStageMask)>("shaderStageMask");
        addField<DAS_BIND_MANAGED_FIELD(resourceUsage)>("resourceUsage");
        addField<DAS_BIND_MANAGED_FIELD(numPhysicalVgprs)>("numPhysicalVgprs");
        addField<DAS_BIND_MANAGED_FIELD(numPhysicalSgprs)>("numPhysicalSgprs");
        addField<DAS_BIND_MANAGED_FIELD(numAvailableVgprs)>("numAvailableVgprs");
        addField<DAS_BIND_MANAGED_FIELD(numAvailableSgprs)>("numAvailableSgprs");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceCornerSampledImageFeaturesNV, VkPhysicalDeviceCornerSampledImageFeaturesNV);
struct VkPhysicalDeviceCornerSampledImageFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceCornerSampledImageFeaturesNV,true,true> {
    VkPhysicalDeviceCornerSampledImageFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceCornerSampledImageFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(cornerSampledImage)>("cornerSampledImage");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExternalImageFormatPropertiesNV, VkExternalImageFormatPropertiesNV);
struct VkExternalImageFormatPropertiesNVAnnotation
: public ManagedStructureAnnotation<VkExternalImageFormatPropertiesNV,true,true> {
    VkExternalImageFormatPropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExternalImageFormatPropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(imageFormatProperties)>("imageFormatProperties");
        addField<DAS_BIND_MANAGED_FIELD(externalMemoryFeatures)>("externalMemoryFeatures");
        addField<DAS_BIND_MANAGED_FIELD(exportFromImportedHandleTypes)>("exportFromImportedHandleTypes");
        addField<DAS_BIND_MANAGED_FIELD(compatibleHandleTypes)>("compatibleHandleTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExternalMemoryImageCreateInfoNV, VkExternalMemoryImageCreateInfoNV);
struct VkExternalMemoryImageCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkExternalMemoryImageCreateInfoNV,true,true> {
    VkExternalMemoryImageCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExternalMemoryImageCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleTypes)>("handleTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkExportMemoryAllocateInfoNV, VkExportMemoryAllocateInfoNV);
struct VkExportMemoryAllocateInfoNVAnnotation
: public ManagedStructureAnnotation<VkExportMemoryAllocateInfoNV,true,true> {
    VkExportMemoryAllocateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkExportMemoryAllocateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleTypes)>("handleTypes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkValidationFlagsEXT, VkValidationFlagsEXT);
struct VkValidationFlagsEXTAnnotation
: public ManagedStructureAnnotation<VkValidationFlagsEXT,true,true> {
    VkValidationFlagsEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkValidationFlagsEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(disabledValidationCheckCount)>("disabledValidationCheckCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT, VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT);
struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT,true,true> {
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(textureCompressionASTC_HDR)>("textureCompressionASTC_HDR");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageViewASTCDecodeModeEXT, VkImageViewASTCDecodeModeEXT);
struct VkImageViewASTCDecodeModeEXTAnnotation
: public ManagedStructureAnnotation<VkImageViewASTCDecodeModeEXT,true,true> {
    VkImageViewASTCDecodeModeEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageViewASTCDecodeModeEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(decodeMode)>("decodeMode");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceASTCDecodeFeaturesEXT, VkPhysicalDeviceASTCDecodeFeaturesEXT);
struct VkPhysicalDeviceASTCDecodeFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceASTCDecodeFeaturesEXT,true,true> {
    VkPhysicalDeviceASTCDecodeFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceASTCDecodeFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(decodeModeSharedExponent)>("decodeModeSharedExponent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkConditionalRenderingBeginInfoEXT, VkConditionalRenderingBeginInfoEXT);
struct VkConditionalRenderingBeginInfoEXTAnnotation
: public ManagedStructureAnnotation<VkConditionalRenderingBeginInfoEXT,true,true> {
    VkConditionalRenderingBeginInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkConditionalRenderingBeginInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceConditionalRenderingFeaturesEXT, VkPhysicalDeviceConditionalRenderingFeaturesEXT);
struct VkPhysicalDeviceConditionalRenderingFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceConditionalRenderingFeaturesEXT,true,true> {
    VkPhysicalDeviceConditionalRenderingFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceConditionalRenderingFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(conditionalRendering)>("conditionalRendering");
        addField<DAS_BIND_MANAGED_FIELD(inheritedConditionalRendering)>("inheritedConditionalRendering");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCommandBufferInheritanceConditionalRenderingInfoEXT, VkCommandBufferInheritanceConditionalRenderingInfoEXT);
struct VkCommandBufferInheritanceConditionalRenderingInfoEXTAnnotation
: public ManagedStructureAnnotation<VkCommandBufferInheritanceConditionalRenderingInfoEXT,true,true> {
    VkCommandBufferInheritanceConditionalRenderingInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCommandBufferInheritanceConditionalRenderingInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(conditionalRenderingEnable)>("conditionalRenderingEnable");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkViewportWScalingNV, VkViewportWScalingNV);
struct VkViewportWScalingNVAnnotation
: public ManagedStructureAnnotation<VkViewportWScalingNV,true,true> {
    VkViewportWScalingNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkViewportWScalingNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(xcoeff)>("xcoeff");
        addField<DAS_BIND_MANAGED_FIELD(ycoeff)>("ycoeff");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineViewportWScalingStateCreateInfoNV, VkPipelineViewportWScalingStateCreateInfoNV);
struct VkPipelineViewportWScalingStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineViewportWScalingStateCreateInfoNV,true,true> {
    VkPipelineViewportWScalingStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineViewportWScalingStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(viewportWScalingEnable)>("viewportWScalingEnable");
        addField<DAS_BIND_MANAGED_FIELD(viewportCount)>("viewportCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSurfaceCapabilities2EXT, VkSurfaceCapabilities2EXT);
struct VkSurfaceCapabilities2EXTAnnotation
: public ManagedStructureAnnotation<VkSurfaceCapabilities2EXT,true,true> {
    VkSurfaceCapabilities2EXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceCapabilities2EXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(minImageCount)>("minImageCount");
        addField<DAS_BIND_MANAGED_FIELD(maxImageCount)>("maxImageCount");
        addField<DAS_BIND_MANAGED_FIELD(currentExtent)>("currentExtent");
        addField<DAS_BIND_MANAGED_FIELD(minImageExtent)>("minImageExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxImageExtent)>("maxImageExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxImageArrayLayers)>("maxImageArrayLayers");
        addField<DAS_BIND_MANAGED_FIELD(supportedTransforms)>("supportedTransforms");
        addField<DAS_BIND_MANAGED_FIELD(currentTransform)>("currentTransform");
        addField<DAS_BIND_MANAGED_FIELD(supportedCompositeAlpha)>("supportedCompositeAlpha");
        addField<DAS_BIND_MANAGED_FIELD(supportedUsageFlags)>("supportedUsageFlags");
        addField<DAS_BIND_MANAGED_FIELD(supportedSurfaceCounters)>("supportedSurfaceCounters");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayPowerInfoEXT, VkDisplayPowerInfoEXT);
struct VkDisplayPowerInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDisplayPowerInfoEXT,true,true> {
    VkDisplayPowerInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPowerInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(powerState)>("powerState");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceEventInfoEXT, VkDeviceEventInfoEXT);
struct VkDeviceEventInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDeviceEventInfoEXT,true,true> {
    VkDeviceEventInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceEventInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceEvent)>("deviceEvent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayEventInfoEXT, VkDisplayEventInfoEXT);
struct VkDisplayEventInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDisplayEventInfoEXT,true,true> {
    VkDisplayEventInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayEventInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(displayEvent)>("displayEvent");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSwapchainCounterCreateInfoEXT, VkSwapchainCounterCreateInfoEXT);
struct VkSwapchainCounterCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkSwapchainCounterCreateInfoEXT,true,true> {
    VkSwapchainCounterCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSwapchainCounterCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(surfaceCounters)>("surfaceCounters");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRefreshCycleDurationGOOGLE, VkRefreshCycleDurationGOOGLE);
struct VkRefreshCycleDurationGOOGLEAnnotation
: public ManagedStructureAnnotation<VkRefreshCycleDurationGOOGLE,true,true> {
    VkRefreshCycleDurationGOOGLEAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRefreshCycleDurationGOOGLE", ml) {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPastPresentationTimingGOOGLE, VkPastPresentationTimingGOOGLE);
struct VkPastPresentationTimingGOOGLEAnnotation
: public ManagedStructureAnnotation<VkPastPresentationTimingGOOGLE,true,true> {
    VkPastPresentationTimingGOOGLEAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPastPresentationTimingGOOGLE", ml) {
        addField<DAS_BIND_MANAGED_FIELD(presentID)>("presentID");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPresentTimeGOOGLE, VkPresentTimeGOOGLE);
struct VkPresentTimeGOOGLEAnnotation
: public ManagedStructureAnnotation<VkPresentTimeGOOGLE,true,true> {
    VkPresentTimeGOOGLEAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPresentTimeGOOGLE", ml) {
        addField<DAS_BIND_MANAGED_FIELD(presentID)>("presentID");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPresentTimesInfoGOOGLE, VkPresentTimesInfoGOOGLE);
struct VkPresentTimesInfoGOOGLEAnnotation
: public ManagedStructureAnnotation<VkPresentTimesInfoGOOGLE,true,true> {
    VkPresentTimesInfoGOOGLEAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPresentTimesInfoGOOGLE", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(swapchainCount)>("swapchainCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX);
struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,true,true> {
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(perViewPositionAllComponents)>("perViewPositionAllComponents");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkViewportSwizzleNV, VkViewportSwizzleNV);
struct VkViewportSwizzleNVAnnotation
: public ManagedStructureAnnotation<VkViewportSwizzleNV,true,true> {
    VkViewportSwizzleNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkViewportSwizzleNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(x)>("x");
        addField<DAS_BIND_MANAGED_FIELD(y)>("y");
        addField<DAS_BIND_MANAGED_FIELD(z)>("z");
        addField<DAS_BIND_MANAGED_FIELD(w)>("w");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineViewportSwizzleStateCreateInfoNV, VkPipelineViewportSwizzleStateCreateInfoNV);
struct VkPipelineViewportSwizzleStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineViewportSwizzleStateCreateInfoNV,true,true> {
    VkPipelineViewportSwizzleStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineViewportSwizzleStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(viewportCount)>("viewportCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDiscardRectanglePropertiesEXT, VkPhysicalDeviceDiscardRectanglePropertiesEXT);
struct VkPhysicalDeviceDiscardRectanglePropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDiscardRectanglePropertiesEXT,true,true> {
    VkPhysicalDeviceDiscardRectanglePropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDiscardRectanglePropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxDiscardRectangles)>("maxDiscardRectangles");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineDiscardRectangleStateCreateInfoEXT, VkPipelineDiscardRectangleStateCreateInfoEXT);
struct VkPipelineDiscardRectangleStateCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineDiscardRectangleStateCreateInfoEXT,true,true> {
    VkPipelineDiscardRectangleStateCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineDiscardRectangleStateCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(discardRectangleMode)>("discardRectangleMode");
        addField<DAS_BIND_MANAGED_FIELD(discardRectangleCount)>("discardRectangleCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, VkPhysicalDeviceConservativeRasterizationPropertiesEXT);
struct VkPhysicalDeviceConservativeRasterizationPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceConservativeRasterizationPropertiesEXT,true,true> {
    VkPhysicalDeviceConservativeRasterizationPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceConservativeRasterizationPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(primitiveOverestimationSize)>("primitiveOverestimationSize");
        addField<DAS_BIND_MANAGED_FIELD(maxExtraPrimitiveOverestimationSize)>("maxExtraPrimitiveOverestimationSize");
        addField<DAS_BIND_MANAGED_FIELD(extraPrimitiveOverestimationSizeGranularity)>("extraPrimitiveOverestimationSizeGranularity");
        addField<DAS_BIND_MANAGED_FIELD(primitiveUnderestimation)>("primitiveUnderestimation");
        addField<DAS_BIND_MANAGED_FIELD(conservativePointAndLineRasterization)>("conservativePointAndLineRasterization");
        addField<DAS_BIND_MANAGED_FIELD(degenerateTrianglesRasterized)>("degenerateTrianglesRasterized");
        addField<DAS_BIND_MANAGED_FIELD(degenerateLinesRasterized)>("degenerateLinesRasterized");
        addField<DAS_BIND_MANAGED_FIELD(fullyCoveredFragmentShaderInputVariable)>("fullyCoveredFragmentShaderInputVariable");
        addField<DAS_BIND_MANAGED_FIELD(conservativeRasterizationPostDepthCoverage)>("conservativeRasterizationPostDepthCoverage");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineRasterizationConservativeStateCreateInfoEXT, VkPipelineRasterizationConservativeStateCreateInfoEXT);
struct VkPipelineRasterizationConservativeStateCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineRasterizationConservativeStateCreateInfoEXT,true,true> {
    VkPipelineRasterizationConservativeStateCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineRasterizationConservativeStateCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(conservativeRasterizationMode)>("conservativeRasterizationMode");
        addField<DAS_BIND_MANAGED_FIELD(extraPrimitiveOverestimationSize)>("extraPrimitiveOverestimationSize");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDepthClipEnableFeaturesEXT, VkPhysicalDeviceDepthClipEnableFeaturesEXT);
struct VkPhysicalDeviceDepthClipEnableFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDepthClipEnableFeaturesEXT,true,true> {
    VkPhysicalDeviceDepthClipEnableFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDepthClipEnableFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(depthClipEnable)>("depthClipEnable");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineRasterizationDepthClipStateCreateInfoEXT, VkPipelineRasterizationDepthClipStateCreateInfoEXT);
struct VkPipelineRasterizationDepthClipStateCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineRasterizationDepthClipStateCreateInfoEXT,true,true> {
    VkPipelineRasterizationDepthClipStateCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineRasterizationDepthClipStateCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(depthClipEnable)>("depthClipEnable");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkXYColorEXT, VkXYColorEXT);
struct VkXYColorEXTAnnotation
: public ManagedStructureAnnotation<VkXYColorEXT,true,true> {
    VkXYColorEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkXYColorEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(x)>("x");
        addField<DAS_BIND_MANAGED_FIELD(y)>("y");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkHdrMetadataEXT, VkHdrMetadataEXT);
struct VkHdrMetadataEXTAnnotation
: public ManagedStructureAnnotation<VkHdrMetadataEXT,true,true> {
    VkHdrMetadataEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkHdrMetadataEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(displayPrimaryRed)>("displayPrimaryRed");
        addField<DAS_BIND_MANAGED_FIELD(displayPrimaryGreen)>("displayPrimaryGreen");
        addField<DAS_BIND_MANAGED_FIELD(displayPrimaryBlue)>("displayPrimaryBlue");
        addField<DAS_BIND_MANAGED_FIELD(whitePoint)>("whitePoint");
        addField<DAS_BIND_MANAGED_FIELD(maxLuminance)>("maxLuminance");
        addField<DAS_BIND_MANAGED_FIELD(minLuminance)>("minLuminance");
        addField<DAS_BIND_MANAGED_FIELD(maxContentLightLevel)>("maxContentLightLevel");
        addField<DAS_BIND_MANAGED_FIELD(maxFrameAverageLightLevel)>("maxFrameAverageLightLevel");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDebugUtilsLabelEXT, VkDebugUtilsLabelEXT);
struct VkDebugUtilsLabelEXTAnnotation
: public ManagedStructureAnnotation<VkDebugUtilsLabelEXT,true,true> {
    VkDebugUtilsLabelEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugUtilsLabelEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDebugUtilsObjectNameInfoEXT, VkDebugUtilsObjectNameInfoEXT);
struct VkDebugUtilsObjectNameInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugUtilsObjectNameInfoEXT,true,true> {
    VkDebugUtilsObjectNameInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugUtilsObjectNameInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(objectType)>("objectType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDebugUtilsMessengerCallbackDataEXT, VkDebugUtilsMessengerCallbackDataEXT);
struct VkDebugUtilsMessengerCallbackDataEXTAnnotation
: public ManagedStructureAnnotation<VkDebugUtilsMessengerCallbackDataEXT,true,true> {
    VkDebugUtilsMessengerCallbackDataEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugUtilsMessengerCallbackDataEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(messageIdNumber)>("messageIdNumber");
        addField<DAS_BIND_MANAGED_FIELD(queueLabelCount)>("queueLabelCount");
        addField<DAS_BIND_MANAGED_FIELD(cmdBufLabelCount)>("cmdBufLabelCount");
        addField<DAS_BIND_MANAGED_FIELD(objectCount)>("objectCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDebugUtilsMessengerCreateInfoEXT, VkDebugUtilsMessengerCreateInfoEXT);
struct VkDebugUtilsMessengerCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugUtilsMessengerCreateInfoEXT,true,true> {
    VkDebugUtilsMessengerCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugUtilsMessengerCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(messageSeverity)>("messageSeverity");
        addField<DAS_BIND_MANAGED_FIELD(messageType)>("messageType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDebugUtilsObjectTagInfoEXT, VkDebugUtilsObjectTagInfoEXT);
struct VkDebugUtilsObjectTagInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugUtilsObjectTagInfoEXT,true,true> {
    VkDebugUtilsObjectTagInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugUtilsObjectTagInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(objectType)>("objectType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, VkPhysicalDeviceInlineUniformBlockFeaturesEXT);
struct VkPhysicalDeviceInlineUniformBlockFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceInlineUniformBlockFeaturesEXT,true,true> {
    VkPhysicalDeviceInlineUniformBlockFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceInlineUniformBlockFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(inlineUniformBlock)>("inlineUniformBlock");
        addField<DAS_BIND_MANAGED_FIELD(descriptorBindingInlineUniformBlockUpdateAfterBind)>("descriptorBindingInlineUniformBlockUpdateAfterBind");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, VkPhysicalDeviceInlineUniformBlockPropertiesEXT);
struct VkPhysicalDeviceInlineUniformBlockPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceInlineUniformBlockPropertiesEXT,true,true> {
    VkPhysicalDeviceInlineUniformBlockPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceInlineUniformBlockPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxInlineUniformBlockSize)>("maxInlineUniformBlockSize");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorInlineUniformBlocks)>("maxPerStageDescriptorInlineUniformBlocks");
        addField<DAS_BIND_MANAGED_FIELD(maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)>("maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetInlineUniformBlocks)>("maxDescriptorSetInlineUniformBlocks");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetUpdateAfterBindInlineUniformBlocks)>("maxDescriptorSetUpdateAfterBindInlineUniformBlocks");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkWriteDescriptorSetInlineUniformBlockEXT, VkWriteDescriptorSetInlineUniformBlockEXT);
struct VkWriteDescriptorSetInlineUniformBlockEXTAnnotation
: public ManagedStructureAnnotation<VkWriteDescriptorSetInlineUniformBlockEXT,true,true> {
    VkWriteDescriptorSetInlineUniformBlockEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkWriteDescriptorSetInlineUniformBlockEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(dataSize)>("dataSize");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDescriptorPoolInlineUniformBlockCreateInfoEXT, VkDescriptorPoolInlineUniformBlockCreateInfoEXT);
struct VkDescriptorPoolInlineUniformBlockCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDescriptorPoolInlineUniformBlockCreateInfoEXT,true,true> {
    VkDescriptorPoolInlineUniformBlockCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDescriptorPoolInlineUniformBlockCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxInlineUniformBlockBindings)>("maxInlineUniformBlockBindings");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSampleLocationEXT, VkSampleLocationEXT);
struct VkSampleLocationEXTAnnotation
: public ManagedStructureAnnotation<VkSampleLocationEXT,true,true> {
    VkSampleLocationEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSampleLocationEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(x)>("x");
        addField<DAS_BIND_MANAGED_FIELD(y)>("y");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSampleLocationsInfoEXT, VkSampleLocationsInfoEXT);
struct VkSampleLocationsInfoEXTAnnotation
: public ManagedStructureAnnotation<VkSampleLocationsInfoEXT,true,true> {
    VkSampleLocationsInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSampleLocationsInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationsPerPixel)>("sampleLocationsPerPixel");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationGridSize)>("sampleLocationGridSize");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationsCount)>("sampleLocationsCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAttachmentSampleLocationsEXT, VkAttachmentSampleLocationsEXT);
struct VkAttachmentSampleLocationsEXTAnnotation
: public ManagedStructureAnnotation<VkAttachmentSampleLocationsEXT,true,true> {
    VkAttachmentSampleLocationsEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAttachmentSampleLocationsEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(attachmentIndex)>("attachmentIndex");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationsInfo)>("sampleLocationsInfo");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSubpassSampleLocationsEXT, VkSubpassSampleLocationsEXT);
struct VkSubpassSampleLocationsEXTAnnotation
: public ManagedStructureAnnotation<VkSubpassSampleLocationsEXT,true,true> {
    VkSubpassSampleLocationsEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSubpassSampleLocationsEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(subpassIndex)>("subpassIndex");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationsInfo)>("sampleLocationsInfo");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRenderPassSampleLocationsBeginInfoEXT, VkRenderPassSampleLocationsBeginInfoEXT);
struct VkRenderPassSampleLocationsBeginInfoEXTAnnotation
: public ManagedStructureAnnotation<VkRenderPassSampleLocationsBeginInfoEXT,true,true> {
    VkRenderPassSampleLocationsBeginInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassSampleLocationsBeginInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(attachmentInitialSampleLocationsCount)>("attachmentInitialSampleLocationsCount");
        addField<DAS_BIND_MANAGED_FIELD(postSubpassSampleLocationsCount)>("postSubpassSampleLocationsCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineSampleLocationsStateCreateInfoEXT, VkPipelineSampleLocationsStateCreateInfoEXT);
struct VkPipelineSampleLocationsStateCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineSampleLocationsStateCreateInfoEXT,true,true> {
    VkPipelineSampleLocationsStateCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineSampleLocationsStateCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationsEnable)>("sampleLocationsEnable");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationsInfo)>("sampleLocationsInfo");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSampleLocationsPropertiesEXT, VkPhysicalDeviceSampleLocationsPropertiesEXT);
struct VkPhysicalDeviceSampleLocationsPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSampleLocationsPropertiesEXT,true,true> {
    VkPhysicalDeviceSampleLocationsPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSampleLocationsPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationSampleCounts)>("sampleLocationSampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(maxSampleLocationGridSize)>("maxSampleLocationGridSize");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationSubPixelBits)>("sampleLocationSubPixelBits");
        addField<DAS_BIND_MANAGED_FIELD(variableSampleLocations)>("variableSampleLocations");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMultisamplePropertiesEXT, VkMultisamplePropertiesEXT);
struct VkMultisamplePropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkMultisamplePropertiesEXT,true,true> {
    VkMultisamplePropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMultisamplePropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxSampleLocationGridSize)>("maxSampleLocationGridSize");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT);
struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT,true,true> {
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(advancedBlendCoherentOperations)>("advancedBlendCoherentOperations");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT);
struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,true,true> {
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(advancedBlendMaxColorAttachments)>("advancedBlendMaxColorAttachments");
        addField<DAS_BIND_MANAGED_FIELD(advancedBlendIndependentBlend)>("advancedBlendIndependentBlend");
        addField<DAS_BIND_MANAGED_FIELD(advancedBlendNonPremultipliedSrcColor)>("advancedBlendNonPremultipliedSrcColor");
        addField<DAS_BIND_MANAGED_FIELD(advancedBlendNonPremultipliedDstColor)>("advancedBlendNonPremultipliedDstColor");
        addField<DAS_BIND_MANAGED_FIELD(advancedBlendCorrelatedOverlap)>("advancedBlendCorrelatedOverlap");
        addField<DAS_BIND_MANAGED_FIELD(advancedBlendAllOperations)>("advancedBlendAllOperations");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineColorBlendAdvancedStateCreateInfoEXT, VkPipelineColorBlendAdvancedStateCreateInfoEXT);
struct VkPipelineColorBlendAdvancedStateCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineColorBlendAdvancedStateCreateInfoEXT,true,true> {
    VkPipelineColorBlendAdvancedStateCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineColorBlendAdvancedStateCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(srcPremultiplied)>("srcPremultiplied");
        addField<DAS_BIND_MANAGED_FIELD(dstPremultiplied)>("dstPremultiplied");
        addField<DAS_BIND_MANAGED_FIELD(blendOverlap)>("blendOverlap");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineCoverageToColorStateCreateInfoNV, VkPipelineCoverageToColorStateCreateInfoNV);
struct VkPipelineCoverageToColorStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineCoverageToColorStateCreateInfoNV,true,true> {
    VkPipelineCoverageToColorStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineCoverageToColorStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(coverageToColorEnable)>("coverageToColorEnable");
        addField<DAS_BIND_MANAGED_FIELD(coverageToColorLocation)>("coverageToColorLocation");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineCoverageModulationStateCreateInfoNV, VkPipelineCoverageModulationStateCreateInfoNV);
struct VkPipelineCoverageModulationStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineCoverageModulationStateCreateInfoNV,true,true> {
    VkPipelineCoverageModulationStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineCoverageModulationStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(coverageModulationMode)>("coverageModulationMode");
        addField<DAS_BIND_MANAGED_FIELD(coverageModulationTableEnable)>("coverageModulationTableEnable");
        addField<DAS_BIND_MANAGED_FIELD(coverageModulationTableCount)>("coverageModulationTableCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV);
struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV,true,true> {
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderSMBuiltinsPropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderSMCount)>("shaderSMCount");
        addField<DAS_BIND_MANAGED_FIELD(shaderWarpsPerSM)>("shaderWarpsPerSM");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV);
struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV,true,true> {
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderSMBuiltinsFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderSMBuiltins)>("shaderSMBuiltins");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDrmFormatModifierPropertiesEXT, VkDrmFormatModifierPropertiesEXT);
struct VkDrmFormatModifierPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkDrmFormatModifierPropertiesEXT,true,true> {
    VkDrmFormatModifierPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDrmFormatModifierPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierPlaneCount)>("drmFormatModifierPlaneCount");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierTilingFeatures)>("drmFormatModifierTilingFeatures");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDrmFormatModifierPropertiesListEXT, VkDrmFormatModifierPropertiesListEXT);
struct VkDrmFormatModifierPropertiesListEXTAnnotation
: public ManagedStructureAnnotation<VkDrmFormatModifierPropertiesListEXT,true,true> {
    VkDrmFormatModifierPropertiesListEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDrmFormatModifierPropertiesListEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierCount)>("drmFormatModifierCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, VkPhysicalDeviceImageDrmFormatModifierInfoEXT);
struct VkPhysicalDeviceImageDrmFormatModifierInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceImageDrmFormatModifierInfoEXT,true,true> {
    VkPhysicalDeviceImageDrmFormatModifierInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceImageDrmFormatModifierInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(sharingMode)>("sharingMode");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndexCount)>("queueFamilyIndexCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageDrmFormatModifierListCreateInfoEXT, VkImageDrmFormatModifierListCreateInfoEXT);
struct VkImageDrmFormatModifierListCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkImageDrmFormatModifierListCreateInfoEXT,true,true> {
    VkImageDrmFormatModifierListCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageDrmFormatModifierListCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierCount)>("drmFormatModifierCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageDrmFormatModifierExplicitCreateInfoEXT, VkImageDrmFormatModifierExplicitCreateInfoEXT);
struct VkImageDrmFormatModifierExplicitCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkImageDrmFormatModifierExplicitCreateInfoEXT,true,true> {
    VkImageDrmFormatModifierExplicitCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageDrmFormatModifierExplicitCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierPlaneCount)>("drmFormatModifierPlaneCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImageDrmFormatModifierPropertiesEXT, VkImageDrmFormatModifierPropertiesEXT);
struct VkImageDrmFormatModifierPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkImageDrmFormatModifierPropertiesEXT,true,true> {
    VkImageDrmFormatModifierPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageDrmFormatModifierPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkValidationCacheCreateInfoEXT, VkValidationCacheCreateInfoEXT);
struct VkValidationCacheCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkValidationCacheCreateInfoEXT,true,true> {
    VkValidationCacheCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkValidationCacheCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkShaderModuleValidationCacheCreateInfoEXT, VkShaderModuleValidationCacheCreateInfoEXT);
struct VkShaderModuleValidationCacheCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkShaderModuleValidationCacheCreateInfoEXT,true,true> {
    VkShaderModuleValidationCacheCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkShaderModuleValidationCacheCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkShadingRatePaletteNV, VkShadingRatePaletteNV);
struct VkShadingRatePaletteNVAnnotation
: public ManagedStructureAnnotation<VkShadingRatePaletteNV,true,true> {
    VkShadingRatePaletteNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkShadingRatePaletteNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(shadingRatePaletteEntryCount)>("shadingRatePaletteEntryCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineViewportShadingRateImageStateCreateInfoNV, VkPipelineViewportShadingRateImageStateCreateInfoNV);
struct VkPipelineViewportShadingRateImageStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineViewportShadingRateImageStateCreateInfoNV,true,true> {
    VkPipelineViewportShadingRateImageStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineViewportShadingRateImageStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateImageEnable)>("shadingRateImageEnable");
        addField<DAS_BIND_MANAGED_FIELD(viewportCount)>("viewportCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShadingRateImageFeaturesNV, VkPhysicalDeviceShadingRateImageFeaturesNV);
struct VkPhysicalDeviceShadingRateImageFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShadingRateImageFeaturesNV,true,true> {
    VkPhysicalDeviceShadingRateImageFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShadingRateImageFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateImage)>("shadingRateImage");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateCoarseSampleOrder)>("shadingRateCoarseSampleOrder");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShadingRateImagePropertiesNV, VkPhysicalDeviceShadingRateImagePropertiesNV);
struct VkPhysicalDeviceShadingRateImagePropertiesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShadingRateImagePropertiesNV,true,true> {
    VkPhysicalDeviceShadingRateImagePropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShadingRateImagePropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateTexelSize)>("shadingRateTexelSize");
        addField<DAS_BIND_MANAGED_FIELD(shadingRatePaletteSize)>("shadingRatePaletteSize");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateMaxCoarseSamples)>("shadingRateMaxCoarseSamples");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCoarseSampleLocationNV, VkCoarseSampleLocationNV);
struct VkCoarseSampleLocationNVAnnotation
: public ManagedStructureAnnotation<VkCoarseSampleLocationNV,true,true> {
    VkCoarseSampleLocationNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCoarseSampleLocationNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(pixelX)>("pixelX");
        addField<DAS_BIND_MANAGED_FIELD(pixelY)>("pixelY");
        addField<DAS_BIND_MANAGED_FIELD(sample)>("sample");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCoarseSampleOrderCustomNV, VkCoarseSampleOrderCustomNV);
struct VkCoarseSampleOrderCustomNVAnnotation
: public ManagedStructureAnnotation<VkCoarseSampleOrderCustomNV,true,true> {
    VkCoarseSampleOrderCustomNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCoarseSampleOrderCustomNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(shadingRate)>("shadingRate");
        addField<DAS_BIND_MANAGED_FIELD(sampleCount)>("sampleCount");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationCount)>("sampleLocationCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV);
struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,true,true> {
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineViewportCoarseSampleOrderStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(sampleOrderType)>("sampleOrderType");
        addField<DAS_BIND_MANAGED_FIELD(customSampleOrderCount)>("customSampleOrderCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRayTracingShaderGroupCreateInfoNV, VkRayTracingShaderGroupCreateInfoNV);
struct VkRayTracingShaderGroupCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkRayTracingShaderGroupCreateInfoNV,true,true> {
    VkRayTracingShaderGroupCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRayTracingShaderGroupCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type");
        addField<DAS_BIND_MANAGED_FIELD(generalShader)>("generalShader");
        addField<DAS_BIND_MANAGED_FIELD(closestHitShader)>("closestHitShader");
        addField<DAS_BIND_MANAGED_FIELD(anyHitShader)>("anyHitShader");
        addField<DAS_BIND_MANAGED_FIELD(intersectionShader)>("intersectionShader");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRayTracingPipelineCreateInfoNV, VkRayTracingPipelineCreateInfoNV);
struct VkRayTracingPipelineCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkRayTracingPipelineCreateInfoNV,true,true> {
    VkRayTracingPipelineCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRayTracingPipelineCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(stageCount)>("stageCount");
        addField<DAS_BIND_MANAGED_FIELD(groupCount)>("groupCount");
        addField<DAS_BIND_MANAGED_FIELD(maxRecursionDepth)>("maxRecursionDepth");
        addField<DAS_BIND_MANAGED_FIELD(basePipelineIndex)>("basePipelineIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkGeometryTrianglesNV, VkGeometryTrianglesNV);
struct VkGeometryTrianglesNVAnnotation
: public ManagedStructureAnnotation<VkGeometryTrianglesNV,true,true> {
    VkGeometryTrianglesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeometryTrianglesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(vertexCount)>("vertexCount");
        addField<DAS_BIND_MANAGED_FIELD(vertexFormat)>("vertexFormat");
        addField<DAS_BIND_MANAGED_FIELD(indexCount)>("indexCount");
        addField<DAS_BIND_MANAGED_FIELD(indexType)>("indexType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkGeometryAABBNV, VkGeometryAABBNV);
struct VkGeometryAABBNVAnnotation
: public ManagedStructureAnnotation<VkGeometryAABBNV,true,true> {
    VkGeometryAABBNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeometryAABBNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(numAABBs)>("numAABBs");
        addField<DAS_BIND_MANAGED_FIELD(stride)>("stride");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkGeometryDataNV, VkGeometryDataNV);
struct VkGeometryDataNVAnnotation
: public ManagedStructureAnnotation<VkGeometryDataNV,true,true> {
    VkGeometryDataNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeometryDataNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(triangles)>("triangles");
        addField<DAS_BIND_MANAGED_FIELD(aabbs)>("aabbs");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkGeometryNV, VkGeometryNV);
struct VkGeometryNVAnnotation
: public ManagedStructureAnnotation<VkGeometryNV,true,true> {
    VkGeometryNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeometryNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(geometryType)>("geometryType");
        addField<DAS_BIND_MANAGED_FIELD(geometry)>("geometry");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAccelerationStructureInfoNV, VkAccelerationStructureInfoNV);
struct VkAccelerationStructureInfoNVAnnotation
: public ManagedStructureAnnotation<VkAccelerationStructureInfoNV,true,true> {
    VkAccelerationStructureInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAccelerationStructureInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(instanceCount)>("instanceCount");
        addField<DAS_BIND_MANAGED_FIELD(geometryCount)>("geometryCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAccelerationStructureCreateInfoNV, VkAccelerationStructureCreateInfoNV);
struct VkAccelerationStructureCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkAccelerationStructureCreateInfoNV,true,true> {
    VkAccelerationStructureCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAccelerationStructureCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(info)>("info");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindAccelerationStructureMemoryInfoKHR, VkBindAccelerationStructureMemoryInfoKHR);
struct VkBindAccelerationStructureMemoryInfoKHRAnnotation
: public ManagedStructureAnnotation<VkBindAccelerationStructureMemoryInfoKHR,true,true> {
    VkBindAccelerationStructureMemoryInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindAccelerationStructureMemoryInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceIndexCount)>("deviceIndexCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkWriteDescriptorSetAccelerationStructureKHR, VkWriteDescriptorSetAccelerationStructureKHR);
struct VkWriteDescriptorSetAccelerationStructureKHRAnnotation
: public ManagedStructureAnnotation<VkWriteDescriptorSetAccelerationStructureKHR,true,true> {
    VkWriteDescriptorSetAccelerationStructureKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkWriteDescriptorSetAccelerationStructureKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(accelerationStructureCount)>("accelerationStructureCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAccelerationStructureMemoryRequirementsInfoNV, VkAccelerationStructureMemoryRequirementsInfoNV);
struct VkAccelerationStructureMemoryRequirementsInfoNVAnnotation
: public ManagedStructureAnnotation<VkAccelerationStructureMemoryRequirementsInfoNV,true,true> {
    VkAccelerationStructureMemoryRequirementsInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAccelerationStructureMemoryRequirementsInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceRayTracingPropertiesNV, VkPhysicalDeviceRayTracingPropertiesNV);
struct VkPhysicalDeviceRayTracingPropertiesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceRayTracingPropertiesNV,true,true> {
    VkPhysicalDeviceRayTracingPropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceRayTracingPropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderGroupHandleSize)>("shaderGroupHandleSize");
        addField<DAS_BIND_MANAGED_FIELD(maxRecursionDepth)>("maxRecursionDepth");
        addField<DAS_BIND_MANAGED_FIELD(maxShaderGroupStride)>("maxShaderGroupStride");
        addField<DAS_BIND_MANAGED_FIELD(shaderGroupBaseAlignment)>("shaderGroupBaseAlignment");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetAccelerationStructures)>("maxDescriptorSetAccelerationStructures");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkTransformMatrixKHR, VkTransformMatrixKHR);
struct VkTransformMatrixKHRAnnotation
: public ManagedStructureAnnotation<VkTransformMatrixKHR,true,true> {
    VkTransformMatrixKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkTransformMatrixKHR", ml) {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAabbPositionsKHR, VkAabbPositionsKHR);
struct VkAabbPositionsKHRAnnotation
: public ManagedStructureAnnotation<VkAabbPositionsKHR,true,true> {
    VkAabbPositionsKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAabbPositionsKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(minX)>("minX");
        addField<DAS_BIND_MANAGED_FIELD(minY)>("minY");
        addField<DAS_BIND_MANAGED_FIELD(minZ)>("minZ");
        addField<DAS_BIND_MANAGED_FIELD(maxX)>("maxX");
        addField<DAS_BIND_MANAGED_FIELD(maxY)>("maxY");
        addField<DAS_BIND_MANAGED_FIELD(maxZ)>("maxZ");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkAccelerationStructureInstanceKHR, VkAccelerationStructureInstanceKHR);
struct VkAccelerationStructureInstanceKHRAnnotation
: public ManagedStructureAnnotation<VkAccelerationStructureInstanceKHR,true,true> {
    VkAccelerationStructureInstanceKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAccelerationStructureInstanceKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(transform)>("transform");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV);
struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV,true,true> {
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(representativeFragmentTest)>("representativeFragmentTest");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, VkPipelineRepresentativeFragmentTestStateCreateInfoNV);
struct VkPipelineRepresentativeFragmentTestStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineRepresentativeFragmentTestStateCreateInfoNV,true,true> {
    VkPipelineRepresentativeFragmentTestStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineRepresentativeFragmentTestStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(representativeFragmentTestEnable)>("representativeFragmentTestEnable");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceImageViewImageFormatInfoEXT, VkPhysicalDeviceImageViewImageFormatInfoEXT);
struct VkPhysicalDeviceImageViewImageFormatInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceImageViewImageFormatInfoEXT,true,true> {
    VkPhysicalDeviceImageViewImageFormatInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceImageViewImageFormatInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(imageViewType)>("imageViewType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkFilterCubicImageViewImageFormatPropertiesEXT, VkFilterCubicImageViewImageFormatPropertiesEXT);
struct VkFilterCubicImageViewImageFormatPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkFilterCubicImageViewImageFormatPropertiesEXT,true,true> {
    VkFilterCubicImageViewImageFormatPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFilterCubicImageViewImageFormatPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(filterCubic)>("filterCubic");
        addField<DAS_BIND_MANAGED_FIELD(filterCubicMinmax)>("filterCubicMinmax");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceQueueGlobalPriorityCreateInfoEXT, VkDeviceQueueGlobalPriorityCreateInfoEXT);
struct VkDeviceQueueGlobalPriorityCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDeviceQueueGlobalPriorityCreateInfoEXT,true,true> {
    VkDeviceQueueGlobalPriorityCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceQueueGlobalPriorityCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(globalPriority)>("globalPriority");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkImportMemoryHostPointerInfoEXT, VkImportMemoryHostPointerInfoEXT);
struct VkImportMemoryHostPointerInfoEXTAnnotation
: public ManagedStructureAnnotation<VkImportMemoryHostPointerInfoEXT,true,true> {
    VkImportMemoryHostPointerInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportMemoryHostPointerInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryHostPointerPropertiesEXT, VkMemoryHostPointerPropertiesEXT);
struct VkMemoryHostPointerPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkMemoryHostPointerPropertiesEXT,true,true> {
    VkMemoryHostPointerPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryHostPointerPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(memoryTypeBits)>("memoryTypeBits");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, VkPhysicalDeviceExternalMemoryHostPropertiesEXT);
struct VkPhysicalDeviceExternalMemoryHostPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceExternalMemoryHostPropertiesEXT,true,true> {
    VkPhysicalDeviceExternalMemoryHostPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceExternalMemoryHostPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineCompilerControlCreateInfoAMD, VkPipelineCompilerControlCreateInfoAMD);
struct VkPipelineCompilerControlCreateInfoAMDAnnotation
: public ManagedStructureAnnotation<VkPipelineCompilerControlCreateInfoAMD,true,true> {
    VkPipelineCompilerControlCreateInfoAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineCompilerControlCreateInfoAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(compilerControlFlags)>("compilerControlFlags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCalibratedTimestampInfoEXT, VkCalibratedTimestampInfoEXT);
struct VkCalibratedTimestampInfoEXTAnnotation
: public ManagedStructureAnnotation<VkCalibratedTimestampInfoEXT,true,true> {
    VkCalibratedTimestampInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCalibratedTimestampInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(timeDomain)>("timeDomain");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderCorePropertiesAMD, VkPhysicalDeviceShaderCorePropertiesAMD);
struct VkPhysicalDeviceShaderCorePropertiesAMDAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderCorePropertiesAMD,true,true> {
    VkPhysicalDeviceShaderCorePropertiesAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderCorePropertiesAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderEngineCount)>("shaderEngineCount");
        addField<DAS_BIND_MANAGED_FIELD(shaderArraysPerEngineCount)>("shaderArraysPerEngineCount");
        addField<DAS_BIND_MANAGED_FIELD(computeUnitsPerShaderArray)>("computeUnitsPerShaderArray");
        addField<DAS_BIND_MANAGED_FIELD(simdPerComputeUnit)>("simdPerComputeUnit");
        addField<DAS_BIND_MANAGED_FIELD(wavefrontsPerSimd)>("wavefrontsPerSimd");
        addField<DAS_BIND_MANAGED_FIELD(wavefrontSize)>("wavefrontSize");
        addField<DAS_BIND_MANAGED_FIELD(sgprsPerSimd)>("sgprsPerSimd");
        addField<DAS_BIND_MANAGED_FIELD(minSgprAllocation)>("minSgprAllocation");
        addField<DAS_BIND_MANAGED_FIELD(maxSgprAllocation)>("maxSgprAllocation");
        addField<DAS_BIND_MANAGED_FIELD(sgprAllocationGranularity)>("sgprAllocationGranularity");
        addField<DAS_BIND_MANAGED_FIELD(vgprsPerSimd)>("vgprsPerSimd");
        addField<DAS_BIND_MANAGED_FIELD(minVgprAllocation)>("minVgprAllocation");
        addField<DAS_BIND_MANAGED_FIELD(maxVgprAllocation)>("maxVgprAllocation");
        addField<DAS_BIND_MANAGED_FIELD(vgprAllocationGranularity)>("vgprAllocationGranularity");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceMemoryOverallocationCreateInfoAMD, VkDeviceMemoryOverallocationCreateInfoAMD);
struct VkDeviceMemoryOverallocationCreateInfoAMDAnnotation
: public ManagedStructureAnnotation<VkDeviceMemoryOverallocationCreateInfoAMD,true,true> {
    VkDeviceMemoryOverallocationCreateInfoAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceMemoryOverallocationCreateInfoAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(overallocationBehavior)>("overallocationBehavior");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT);
struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,true,true> {
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxVertexAttribDivisor)>("maxVertexAttribDivisor");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkVertexInputBindingDivisorDescriptionEXT, VkVertexInputBindingDivisorDescriptionEXT);
struct VkVertexInputBindingDivisorDescriptionEXTAnnotation
: public ManagedStructureAnnotation<VkVertexInputBindingDivisorDescriptionEXT,true,true> {
    VkVertexInputBindingDivisorDescriptionEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkVertexInputBindingDivisorDescriptionEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(binding)>("binding");
        addField<DAS_BIND_MANAGED_FIELD(divisor)>("divisor");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineVertexInputDivisorStateCreateInfoEXT, VkPipelineVertexInputDivisorStateCreateInfoEXT);
struct VkPipelineVertexInputDivisorStateCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineVertexInputDivisorStateCreateInfoEXT,true,true> {
    VkPipelineVertexInputDivisorStateCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineVertexInputDivisorStateCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(vertexBindingDivisorCount)>("vertexBindingDivisorCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT);
struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT,true,true> {
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(vertexAttributeInstanceRateDivisor)>("vertexAttributeInstanceRateDivisor");
        addField<DAS_BIND_MANAGED_FIELD(vertexAttributeInstanceRateZeroDivisor)>("vertexAttributeInstanceRateZeroDivisor");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineCreationFeedbackEXT, VkPipelineCreationFeedbackEXT);
struct VkPipelineCreationFeedbackEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineCreationFeedbackEXT,true,true> {
    VkPipelineCreationFeedbackEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineCreationFeedbackEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineCreationFeedbackCreateInfoEXT, VkPipelineCreationFeedbackCreateInfoEXT);
struct VkPipelineCreationFeedbackCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineCreationFeedbackCreateInfoEXT,true,true> {
    VkPipelineCreationFeedbackCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineCreationFeedbackCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pipelineStageCreationFeedbackCount)>("pipelineStageCreationFeedbackCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV);
struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV,true,true> {
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceComputeShaderDerivativesFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(computeDerivativeGroupQuads)>("computeDerivativeGroupQuads");
        addField<DAS_BIND_MANAGED_FIELD(computeDerivativeGroupLinear)>("computeDerivativeGroupLinear");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMeshShaderFeaturesNV, VkPhysicalDeviceMeshShaderFeaturesNV);
struct VkPhysicalDeviceMeshShaderFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMeshShaderFeaturesNV,true,true> {
    VkPhysicalDeviceMeshShaderFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMeshShaderFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(taskShader)>("taskShader");
        addField<DAS_BIND_MANAGED_FIELD(meshShader)>("meshShader");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMeshShaderPropertiesNV, VkPhysicalDeviceMeshShaderPropertiesNV);
struct VkPhysicalDeviceMeshShaderPropertiesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMeshShaderPropertiesNV,true,true> {
    VkPhysicalDeviceMeshShaderPropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMeshShaderPropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxDrawMeshTasksCount)>("maxDrawMeshTasksCount");
        addField<DAS_BIND_MANAGED_FIELD(maxTaskWorkGroupInvocations)>("maxTaskWorkGroupInvocations");
        addField<DAS_BIND_MANAGED_FIELD(maxTaskTotalMemorySize)>("maxTaskTotalMemorySize");
        addField<DAS_BIND_MANAGED_FIELD(maxTaskOutputCount)>("maxTaskOutputCount");
        addField<DAS_BIND_MANAGED_FIELD(maxMeshWorkGroupInvocations)>("maxMeshWorkGroupInvocations");
        addField<DAS_BIND_MANAGED_FIELD(maxMeshTotalMemorySize)>("maxMeshTotalMemorySize");
        addField<DAS_BIND_MANAGED_FIELD(maxMeshOutputVertices)>("maxMeshOutputVertices");
        addField<DAS_BIND_MANAGED_FIELD(maxMeshOutputPrimitives)>("maxMeshOutputPrimitives");
        addField<DAS_BIND_MANAGED_FIELD(maxMeshMultiviewViewCount)>("maxMeshMultiviewViewCount");
        addField<DAS_BIND_MANAGED_FIELD(meshOutputPerVertexGranularity)>("meshOutputPerVertexGranularity");
        addField<DAS_BIND_MANAGED_FIELD(meshOutputPerPrimitiveGranularity)>("meshOutputPerPrimitiveGranularity");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDrawMeshTasksIndirectCommandNV, VkDrawMeshTasksIndirectCommandNV);
struct VkDrawMeshTasksIndirectCommandNVAnnotation
: public ManagedStructureAnnotation<VkDrawMeshTasksIndirectCommandNV,true,true> {
    VkDrawMeshTasksIndirectCommandNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDrawMeshTasksIndirectCommandNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(taskCount)>("taskCount");
        addField<DAS_BIND_MANAGED_FIELD(firstTask)>("firstTask");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV, VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV);
struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV,true,true> {
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShaderBarycentric)>("fragmentShaderBarycentric");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderImageFootprintFeaturesNV, VkPhysicalDeviceShaderImageFootprintFeaturesNV);
struct VkPhysicalDeviceShaderImageFootprintFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderImageFootprintFeaturesNV,true,true> {
    VkPhysicalDeviceShaderImageFootprintFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderImageFootprintFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(imageFootprint)>("imageFootprint");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineViewportExclusiveScissorStateCreateInfoNV, VkPipelineViewportExclusiveScissorStateCreateInfoNV);
struct VkPipelineViewportExclusiveScissorStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineViewportExclusiveScissorStateCreateInfoNV,true,true> {
    VkPipelineViewportExclusiveScissorStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineViewportExclusiveScissorStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(exclusiveScissorCount)>("exclusiveScissorCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceExclusiveScissorFeaturesNV, VkPhysicalDeviceExclusiveScissorFeaturesNV);
struct VkPhysicalDeviceExclusiveScissorFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceExclusiveScissorFeaturesNV,true,true> {
    VkPhysicalDeviceExclusiveScissorFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceExclusiveScissorFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(exclusiveScissor)>("exclusiveScissor");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkQueueFamilyCheckpointPropertiesNV, VkQueueFamilyCheckpointPropertiesNV);
struct VkQueueFamilyCheckpointPropertiesNVAnnotation
: public ManagedStructureAnnotation<VkQueueFamilyCheckpointPropertiesNV,true,true> {
    VkQueueFamilyCheckpointPropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkQueueFamilyCheckpointPropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(checkpointExecutionStageMask)>("checkpointExecutionStageMask");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCheckpointDataNV, VkCheckpointDataNV);
struct VkCheckpointDataNVAnnotation
: public ManagedStructureAnnotation<VkCheckpointDataNV,true,true> {
    VkCheckpointDataNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCheckpointDataNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(stage)>("stage");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL);
struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL,true,true> {
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderIntegerFunctions2)>("shaderIntegerFunctions2");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPerformanceValueINTEL, VkPerformanceValueINTEL);
struct VkPerformanceValueINTELAnnotation
: public ManagedStructureAnnotation<VkPerformanceValueINTEL,true,true> {
    VkPerformanceValueINTELAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceValueINTEL", ml) {
        addField<DAS_BIND_MANAGED_FIELD(type)>("type");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkInitializePerformanceApiInfoINTEL, VkInitializePerformanceApiInfoINTEL);
struct VkInitializePerformanceApiInfoINTELAnnotation
: public ManagedStructureAnnotation<VkInitializePerformanceApiInfoINTEL,true,true> {
    VkInitializePerformanceApiInfoINTELAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkInitializePerformanceApiInfoINTEL", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkQueryPoolPerformanceQueryCreateInfoINTEL, VkQueryPoolPerformanceQueryCreateInfoINTEL);
struct VkQueryPoolPerformanceQueryCreateInfoINTELAnnotation
: public ManagedStructureAnnotation<VkQueryPoolPerformanceQueryCreateInfoINTEL,true,true> {
    VkQueryPoolPerformanceQueryCreateInfoINTELAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkQueryPoolPerformanceQueryCreateInfoINTEL", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(performanceCountersSampling)>("performanceCountersSampling");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPerformanceMarkerInfoINTEL, VkPerformanceMarkerInfoINTEL);
struct VkPerformanceMarkerInfoINTELAnnotation
: public ManagedStructureAnnotation<VkPerformanceMarkerInfoINTEL,true,true> {
    VkPerformanceMarkerInfoINTELAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceMarkerInfoINTEL", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPerformanceStreamMarkerInfoINTEL, VkPerformanceStreamMarkerInfoINTEL);
struct VkPerformanceStreamMarkerInfoINTELAnnotation
: public ManagedStructureAnnotation<VkPerformanceStreamMarkerInfoINTEL,true,true> {
    VkPerformanceStreamMarkerInfoINTELAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceStreamMarkerInfoINTEL", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(marker)>("marker");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPerformanceOverrideInfoINTEL, VkPerformanceOverrideInfoINTEL);
struct VkPerformanceOverrideInfoINTELAnnotation
: public ManagedStructureAnnotation<VkPerformanceOverrideInfoINTEL,true,true> {
    VkPerformanceOverrideInfoINTELAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceOverrideInfoINTEL", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type");
        addField<DAS_BIND_MANAGED_FIELD(enable)>("enable");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPerformanceConfigurationAcquireInfoINTEL, VkPerformanceConfigurationAcquireInfoINTEL);
struct VkPerformanceConfigurationAcquireInfoINTELAnnotation
: public ManagedStructureAnnotation<VkPerformanceConfigurationAcquireInfoINTEL,true,true> {
    VkPerformanceConfigurationAcquireInfoINTELAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceConfigurationAcquireInfoINTEL", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevicePCIBusInfoPropertiesEXT, VkPhysicalDevicePCIBusInfoPropertiesEXT);
struct VkPhysicalDevicePCIBusInfoPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePCIBusInfoPropertiesEXT,true,true> {
    VkPhysicalDevicePCIBusInfoPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePCIBusInfoPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pciDomain)>("pciDomain");
        addField<DAS_BIND_MANAGED_FIELD(pciBus)>("pciBus");
        addField<DAS_BIND_MANAGED_FIELD(pciDevice)>("pciDevice");
        addField<DAS_BIND_MANAGED_FIELD(pciFunction)>("pciFunction");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDisplayNativeHdrSurfaceCapabilitiesAMD, VkDisplayNativeHdrSurfaceCapabilitiesAMD);
struct VkDisplayNativeHdrSurfaceCapabilitiesAMDAnnotation
: public ManagedStructureAnnotation<VkDisplayNativeHdrSurfaceCapabilitiesAMD,true,true> {
    VkDisplayNativeHdrSurfaceCapabilitiesAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayNativeHdrSurfaceCapabilitiesAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(localDimmingSupport)>("localDimmingSupport");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSwapchainDisplayNativeHdrCreateInfoAMD, VkSwapchainDisplayNativeHdrCreateInfoAMD);
struct VkSwapchainDisplayNativeHdrCreateInfoAMDAnnotation
: public ManagedStructureAnnotation<VkSwapchainDisplayNativeHdrCreateInfoAMD,true,true> {
    VkSwapchainDisplayNativeHdrCreateInfoAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSwapchainDisplayNativeHdrCreateInfoAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(localDimmingEnable)>("localDimmingEnable");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, VkPhysicalDeviceFragmentDensityMapFeaturesEXT);
struct VkPhysicalDeviceFragmentDensityMapFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMapFeaturesEXT,true,true> {
    VkPhysicalDeviceFragmentDensityMapFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFragmentDensityMapFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(fragmentDensityMap)>("fragmentDensityMap");
        addField<DAS_BIND_MANAGED_FIELD(fragmentDensityMapDynamic)>("fragmentDensityMapDynamic");
        addField<DAS_BIND_MANAGED_FIELD(fragmentDensityMapNonSubsampledImages)>("fragmentDensityMapNonSubsampledImages");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, VkPhysicalDeviceFragmentDensityMapPropertiesEXT);
struct VkPhysicalDeviceFragmentDensityMapPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMapPropertiesEXT,true,true> {
    VkPhysicalDeviceFragmentDensityMapPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFragmentDensityMapPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(minFragmentDensityTexelSize)>("minFragmentDensityTexelSize");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentDensityTexelSize)>("maxFragmentDensityTexelSize");
        addField<DAS_BIND_MANAGED_FIELD(fragmentDensityInvocations)>("fragmentDensityInvocations");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRenderPassFragmentDensityMapCreateInfoEXT, VkRenderPassFragmentDensityMapCreateInfoEXT);
struct VkRenderPassFragmentDensityMapCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkRenderPassFragmentDensityMapCreateInfoEXT,true,true> {
    VkRenderPassFragmentDensityMapCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassFragmentDensityMapCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(fragmentDensityMapAttachment)>("fragmentDensityMapAttachment");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT, VkPhysicalDeviceSubgroupSizeControlFeaturesEXT);
struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT,true,true> {
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSubgroupSizeControlFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(subgroupSizeControl)>("subgroupSizeControl");
        addField<DAS_BIND_MANAGED_FIELD(computeFullSubgroups)>("computeFullSubgroups");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT, VkPhysicalDeviceSubgroupSizeControlPropertiesEXT);
struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT,true,true> {
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSubgroupSizeControlPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(minSubgroupSize)>("minSubgroupSize");
        addField<DAS_BIND_MANAGED_FIELD(maxSubgroupSize)>("maxSubgroupSize");
        addField<DAS_BIND_MANAGED_FIELD(maxComputeWorkgroupSubgroups)>("maxComputeWorkgroupSubgroups");
        addField<DAS_BIND_MANAGED_FIELD(requiredSubgroupSizeStages)>("requiredSubgroupSizeStages");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT, VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT);
struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT,true,true> {
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(requiredSubgroupSize)>("requiredSubgroupSize");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderCoreProperties2AMD, VkPhysicalDeviceShaderCoreProperties2AMD);
struct VkPhysicalDeviceShaderCoreProperties2AMDAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderCoreProperties2AMD,true,true> {
    VkPhysicalDeviceShaderCoreProperties2AMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderCoreProperties2AMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderCoreFeatures)>("shaderCoreFeatures");
        addField<DAS_BIND_MANAGED_FIELD(activeComputeUnitCount)>("activeComputeUnitCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceCoherentMemoryFeaturesAMD, VkPhysicalDeviceCoherentMemoryFeaturesAMD);
struct VkPhysicalDeviceCoherentMemoryFeaturesAMDAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceCoherentMemoryFeaturesAMD,true,true> {
    VkPhysicalDeviceCoherentMemoryFeaturesAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceCoherentMemoryFeaturesAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceCoherentMemory)>("deviceCoherentMemory");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMemoryBudgetPropertiesEXT, VkPhysicalDeviceMemoryBudgetPropertiesEXT);
struct VkPhysicalDeviceMemoryBudgetPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMemoryBudgetPropertiesEXT,true,true> {
    VkPhysicalDeviceMemoryBudgetPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMemoryBudgetPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceMemoryPriorityFeaturesEXT, VkPhysicalDeviceMemoryPriorityFeaturesEXT);
struct VkPhysicalDeviceMemoryPriorityFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMemoryPriorityFeaturesEXT,true,true> {
    VkPhysicalDeviceMemoryPriorityFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMemoryPriorityFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(memoryPriority)>("memoryPriority");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkMemoryPriorityAllocateInfoEXT, VkMemoryPriorityAllocateInfoEXT);
struct VkMemoryPriorityAllocateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkMemoryPriorityAllocateInfoEXT,true,true> {
    VkMemoryPriorityAllocateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryPriorityAllocateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(priority)>("priority");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV);
struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,true,true> {
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(dedicatedAllocationImageAliasing)>("dedicatedAllocationImageAliasing");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT);
struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT,true,true> {
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceBufferDeviceAddressFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(bufferDeviceAddress)>("bufferDeviceAddress");
        addField<DAS_BIND_MANAGED_FIELD(bufferDeviceAddressCaptureReplay)>("bufferDeviceAddressCaptureReplay");
        addField<DAS_BIND_MANAGED_FIELD(bufferDeviceAddressMultiDevice)>("bufferDeviceAddressMultiDevice");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBufferDeviceAddressCreateInfoEXT, VkBufferDeviceAddressCreateInfoEXT);
struct VkBufferDeviceAddressCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkBufferDeviceAddressCreateInfoEXT,true,true> {
    VkBufferDeviceAddressCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferDeviceAddressCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceToolPropertiesEXT, VkPhysicalDeviceToolPropertiesEXT);
struct VkPhysicalDeviceToolPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceToolPropertiesEXT,true,true> {
    VkPhysicalDeviceToolPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceToolPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(purposes)>("purposes");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkValidationFeaturesEXT, VkValidationFeaturesEXT);
struct VkValidationFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkValidationFeaturesEXT,true,true> {
    VkValidationFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkValidationFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(enabledValidationFeatureCount)>("enabledValidationFeatureCount");
        addField<DAS_BIND_MANAGED_FIELD(disabledValidationFeatureCount)>("disabledValidationFeatureCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCooperativeMatrixPropertiesNV, VkCooperativeMatrixPropertiesNV);
struct VkCooperativeMatrixPropertiesNVAnnotation
: public ManagedStructureAnnotation<VkCooperativeMatrixPropertiesNV,true,true> {
    VkCooperativeMatrixPropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCooperativeMatrixPropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(MSize)>("MSize");
        addField<DAS_BIND_MANAGED_FIELD(NSize)>("NSize");
        addField<DAS_BIND_MANAGED_FIELD(KSize)>("KSize");
        addField<DAS_BIND_MANAGED_FIELD(AType)>("AType");
        addField<DAS_BIND_MANAGED_FIELD(BType)>("BType");
        addField<DAS_BIND_MANAGED_FIELD(CType)>("CType");
        addField<DAS_BIND_MANAGED_FIELD(DType)>("DType");
        addField<DAS_BIND_MANAGED_FIELD(scope)>("scope");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceCooperativeMatrixFeaturesNV, VkPhysicalDeviceCooperativeMatrixFeaturesNV);
struct VkPhysicalDeviceCooperativeMatrixFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceCooperativeMatrixFeaturesNV,true,true> {
    VkPhysicalDeviceCooperativeMatrixFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceCooperativeMatrixFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(cooperativeMatrix)>("cooperativeMatrix");
        addField<DAS_BIND_MANAGED_FIELD(cooperativeMatrixRobustBufferAccess)>("cooperativeMatrixRobustBufferAccess");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceCooperativeMatrixPropertiesNV, VkPhysicalDeviceCooperativeMatrixPropertiesNV);
struct VkPhysicalDeviceCooperativeMatrixPropertiesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceCooperativeMatrixPropertiesNV,true,true> {
    VkPhysicalDeviceCooperativeMatrixPropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceCooperativeMatrixPropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(cooperativeMatrixSupportedStages)>("cooperativeMatrixSupportedStages");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceCoverageReductionModeFeaturesNV, VkPhysicalDeviceCoverageReductionModeFeaturesNV);
struct VkPhysicalDeviceCoverageReductionModeFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceCoverageReductionModeFeaturesNV,true,true> {
    VkPhysicalDeviceCoverageReductionModeFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceCoverageReductionModeFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(coverageReductionMode)>("coverageReductionMode");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineCoverageReductionStateCreateInfoNV, VkPipelineCoverageReductionStateCreateInfoNV);
struct VkPipelineCoverageReductionStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineCoverageReductionStateCreateInfoNV,true,true> {
    VkPipelineCoverageReductionStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineCoverageReductionStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(coverageReductionMode)>("coverageReductionMode");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkFramebufferMixedSamplesCombinationNV, VkFramebufferMixedSamplesCombinationNV);
struct VkFramebufferMixedSamplesCombinationNVAnnotation
: public ManagedStructureAnnotation<VkFramebufferMixedSamplesCombinationNV,true,true> {
    VkFramebufferMixedSamplesCombinationNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFramebufferMixedSamplesCombinationNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(coverageReductionMode)>("coverageReductionMode");
        addField<DAS_BIND_MANAGED_FIELD(rasterizationSamples)>("rasterizationSamples");
        addField<DAS_BIND_MANAGED_FIELD(depthStencilSamples)>("depthStencilSamples");
        addField<DAS_BIND_MANAGED_FIELD(colorSamples)>("colorSamples");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT);
struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT,true,true> {
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShaderSampleInterlock)>("fragmentShaderSampleInterlock");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShaderPixelInterlock)>("fragmentShaderPixelInterlock");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShaderShadingRateInterlock)>("fragmentShaderShadingRateInterlock");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT);
struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT,true,true> {
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceYcbcrImageArraysFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(ycbcrImageArrays)>("ycbcrImageArrays");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkHeadlessSurfaceCreateInfoEXT, VkHeadlessSurfaceCreateInfoEXT);
struct VkHeadlessSurfaceCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkHeadlessSurfaceCreateInfoEXT,true,true> {
    VkHeadlessSurfaceCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkHeadlessSurfaceCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceLineRasterizationFeaturesEXT, VkPhysicalDeviceLineRasterizationFeaturesEXT);
struct VkPhysicalDeviceLineRasterizationFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceLineRasterizationFeaturesEXT,true,true> {
    VkPhysicalDeviceLineRasterizationFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceLineRasterizationFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(rectangularLines)>("rectangularLines");
        addField<DAS_BIND_MANAGED_FIELD(bresenhamLines)>("bresenhamLines");
        addField<DAS_BIND_MANAGED_FIELD(smoothLines)>("smoothLines");
        addField<DAS_BIND_MANAGED_FIELD(stippledRectangularLines)>("stippledRectangularLines");
        addField<DAS_BIND_MANAGED_FIELD(stippledBresenhamLines)>("stippledBresenhamLines");
        addField<DAS_BIND_MANAGED_FIELD(stippledSmoothLines)>("stippledSmoothLines");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceLineRasterizationPropertiesEXT, VkPhysicalDeviceLineRasterizationPropertiesEXT);
struct VkPhysicalDeviceLineRasterizationPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceLineRasterizationPropertiesEXT,true,true> {
    VkPhysicalDeviceLineRasterizationPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceLineRasterizationPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(lineSubPixelPrecisionBits)>("lineSubPixelPrecisionBits");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPipelineRasterizationLineStateCreateInfoEXT, VkPipelineRasterizationLineStateCreateInfoEXT);
struct VkPipelineRasterizationLineStateCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPipelineRasterizationLineStateCreateInfoEXT,true,true> {
    VkPipelineRasterizationLineStateCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineRasterizationLineStateCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(lineRasterizationMode)>("lineRasterizationMode");
        addField<DAS_BIND_MANAGED_FIELD(stippledLineEnable)>("stippledLineEnable");
        addField<DAS_BIND_MANAGED_FIELD(lineStippleFactor)>("lineStippleFactor");
        addField<DAS_BIND_MANAGED_FIELD(lineStipplePattern)>("lineStipplePattern");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT);
struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,true,true> {
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderAtomicFloatFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderBufferFloat32Atomics)>("shaderBufferFloat32Atomics");
        addField<DAS_BIND_MANAGED_FIELD(shaderBufferFloat32AtomicAdd)>("shaderBufferFloat32AtomicAdd");
        addField<DAS_BIND_MANAGED_FIELD(shaderBufferFloat64Atomics)>("shaderBufferFloat64Atomics");
        addField<DAS_BIND_MANAGED_FIELD(shaderBufferFloat64AtomicAdd)>("shaderBufferFloat64AtomicAdd");
        addField<DAS_BIND_MANAGED_FIELD(shaderSharedFloat32Atomics)>("shaderSharedFloat32Atomics");
        addField<DAS_BIND_MANAGED_FIELD(shaderSharedFloat32AtomicAdd)>("shaderSharedFloat32AtomicAdd");
        addField<DAS_BIND_MANAGED_FIELD(shaderSharedFloat64Atomics)>("shaderSharedFloat64Atomics");
        addField<DAS_BIND_MANAGED_FIELD(shaderSharedFloat64AtomicAdd)>("shaderSharedFloat64AtomicAdd");
        addField<DAS_BIND_MANAGED_FIELD(shaderImageFloat32Atomics)>("shaderImageFloat32Atomics");
        addField<DAS_BIND_MANAGED_FIELD(shaderImageFloat32AtomicAdd)>("shaderImageFloat32AtomicAdd");
        addField<DAS_BIND_MANAGED_FIELD(sparseImageFloat32Atomics)>("sparseImageFloat32Atomics");
        addField<DAS_BIND_MANAGED_FIELD(sparseImageFloat32AtomicAdd)>("sparseImageFloat32AtomicAdd");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, VkPhysicalDeviceIndexTypeUint8FeaturesEXT);
struct VkPhysicalDeviceIndexTypeUint8FeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceIndexTypeUint8FeaturesEXT,true,true> {
    VkPhysicalDeviceIndexTypeUint8FeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceIndexTypeUint8FeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(indexTypeUint8)>("indexTypeUint8");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT);
struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT,true,true> {
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceExtendedDynamicStateFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(extendedDynamicState)>("extendedDynamicState");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT, VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT);
struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT,true,true> {
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(shaderDemoteToHelperInvocation)>("shaderDemoteToHelperInvocation");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV);
struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV,true,true> {
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxGraphicsShaderGroupCount)>("maxGraphicsShaderGroupCount");
        addField<DAS_BIND_MANAGED_FIELD(maxIndirectSequenceCount)>("maxIndirectSequenceCount");
        addField<DAS_BIND_MANAGED_FIELD(maxIndirectCommandsTokenCount)>("maxIndirectCommandsTokenCount");
        addField<DAS_BIND_MANAGED_FIELD(maxIndirectCommandsStreamCount)>("maxIndirectCommandsStreamCount");
        addField<DAS_BIND_MANAGED_FIELD(maxIndirectCommandsTokenOffset)>("maxIndirectCommandsTokenOffset");
        addField<DAS_BIND_MANAGED_FIELD(maxIndirectCommandsStreamStride)>("maxIndirectCommandsStreamStride");
        addField<DAS_BIND_MANAGED_FIELD(minSequencesCountBufferOffsetAlignment)>("minSequencesCountBufferOffsetAlignment");
        addField<DAS_BIND_MANAGED_FIELD(minSequencesIndexBufferOffsetAlignment)>("minSequencesIndexBufferOffsetAlignment");
        addField<DAS_BIND_MANAGED_FIELD(minIndirectCommandsBufferOffsetAlignment)>("minIndirectCommandsBufferOffsetAlignment");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV);
struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV,true,true> {
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(deviceGeneratedCommands)>("deviceGeneratedCommands");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkGraphicsShaderGroupCreateInfoNV, VkGraphicsShaderGroupCreateInfoNV);
struct VkGraphicsShaderGroupCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkGraphicsShaderGroupCreateInfoNV,true,true> {
    VkGraphicsShaderGroupCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGraphicsShaderGroupCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(stageCount)>("stageCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkGraphicsPipelineShaderGroupsCreateInfoNV, VkGraphicsPipelineShaderGroupsCreateInfoNV);
struct VkGraphicsPipelineShaderGroupsCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkGraphicsPipelineShaderGroupsCreateInfoNV,true,true> {
    VkGraphicsPipelineShaderGroupsCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGraphicsPipelineShaderGroupsCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(groupCount)>("groupCount");
        addField<DAS_BIND_MANAGED_FIELD(pipelineCount)>("pipelineCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindShaderGroupIndirectCommandNV, VkBindShaderGroupIndirectCommandNV);
struct VkBindShaderGroupIndirectCommandNVAnnotation
: public ManagedStructureAnnotation<VkBindShaderGroupIndirectCommandNV,true,true> {
    VkBindShaderGroupIndirectCommandNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindShaderGroupIndirectCommandNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(groupIndex)>("groupIndex");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindIndexBufferIndirectCommandNV, VkBindIndexBufferIndirectCommandNV);
struct VkBindIndexBufferIndirectCommandNVAnnotation
: public ManagedStructureAnnotation<VkBindIndexBufferIndirectCommandNV,true,true> {
    VkBindIndexBufferIndirectCommandNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindIndexBufferIndirectCommandNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(size)>("size");
        addField<DAS_BIND_MANAGED_FIELD(indexType)>("indexType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkBindVertexBufferIndirectCommandNV, VkBindVertexBufferIndirectCommandNV);
struct VkBindVertexBufferIndirectCommandNVAnnotation
: public ManagedStructureAnnotation<VkBindVertexBufferIndirectCommandNV,true,true> {
    VkBindVertexBufferIndirectCommandNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindVertexBufferIndirectCommandNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(size)>("size");
        addField<DAS_BIND_MANAGED_FIELD(stride)>("stride");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSetStateFlagsIndirectCommandNV, VkSetStateFlagsIndirectCommandNV);
struct VkSetStateFlagsIndirectCommandNVAnnotation
: public ManagedStructureAnnotation<VkSetStateFlagsIndirectCommandNV,true,true> {
    VkSetStateFlagsIndirectCommandNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSetStateFlagsIndirectCommandNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(data)>("data");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkIndirectCommandsStreamNV, VkIndirectCommandsStreamNV);
struct VkIndirectCommandsStreamNVAnnotation
: public ManagedStructureAnnotation<VkIndirectCommandsStreamNV,true,true> {
    VkIndirectCommandsStreamNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkIndirectCommandsStreamNV", ml) {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkIndirectCommandsLayoutTokenNV, VkIndirectCommandsLayoutTokenNV);
struct VkIndirectCommandsLayoutTokenNVAnnotation
: public ManagedStructureAnnotation<VkIndirectCommandsLayoutTokenNV,true,true> {
    VkIndirectCommandsLayoutTokenNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkIndirectCommandsLayoutTokenNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(tokenType)>("tokenType");
        addField<DAS_BIND_MANAGED_FIELD(stream)>("stream");
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
        addField<DAS_BIND_MANAGED_FIELD(vertexBindingUnit)>("vertexBindingUnit");
        addField<DAS_BIND_MANAGED_FIELD(vertexDynamicStride)>("vertexDynamicStride");
        addField<DAS_BIND_MANAGED_FIELD(pushconstantShaderStageFlags)>("pushconstantShaderStageFlags");
        addField<DAS_BIND_MANAGED_FIELD(pushconstantOffset)>("pushconstantOffset");
        addField<DAS_BIND_MANAGED_FIELD(pushconstantSize)>("pushconstantSize");
        addField<DAS_BIND_MANAGED_FIELD(indirectStateFlags)>("indirectStateFlags");
        addField<DAS_BIND_MANAGED_FIELD(indexTypeCount)>("indexTypeCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkIndirectCommandsLayoutCreateInfoNV, VkIndirectCommandsLayoutCreateInfoNV);
struct VkIndirectCommandsLayoutCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkIndirectCommandsLayoutCreateInfoNV,true,true> {
    VkIndirectCommandsLayoutCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkIndirectCommandsLayoutCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(pipelineBindPoint)>("pipelineBindPoint");
        addField<DAS_BIND_MANAGED_FIELD(tokenCount)>("tokenCount");
        addField<DAS_BIND_MANAGED_FIELD(streamCount)>("streamCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkGeneratedCommandsInfoNV, VkGeneratedCommandsInfoNV);
struct VkGeneratedCommandsInfoNVAnnotation
: public ManagedStructureAnnotation<VkGeneratedCommandsInfoNV,true,true> {
    VkGeneratedCommandsInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeneratedCommandsInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pipelineBindPoint)>("pipelineBindPoint");
        addField<DAS_BIND_MANAGED_FIELD(streamCount)>("streamCount");
        addField<DAS_BIND_MANAGED_FIELD(sequencesCount)>("sequencesCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkGeneratedCommandsMemoryRequirementsInfoNV, VkGeneratedCommandsMemoryRequirementsInfoNV);
struct VkGeneratedCommandsMemoryRequirementsInfoNVAnnotation
: public ManagedStructureAnnotation<VkGeneratedCommandsMemoryRequirementsInfoNV,true,true> {
    VkGeneratedCommandsMemoryRequirementsInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeneratedCommandsMemoryRequirementsInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pipelineBindPoint)>("pipelineBindPoint");
        addField<DAS_BIND_MANAGED_FIELD(maxSequencesCount)>("maxSequencesCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT);
struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT,true,true> {
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(texelBufferAlignment)>("texelBufferAlignment");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT, VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT);
struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT,true,true> {
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(storageTexelBufferOffsetSingleTexelAlignment)>("storageTexelBufferOffsetSingleTexelAlignment");
        addField<DAS_BIND_MANAGED_FIELD(uniformTexelBufferOffsetSingleTexelAlignment)>("uniformTexelBufferOffsetSingleTexelAlignment");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkRenderPassTransformBeginInfoQCOM, VkRenderPassTransformBeginInfoQCOM);
struct VkRenderPassTransformBeginInfoQCOMAnnotation
: public ManagedStructureAnnotation<VkRenderPassTransformBeginInfoQCOM,true,true> {
    VkRenderPassTransformBeginInfoQCOMAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassTransformBeginInfoQCOM", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(transform)>("transform");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, VkCommandBufferInheritanceRenderPassTransformInfoQCOM);
struct VkCommandBufferInheritanceRenderPassTransformInfoQCOMAnnotation
: public ManagedStructureAnnotation<VkCommandBufferInheritanceRenderPassTransformInfoQCOM,true,true> {
    VkCommandBufferInheritanceRenderPassTransformInfoQCOMAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCommandBufferInheritanceRenderPassTransformInfoQCOM", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(transform)>("transform");
        addField<DAS_BIND_MANAGED_FIELD(renderArea)>("renderArea");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceRobustness2FeaturesEXT, VkPhysicalDeviceRobustness2FeaturesEXT);
struct VkPhysicalDeviceRobustness2FeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceRobustness2FeaturesEXT,true,true> {
    VkPhysicalDeviceRobustness2FeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceRobustness2FeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(robustBufferAccess2)>("robustBufferAccess2");
        addField<DAS_BIND_MANAGED_FIELD(robustImageAccess2)>("robustImageAccess2");
        addField<DAS_BIND_MANAGED_FIELD(nullDescriptor)>("nullDescriptor");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceRobustness2PropertiesEXT, VkPhysicalDeviceRobustness2PropertiesEXT);
struct VkPhysicalDeviceRobustness2PropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceRobustness2PropertiesEXT,true,true> {
    VkPhysicalDeviceRobustness2PropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceRobustness2PropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkSamplerCustomBorderColorCreateInfoEXT, VkSamplerCustomBorderColorCreateInfoEXT);
struct VkSamplerCustomBorderColorCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkSamplerCustomBorderColorCreateInfoEXT,true,true> {
    VkSamplerCustomBorderColorCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSamplerCustomBorderColorCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceCustomBorderColorPropertiesEXT, VkPhysicalDeviceCustomBorderColorPropertiesEXT);
struct VkPhysicalDeviceCustomBorderColorPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceCustomBorderColorPropertiesEXT,true,true> {
    VkPhysicalDeviceCustomBorderColorPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceCustomBorderColorPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(maxCustomBorderColorSamplers)>("maxCustomBorderColorSamplers");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceCustomBorderColorFeaturesEXT, VkPhysicalDeviceCustomBorderColorFeaturesEXT);
struct VkPhysicalDeviceCustomBorderColorFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceCustomBorderColorFeaturesEXT,true,true> {
    VkPhysicalDeviceCustomBorderColorFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceCustomBorderColorFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(customBorderColors)>("customBorderColors");
        addField<DAS_BIND_MANAGED_FIELD(customBorderColorWithoutFormat)>("customBorderColorWithoutFormat");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevicePrivateDataFeaturesEXT, VkPhysicalDevicePrivateDataFeaturesEXT);
struct VkPhysicalDevicePrivateDataFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePrivateDataFeaturesEXT,true,true> {
    VkPhysicalDevicePrivateDataFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePrivateDataFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(privateData)>("privateData");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDevicePrivateDataCreateInfoEXT, VkDevicePrivateDataCreateInfoEXT);
struct VkDevicePrivateDataCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDevicePrivateDataCreateInfoEXT,true,true> {
    VkDevicePrivateDataCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDevicePrivateDataCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(privateDataSlotRequestCount)>("privateDataSlotRequestCount");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPrivateDataSlotCreateInfoEXT, VkPrivateDataSlotCreateInfoEXT);
struct VkPrivateDataSlotCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPrivateDataSlotCreateInfoEXT,true,true> {
    VkPrivateDataSlotCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPrivateDataSlotCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT, VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT);
struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT,true,true> {
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pipelineCreationCacheControl)>("pipelineCreationCacheControl");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, VkPhysicalDeviceDiagnosticsConfigFeaturesNV);
struct VkPhysicalDeviceDiagnosticsConfigFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceDiagnosticsConfigFeaturesNV,true,true> {
    VkPhysicalDeviceDiagnosticsConfigFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceDiagnosticsConfigFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(diagnosticsConfig)>("diagnosticsConfig");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkDeviceDiagnosticsConfigCreateInfoNV, VkDeviceDiagnosticsConfigCreateInfoNV);
struct VkDeviceDiagnosticsConfigCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkDeviceDiagnosticsConfigCreateInfoNV,true,true> {
    VkDeviceDiagnosticsConfigCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceDiagnosticsConfigCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT);
struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT,true,true> {
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFragmentDensityMap2FeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(fragmentDensityMapDeferred)>("fragmentDensityMapDeferred");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT);
struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT,true,true> {
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFragmentDensityMap2PropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(subsampledLoads)>("subsampledLoads");
        addField<DAS_BIND_MANAGED_FIELD(subsampledCoarseReconstructionEarlyAccess)>("subsampledCoarseReconstructionEarlyAccess");
        addField<DAS_BIND_MANAGED_FIELD(maxSubsampledArrayLayers)>("maxSubsampledArrayLayers");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetSubsampledSamplers)>("maxDescriptorSetSubsampledSamplers");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};
MAKE_TYPE_FACTORY(VkPhysicalDeviceImageRobustnessFeaturesEXT, VkPhysicalDeviceImageRobustnessFeaturesEXT);
struct VkPhysicalDeviceImageRobustnessFeaturesEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceImageRobustnessFeaturesEXT,true,true> {
    VkPhysicalDeviceImageRobustnessFeaturesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceImageRobustnessFeaturesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(robustImageAccess)>("robustImageAccess");
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
};

class Module_vulkan : public Module {
public:
    Module_vulkan() : Module("vulkan") {
        ModuleLibrary lib;
        lib.addModule(this);
        lib.addBuiltInModule();

        //
        // enums
        //

        addEnumeration(make_smart<EnumerationVkResult>());
        addEnumeration(make_smart<EnumerationVkStructureType>());
        addEnumeration(make_smart<EnumerationVkImageLayout>());
        addEnumeration(make_smart<EnumerationVkObjectType>());
        addEnumeration(make_smart<EnumerationVkVendorId>());
        addEnumeration(make_smart<EnumerationVkPipelineCacheHeaderVersion>());
        addEnumeration(make_smart<EnumerationVkSystemAllocationScope>());
        addEnumeration(make_smart<EnumerationVkInternalAllocationType>());
        addEnumeration(make_smart<EnumerationVkFormat>());
        addEnumeration(make_smart<EnumerationVkImageTiling>());
        addEnumeration(make_smart<EnumerationVkImageType>());
        addEnumeration(make_smart<EnumerationVkPhysicalDeviceType>());
        addEnumeration(make_smart<EnumerationVkQueryType>());
        addEnumeration(make_smart<EnumerationVkSharingMode>());
        addEnumeration(make_smart<EnumerationVkComponentSwizzle>());
        addEnumeration(make_smart<EnumerationVkImageViewType>());
        addEnumeration(make_smart<EnumerationVkBlendFactor>());
        addEnumeration(make_smart<EnumerationVkBlendOp>());
        addEnumeration(make_smart<EnumerationVkCompareOp>());
        addEnumeration(make_smart<EnumerationVkDynamicState>());
        addEnumeration(make_smart<EnumerationVkFrontFace>());
        addEnumeration(make_smart<EnumerationVkVertexInputRate>());
        addEnumeration(make_smart<EnumerationVkPrimitiveTopology>());
        addEnumeration(make_smart<EnumerationVkPolygonMode>());
        addEnumeration(make_smart<EnumerationVkStencilOp>());
        addEnumeration(make_smart<EnumerationVkLogicOp>());
        addEnumeration(make_smart<EnumerationVkBorderColor>());
        addEnumeration(make_smart<EnumerationVkFilter>());
        addEnumeration(make_smart<EnumerationVkSamplerAddressMode>());
        addEnumeration(make_smart<EnumerationVkSamplerMipmapMode>());
        addEnumeration(make_smart<EnumerationVkDescriptorType>());
        addEnumeration(make_smart<EnumerationVkAttachmentLoadOp>());
        addEnumeration(make_smart<EnumerationVkAttachmentStoreOp>());
        addEnumeration(make_smart<EnumerationVkPipelineBindPoint>());
        addEnumeration(make_smart<EnumerationVkCommandBufferLevel>());
        addEnumeration(make_smart<EnumerationVkIndexType>());
        addEnumeration(make_smart<EnumerationVkSubpassContents>());
        addEnumeration(make_smart<EnumerationVkAccessFlagBits>());
        addEnumeration(make_smart<EnumerationVkImageAspectFlagBits>());
        addEnumeration(make_smart<EnumerationVkFormatFeatureFlagBits>());
        addEnumeration(make_smart<EnumerationVkImageCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkSampleCountFlagBits>());
        addEnumeration(make_smart<EnumerationVkImageUsageFlagBits>());
        addEnumeration(make_smart<EnumerationVkMemoryHeapFlagBits>());
        addEnumeration(make_smart<EnumerationVkMemoryPropertyFlagBits>());
        addEnumeration(make_smart<EnumerationVkQueueFlagBits>());
        addEnumeration(make_smart<EnumerationVkDeviceQueueCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkPipelineStageFlagBits>());
        addEnumeration(make_smart<EnumerationVkSparseMemoryBindFlagBits>());
        addEnumeration(make_smart<EnumerationVkSparseImageFormatFlagBits>());
        addEnumeration(make_smart<EnumerationVkFenceCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkQueryPipelineStatisticFlagBits>());
        addEnumeration(make_smart<EnumerationVkQueryResultFlagBits>());
        addEnumeration(make_smart<EnumerationVkBufferCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkBufferUsageFlagBits>());
        addEnumeration(make_smart<EnumerationVkImageViewCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkShaderModuleCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkPipelineCacheCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkColorComponentFlagBits>());
        addEnumeration(make_smart<EnumerationVkPipelineCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkPipelineShaderStageCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkShaderStageFlagBits>());
        addEnumeration(make_smart<EnumerationVkCullModeFlagBits>());
        addEnumeration(make_smart<EnumerationVkSamplerCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkDescriptorPoolCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkDescriptorSetLayoutCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkAttachmentDescriptionFlagBits>());
        addEnumeration(make_smart<EnumerationVkDependencyFlagBits>());
        addEnumeration(make_smart<EnumerationVkFramebufferCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkRenderPassCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkSubpassDescriptionFlagBits>());
        addEnumeration(make_smart<EnumerationVkCommandPoolCreateFlagBits>());
        addEnumeration(make_smart<EnumerationVkCommandPoolResetFlagBits>());
        addEnumeration(make_smart<EnumerationVkCommandBufferUsageFlagBits>());
        addEnumeration(make_smart<EnumerationVkQueryControlFlagBits>());
        addEnumeration(make_smart<EnumerationVkCommandBufferResetFlagBits>());
        addEnumeration(make_smart<EnumerationVkStencilFaceFlagBits>());
        addEnumeration(make_smart<EnumerationVkPointClippingBehavior>());
        addEnumeration(make_smart<EnumerationVkTessellationDomainOrigin>());
        addEnumeration(make_smart<EnumerationVkSamplerYcbcrModelConversion>());
        addEnumeration(make_smart<EnumerationVkSamplerYcbcrRange>());
        addEnumeration(make_smart<EnumerationVkChromaLocation>());
        addEnumeration(make_smart<EnumerationVkDescriptorUpdateTemplateType>());
        addEnumeration(make_smart<EnumerationVkSubgroupFeatureFlagBits>());
        addEnumeration(make_smart<EnumerationVkPeerMemoryFeatureFlagBits>());
        addEnumeration(make_smart<EnumerationVkMemoryAllocateFlagBits>());
        addEnumeration(make_smart<EnumerationVkExternalMemoryHandleTypeFlagBits>());
        addEnumeration(make_smart<EnumerationVkExternalMemoryFeatureFlagBits>());
        addEnumeration(make_smart<EnumerationVkExternalFenceHandleTypeFlagBits>());
        addEnumeration(make_smart<EnumerationVkExternalFenceFeatureFlagBits>());
        addEnumeration(make_smart<EnumerationVkFenceImportFlagBits>());
        addEnumeration(make_smart<EnumerationVkSemaphoreImportFlagBits>());
        addEnumeration(make_smart<EnumerationVkExternalSemaphoreHandleTypeFlagBits>());
        addEnumeration(make_smart<EnumerationVkExternalSemaphoreFeatureFlagBits>());
        addEnumeration(make_smart<EnumerationVkDriverId>());
        addEnumeration(make_smart<EnumerationVkShaderFloatControlsIndependence>());
        addEnumeration(make_smart<EnumerationVkSamplerReductionMode>());
        addEnumeration(make_smart<EnumerationVkSemaphoreType>());
        addEnumeration(make_smart<EnumerationVkResolveModeFlagBits>());
        addEnumeration(make_smart<EnumerationVkDescriptorBindingFlagBits>());
        addEnumeration(make_smart<EnumerationVkSemaphoreWaitFlagBits>());
        addEnumeration(make_smart<EnumerationVkPresentModeKHR>());
        addEnumeration(make_smart<EnumerationVkColorSpaceKHR>());
        addEnumeration(make_smart<EnumerationVkSurfaceTransformFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkCompositeAlphaFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkSwapchainCreateFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkDeviceGroupPresentModeFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkDisplayPlaneAlphaFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkPerformanceCounterUnitKHR>());
        addEnumeration(make_smart<EnumerationVkPerformanceCounterScopeKHR>());
        addEnumeration(make_smart<EnumerationVkPerformanceCounterStorageKHR>());
        addEnumeration(make_smart<EnumerationVkPerformanceCounterDescriptionFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkAcquireProfilingLockFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkPipelineExecutableStatisticFormatKHR>());
        addEnumeration(make_smart<EnumerationVkDebugReportObjectTypeEXT>());
        addEnumeration(make_smart<EnumerationVkDebugReportFlagBitsEXT>());
        addEnumeration(make_smart<EnumerationVkRasterizationOrderAMD>());
        addEnumeration(make_smart<EnumerationVkShaderInfoTypeAMD>());
        addEnumeration(make_smart<EnumerationVkExternalMemoryHandleTypeFlagBitsNV>());
        addEnumeration(make_smart<EnumerationVkExternalMemoryFeatureFlagBitsNV>());
        addEnumeration(make_smart<EnumerationVkValidationCheckEXT>());
        addEnumeration(make_smart<EnumerationVkConditionalRenderingFlagBitsEXT>());
        addEnumeration(make_smart<EnumerationVkSurfaceCounterFlagBitsEXT>());
        addEnumeration(make_smart<EnumerationVkDisplayPowerStateEXT>());
        addEnumeration(make_smart<EnumerationVkDeviceEventTypeEXT>());
        addEnumeration(make_smart<EnumerationVkDisplayEventTypeEXT>());
        addEnumeration(make_smart<EnumerationVkViewportCoordinateSwizzleNV>());
        addEnumeration(make_smart<EnumerationVkDiscardRectangleModeEXT>());
        addEnumeration(make_smart<EnumerationVkConservativeRasterizationModeEXT>());
        addEnumeration(make_smart<EnumerationVkDebugUtilsMessageSeverityFlagBitsEXT>());
        addEnumeration(make_smart<EnumerationVkDebugUtilsMessageTypeFlagBitsEXT>());
        addEnumeration(make_smart<EnumerationVkBlendOverlapEXT>());
        addEnumeration(make_smart<EnumerationVkCoverageModulationModeNV>());
        addEnumeration(make_smart<EnumerationVkValidationCacheHeaderVersionEXT>());
        addEnumeration(make_smart<EnumerationVkShadingRatePaletteEntryNV>());
        addEnumeration(make_smart<EnumerationVkCoarseSampleOrderTypeNV>());
        addEnumeration(make_smart<EnumerationVkRayTracingShaderGroupTypeKHR>());
        addEnumeration(make_smart<EnumerationVkGeometryTypeKHR>());
        addEnumeration(make_smart<EnumerationVkAccelerationStructureTypeKHR>());
        addEnumeration(make_smart<EnumerationVkCopyAccelerationStructureModeKHR>());
        addEnumeration(make_smart<EnumerationVkAccelerationStructureMemoryRequirementsTypeKHR>());
        addEnumeration(make_smart<EnumerationVkGeometryFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkGeometryInstanceFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkBuildAccelerationStructureFlagBitsKHR>());
        addEnumeration(make_smart<EnumerationVkQueueGlobalPriorityEXT>());
        addEnumeration(make_smart<EnumerationVkPipelineCompilerControlFlagBitsAMD>());
        addEnumeration(make_smart<EnumerationVkTimeDomainEXT>());
        addEnumeration(make_smart<EnumerationVkMemoryOverallocationBehaviorAMD>());
        addEnumeration(make_smart<EnumerationVkPipelineCreationFeedbackFlagBitsEXT>());
        addEnumeration(make_smart<EnumerationVkPerformanceConfigurationTypeINTEL>());
        addEnumeration(make_smart<EnumerationVkQueryPoolSamplingModeINTEL>());
        addEnumeration(make_smart<EnumerationVkPerformanceOverrideTypeINTEL>());
        addEnumeration(make_smart<EnumerationVkPerformanceParameterTypeINTEL>());
        addEnumeration(make_smart<EnumerationVkPerformanceValueTypeINTEL>());
        addEnumeration(make_smart<EnumerationVkShaderCorePropertiesFlagBitsAMD>());
        addEnumeration(make_smart<EnumerationVkToolPurposeFlagBitsEXT>());
        addEnumeration(make_smart<EnumerationVkValidationFeatureEnableEXT>());
        addEnumeration(make_smart<EnumerationVkValidationFeatureDisableEXT>());
        addEnumeration(make_smart<EnumerationVkComponentTypeNV>());
        addEnumeration(make_smart<EnumerationVkScopeNV>());
        addEnumeration(make_smart<EnumerationVkCoverageReductionModeNV>());
        addEnumeration(make_smart<EnumerationVkLineRasterizationModeEXT>());
        addEnumeration(make_smart<EnumerationVkIndirectCommandsTokenTypeNV>());
        addEnumeration(make_smart<EnumerationVkIndirectStateFlagBitsNV>());
        addEnumeration(make_smart<EnumerationVkIndirectCommandsLayoutUsageFlagBitsNV>());
        addEnumeration(make_smart<EnumerationVkPrivateDataSlotCreateFlagBitsEXT>());
        addEnumeration(make_smart<EnumerationVkDeviceDiagnosticsConfigFlagBitsNV>());

        //
        // structs
        //

        addAnnotation(make_smart<VkExtent2DAnnotation>(lib));
        addAnnotation(make_smart<VkExtent3DAnnotation>(lib));
        addAnnotation(make_smart<VkOffset2DAnnotation>(lib));
        addAnnotation(make_smart<VkOffset3DAnnotation>(lib));
        addAnnotation(make_smart<VkRect2DAnnotation>(lib));
        addAnnotation(make_smart<VkBaseInStructureAnnotation>(lib));
        addAnnotation(make_smart<VkBaseOutStructureAnnotation>(lib));
        addAnnotation(make_smart<VkBufferMemoryBarrierAnnotation>(lib));
        addAnnotation(make_smart<VkDispatchIndirectCommandAnnotation>(lib));
        addAnnotation(make_smart<VkDrawIndexedIndirectCommandAnnotation>(lib));
        addAnnotation(make_smart<VkDrawIndirectCommandAnnotation>(lib));
        addAnnotation(make_smart<VkImageSubresourceRangeAnnotation>(lib));
        addAnnotation(make_smart<VkImageMemoryBarrierAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryBarrierAnnotation>(lib));
        addAnnotation(make_smart<VkAllocationCallbacksAnnotation>(lib));
        addAnnotation(make_smart<VkApplicationInfoAnnotation>(lib));
        addAnnotation(make_smart<VkFormatPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkImageFormatPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkInstanceCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryHeapAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryTypeAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceLimitsAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMemoryPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSparsePropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevicePropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkQueueFamilyPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceQueueCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkExtensionPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkLayerPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkSubmitInfoAnnotation>(lib));
        addAnnotation(make_smart<VkMappedMemoryRangeAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryAllocateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryRequirementsAnnotation>(lib));
        addAnnotation(make_smart<VkSparseMemoryBindAnnotation>(lib));
        addAnnotation(make_smart<VkSparseBufferMemoryBindInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSparseImageOpaqueMemoryBindInfoAnnotation>(lib));
        addAnnotation(make_smart<VkImageSubresourceAnnotation>(lib));
        addAnnotation(make_smart<VkSparseImageMemoryBindAnnotation>(lib));
        addAnnotation(make_smart<VkSparseImageMemoryBindInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBindSparseInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSparseImageFormatPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkSparseImageMemoryRequirementsAnnotation>(lib));
        addAnnotation(make_smart<VkFenceCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSemaphoreCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkEventCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkQueryPoolCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBufferCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBufferViewCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkImageCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSubresourceLayoutAnnotation>(lib));
        addAnnotation(make_smart<VkComponentMappingAnnotation>(lib));
        addAnnotation(make_smart<VkImageViewCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkShaderModuleCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineCacheCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSpecializationMapEntryAnnotation>(lib));
        addAnnotation(make_smart<VkSpecializationInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineShaderStageCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkComputePipelineCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkVertexInputBindingDescriptionAnnotation>(lib));
        addAnnotation(make_smart<VkVertexInputAttributeDescriptionAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineVertexInputStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineInputAssemblyStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineTessellationStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkViewportAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineViewportStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineRasterizationStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineMultisampleStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkStencilOpStateAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineDepthStencilStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineColorBlendAttachmentStateAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineColorBlendStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineDynamicStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkGraphicsPipelineCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPushConstantRangeAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineLayoutCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSamplerCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkCopyDescriptorSetAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorBufferInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorImageInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorPoolSizeAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorPoolCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorSetAllocateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorSetLayoutBindingAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorSetLayoutCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkWriteDescriptorSetAnnotation>(lib));
        addAnnotation(make_smart<VkAttachmentDescriptionAnnotation>(lib));
        addAnnotation(make_smart<VkAttachmentReferenceAnnotation>(lib));
        addAnnotation(make_smart<VkFramebufferCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSubpassDescriptionAnnotation>(lib));
        addAnnotation(make_smart<VkSubpassDependencyAnnotation>(lib));
        addAnnotation(make_smart<VkRenderPassCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkCommandPoolCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkCommandBufferAllocateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkCommandBufferInheritanceInfoAnnotation>(lib));
        addAnnotation(make_smart<VkCommandBufferBeginInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBufferCopyAnnotation>(lib));
        addAnnotation(make_smart<VkImageSubresourceLayersAnnotation>(lib));
        addAnnotation(make_smart<VkBufferImageCopyAnnotation>(lib));
        addAnnotation(make_smart<VkClearDepthStencilValueAnnotation>(lib));
        addAnnotation(make_smart<VkClearAttachmentAnnotation>(lib));
        addAnnotation(make_smart<VkClearRectAnnotation>(lib));
        addAnnotation(make_smart<VkImageBlitAnnotation>(lib));
        addAnnotation(make_smart<VkImageCopyAnnotation>(lib));
        addAnnotation(make_smart<VkImageResolveAnnotation>(lib));
        addAnnotation(make_smart<VkRenderPassBeginInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSubgroupPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkBindBufferMemoryInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBindImageMemoryInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevice16BitStorageFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryDedicatedRequirementsAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryDedicatedAllocateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryAllocateFlagsInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceGroupRenderPassBeginInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceGroupCommandBufferBeginInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceGroupSubmitInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceGroupBindSparseInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBindBufferMemoryDeviceGroupInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBindImageMemoryDeviceGroupInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceGroupPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceGroupDeviceCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBufferMemoryRequirementsInfo2Annotation>(lib));
        addAnnotation(make_smart<VkImageMemoryRequirementsInfo2Annotation>(lib));
        addAnnotation(make_smart<VkImageSparseMemoryRequirementsInfo2Annotation>(lib));
        addAnnotation(make_smart<VkMemoryRequirements2Annotation>(lib));
        addAnnotation(make_smart<VkSparseImageMemoryRequirements2Annotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceFeatures2Annotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceProperties2Annotation>(lib));
        addAnnotation(make_smart<VkFormatProperties2Annotation>(lib));
        addAnnotation(make_smart<VkImageFormatProperties2Annotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceImageFormatInfo2Annotation>(lib));
        addAnnotation(make_smart<VkQueueFamilyProperties2Annotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMemoryProperties2Annotation>(lib));
        addAnnotation(make_smart<VkSparseImageFormatProperties2Annotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSparseImageFormatInfo2Annotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevicePointClippingPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkInputAttachmentAspectReferenceAnnotation>(lib));
        addAnnotation(make_smart<VkRenderPassInputAttachmentAspectCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkImageViewUsageCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineTessellationDomainOriginStateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkRenderPassMultiviewCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMultiviewFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMultiviewPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceVariablePointersFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceProtectedMemoryFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceProtectedMemoryPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceQueueInfo2Annotation>(lib));
        addAnnotation(make_smart<VkProtectedSubmitInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSamplerYcbcrConversionCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSamplerYcbcrConversionInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBindImagePlaneMemoryInfoAnnotation>(lib));
        addAnnotation(make_smart<VkImagePlaneMemoryRequirementsInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSamplerYcbcrConversionFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkSamplerYcbcrConversionImageFormatPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorUpdateTemplateEntryAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorUpdateTemplateCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkExternalMemoryPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceExternalImageFormatInfoAnnotation>(lib));
        addAnnotation(make_smart<VkExternalImageFormatPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceExternalBufferInfoAnnotation>(lib));
        addAnnotation(make_smart<VkExternalBufferPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceIDPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkExternalMemoryImageCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkExternalMemoryBufferCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkExportMemoryAllocateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceExternalFenceInfoAnnotation>(lib));
        addAnnotation(make_smart<VkExternalFencePropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkExportFenceCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkExportSemaphoreCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceExternalSemaphoreInfoAnnotation>(lib));
        addAnnotation(make_smart<VkExternalSemaphorePropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMaintenance3PropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorSetLayoutSupportAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderDrawParametersFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceVulkan11FeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceVulkan11PropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceVulkan12FeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkConformanceVersionAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceVulkan12PropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkImageFormatListCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkAttachmentDescription2Annotation>(lib));
        addAnnotation(make_smart<VkAttachmentReference2Annotation>(lib));
        addAnnotation(make_smart<VkSubpassDescription2Annotation>(lib));
        addAnnotation(make_smart<VkSubpassDependency2Annotation>(lib));
        addAnnotation(make_smart<VkRenderPassCreateInfo2Annotation>(lib));
        addAnnotation(make_smart<VkSubpassBeginInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSubpassEndInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevice8BitStorageFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDriverPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderAtomicInt64FeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderFloat16Int8FeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceFloatControlsPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorSetLayoutBindingFlagsCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDescriptorIndexingFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDescriptorIndexingPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorSetVariableDescriptorCountAllocateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorSetVariableDescriptorCountLayoutSupportAnnotation>(lib));
        addAnnotation(make_smart<VkSubpassDescriptionDepthStencilResolveAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDepthStencilResolvePropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceScalarBlockLayoutFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkImageStencilUsageCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSamplerReductionModeCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSamplerFilterMinmaxPropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceVulkanMemoryModelFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceImagelessFramebufferFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkFramebufferAttachmentImageInfoAnnotation>(lib));
        addAnnotation(make_smart<VkFramebufferAttachmentsCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkRenderPassAttachmentBeginInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceUniformBufferStandardLayoutFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkAttachmentReferenceStencilLayoutAnnotation>(lib));
        addAnnotation(make_smart<VkAttachmentDescriptionStencilLayoutAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceHostQueryResetFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceTimelineSemaphoreFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceTimelineSemaphorePropertiesAnnotation>(lib));
        addAnnotation(make_smart<VkSemaphoreTypeCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkTimelineSemaphoreSubmitInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSemaphoreWaitInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSemaphoreSignalInfoAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceBufferDeviceAddressFeaturesAnnotation>(lib));
        addAnnotation(make_smart<VkBufferDeviceAddressInfoAnnotation>(lib));
        addAnnotation(make_smart<VkBufferOpaqueCaptureAddressCreateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryOpaqueCaptureAddressAllocateInfoAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceMemoryOpaqueCaptureAddressInfoAnnotation>(lib));
        addAnnotation(make_smart<VkSurfaceCapabilitiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkSurfaceFormatKHRAnnotation>(lib));
        addAnnotation(make_smart<VkSwapchainCreateInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPresentInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkImageSwapchainCreateInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkBindImageMemorySwapchainInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkAcquireNextImageInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceGroupPresentCapabilitiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceGroupPresentInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceGroupSwapchainCreateInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayModeParametersKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayModeCreateInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayModePropertiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayPlaneCapabilitiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayPlanePropertiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayPropertiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplaySurfaceCreateInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayPresentInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkImportMemoryFdInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryFdPropertiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryGetFdInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkImportSemaphoreFdInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkSemaphoreGetFdInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevicePushDescriptorPropertiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkRectLayerKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPresentRegionKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPresentRegionsKHRAnnotation>(lib));
        addAnnotation(make_smart<VkSharedPresentSurfaceCapabilitiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkImportFenceFdInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkFenceGetFdInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPerformanceCounterKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPerformanceCounterDescriptionKHRAnnotation>(lib));
        addAnnotation(make_smart<VkQueryPoolPerformanceCreateInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkAcquireProfilingLockInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPerformanceQuerySubmitInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSurfaceInfo2KHRAnnotation>(lib));
        addAnnotation(make_smart<VkSurfaceCapabilities2KHRAnnotation>(lib));
        addAnnotation(make_smart<VkSurfaceFormat2KHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayProperties2KHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayPlaneProperties2KHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayModeProperties2KHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayPlaneInfo2KHRAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayPlaneCapabilities2KHRAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderClockFeaturesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkSurfaceProtectedCapabilitiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineExecutablePropertiesKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineExecutableInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineExecutableStatisticKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineExecutableInternalRepresentationKHRAnnotation>(lib));
        addAnnotation(make_smart<VkDebugReportCallbackCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineRasterizationStateRasterizationOrderAMDAnnotation>(lib));
        addAnnotation(make_smart<VkDebugMarkerObjectNameInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDebugMarkerObjectTagInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDebugMarkerMarkerInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDedicatedAllocationImageCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkDedicatedAllocationBufferCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkDedicatedAllocationMemoryAllocateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceTransformFeedbackFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceTransformFeedbackPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineRasterizationStateStreamCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkImageViewHandleInfoNVXAnnotation>(lib));
        addAnnotation(make_smart<VkImageViewAddressPropertiesNVXAnnotation>(lib));
        addAnnotation(make_smart<VkTextureLODGatherFormatPropertiesAMDAnnotation>(lib));
        addAnnotation(make_smart<VkShaderResourceUsageAMDAnnotation>(lib));
        addAnnotation(make_smart<VkShaderStatisticsInfoAMDAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceCornerSampledImageFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkExternalImageFormatPropertiesNVAnnotation>(lib));
        addAnnotation(make_smart<VkExternalMemoryImageCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkExportMemoryAllocateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkValidationFlagsEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkImageViewASTCDecodeModeEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceASTCDecodeFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkConditionalRenderingBeginInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceConditionalRenderingFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkCommandBufferInheritanceConditionalRenderingInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkViewportWScalingNVAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineViewportWScalingStateCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkSurfaceCapabilities2EXTAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayPowerInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceEventInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayEventInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkSwapchainCounterCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkRefreshCycleDurationGOOGLEAnnotation>(lib));
        addAnnotation(make_smart<VkPastPresentationTimingGOOGLEAnnotation>(lib));
        addAnnotation(make_smart<VkPresentTimeGOOGLEAnnotation>(lib));
        addAnnotation(make_smart<VkPresentTimesInfoGOOGLEAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXAnnotation>(lib));
        addAnnotation(make_smart<VkViewportSwizzleNVAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineViewportSwizzleStateCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDiscardRectanglePropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineDiscardRectangleStateCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceConservativeRasterizationPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineRasterizationConservativeStateCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDepthClipEnableFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineRasterizationDepthClipStateCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkXYColorEXTAnnotation>(lib));
        addAnnotation(make_smart<VkHdrMetadataEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDebugUtilsLabelEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDebugUtilsObjectNameInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDebugUtilsMessengerCallbackDataEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDebugUtilsMessengerCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDebugUtilsObjectTagInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceInlineUniformBlockFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceInlineUniformBlockPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkWriteDescriptorSetInlineUniformBlockEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDescriptorPoolInlineUniformBlockCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkSampleLocationEXTAnnotation>(lib));
        addAnnotation(make_smart<VkSampleLocationsInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkAttachmentSampleLocationsEXTAnnotation>(lib));
        addAnnotation(make_smart<VkSubpassSampleLocationsEXTAnnotation>(lib));
        addAnnotation(make_smart<VkRenderPassSampleLocationsBeginInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineSampleLocationsStateCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSampleLocationsPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkMultisamplePropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineColorBlendAdvancedStateCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineCoverageToColorStateCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineCoverageModulationStateCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderSMBuiltinsPropertiesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderSMBuiltinsFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkDrmFormatModifierPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDrmFormatModifierPropertiesListEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceImageDrmFormatModifierInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkImageDrmFormatModifierListCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkImageDrmFormatModifierExplicitCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkImageDrmFormatModifierPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkValidationCacheCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkShaderModuleValidationCacheCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkShadingRatePaletteNVAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineViewportShadingRateImageStateCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShadingRateImageFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShadingRateImagePropertiesNVAnnotation>(lib));
        addAnnotation(make_smart<VkCoarseSampleLocationNVAnnotation>(lib));
        addAnnotation(make_smart<VkCoarseSampleOrderCustomNVAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineViewportCoarseSampleOrderStateCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkRayTracingShaderGroupCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkRayTracingPipelineCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkGeometryTrianglesNVAnnotation>(lib));
        addAnnotation(make_smart<VkGeometryAABBNVAnnotation>(lib));
        addAnnotation(make_smart<VkGeometryDataNVAnnotation>(lib));
        addAnnotation(make_smart<VkGeometryNVAnnotation>(lib));
        addAnnotation(make_smart<VkAccelerationStructureInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkAccelerationStructureCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkBindAccelerationStructureMemoryInfoKHRAnnotation>(lib));
        addAnnotation(make_smart<VkWriteDescriptorSetAccelerationStructureKHRAnnotation>(lib));
        addAnnotation(make_smart<VkAccelerationStructureMemoryRequirementsInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceRayTracingPropertiesNVAnnotation>(lib));
        addAnnotation(make_smart<VkTransformMatrixKHRAnnotation>(lib));
        addAnnotation(make_smart<VkAabbPositionsKHRAnnotation>(lib));
        addAnnotation(make_smart<VkAccelerationStructureInstanceKHRAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineRepresentativeFragmentTestStateCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceImageViewImageFormatInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkFilterCubicImageViewImageFormatPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceQueueGlobalPriorityCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkImportMemoryHostPointerInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryHostPointerPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceExternalMemoryHostPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineCompilerControlCreateInfoAMDAnnotation>(lib));
        addAnnotation(make_smart<VkCalibratedTimestampInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderCorePropertiesAMDAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceMemoryOverallocationCreateInfoAMDAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkVertexInputBindingDivisorDescriptionEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineVertexInputDivisorStateCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineCreationFeedbackEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineCreationFeedbackCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceComputeShaderDerivativesFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMeshShaderFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMeshShaderPropertiesNVAnnotation>(lib));
        addAnnotation(make_smart<VkDrawMeshTasksIndirectCommandNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderImageFootprintFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineViewportExclusiveScissorStateCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceExclusiveScissorFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkQueueFamilyCheckpointPropertiesNVAnnotation>(lib));
        addAnnotation(make_smart<VkCheckpointDataNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTELAnnotation>(lib));
        addAnnotation(make_smart<VkPerformanceValueINTELAnnotation>(lib));
        addAnnotation(make_smart<VkInitializePerformanceApiInfoINTELAnnotation>(lib));
        addAnnotation(make_smart<VkQueryPoolPerformanceQueryCreateInfoINTELAnnotation>(lib));
        addAnnotation(make_smart<VkPerformanceMarkerInfoINTELAnnotation>(lib));
        addAnnotation(make_smart<VkPerformanceStreamMarkerInfoINTELAnnotation>(lib));
        addAnnotation(make_smart<VkPerformanceOverrideInfoINTELAnnotation>(lib));
        addAnnotation(make_smart<VkPerformanceConfigurationAcquireInfoINTELAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevicePCIBusInfoPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDisplayNativeHdrSurfaceCapabilitiesAMDAnnotation>(lib));
        addAnnotation(make_smart<VkSwapchainDisplayNativeHdrCreateInfoAMDAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMapFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMapPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkRenderPassFragmentDensityMapCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSubgroupSizeControlFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceSubgroupSizeControlPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderCoreProperties2AMDAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceCoherentMemoryFeaturesAMDAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMemoryBudgetPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceMemoryPriorityFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkMemoryPriorityAllocateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceBufferDeviceAddressFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkBufferDeviceAddressCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceToolPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkValidationFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkCooperativeMatrixPropertiesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceCooperativeMatrixFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceCooperativeMatrixPropertiesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceCoverageReductionModeFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineCoverageReductionStateCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkFramebufferMixedSamplesCombinationNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceYcbcrImageArraysFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkHeadlessSurfaceCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceLineRasterizationFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceLineRasterizationPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPipelineRasterizationLineStateCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderAtomicFloatFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceIndexTypeUint8FeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceExtendedDynamicStateFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkGraphicsShaderGroupCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkGraphicsPipelineShaderGroupsCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkBindShaderGroupIndirectCommandNVAnnotation>(lib));
        addAnnotation(make_smart<VkBindIndexBufferIndirectCommandNVAnnotation>(lib));
        addAnnotation(make_smart<VkBindVertexBufferIndirectCommandNVAnnotation>(lib));
        addAnnotation(make_smart<VkSetStateFlagsIndirectCommandNVAnnotation>(lib));
        addAnnotation(make_smart<VkIndirectCommandsStreamNVAnnotation>(lib));
        addAnnotation(make_smart<VkIndirectCommandsLayoutTokenNVAnnotation>(lib));
        addAnnotation(make_smart<VkIndirectCommandsLayoutCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkGeneratedCommandsInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkGeneratedCommandsMemoryRequirementsInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkRenderPassTransformBeginInfoQCOMAnnotation>(lib));
        addAnnotation(make_smart<VkCommandBufferInheritanceRenderPassTransformInfoQCOMAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceRobustness2FeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceRobustness2PropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkSamplerCustomBorderColorCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceCustomBorderColorPropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceCustomBorderColorFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevicePrivateDataFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkDevicePrivateDataCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPrivateDataSlotCreateInfoEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDevicePipelineCreationCacheControlFeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceDiagnosticsConfigFeaturesNVAnnotation>(lib));
        addAnnotation(make_smart<VkDeviceDiagnosticsConfigCreateInfoNVAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMap2FeaturesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceFragmentDensityMap2PropertiesEXTAnnotation>(lib));
        addAnnotation(make_smart<VkPhysicalDeviceImageRobustnessFeaturesEXTAnnotation>(lib));
    }
};

REGISTER_MODULE(Module_vulkan);
