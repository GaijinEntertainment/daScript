require strings
require daslib/strings_boost

typedef
    module_info = tuple<string;string;string> const

var
    DAS_PAK_ROOT = "./"

var
    modules : array< function<(req,from:string):module_info> >

def module_default(req,from:string) : module_info
    let rs <- split_by_chars(req,"./")
    var fr <- split_by_chars(from,"/")
    let mod_name = rs[length(rs)-1]
    if length(fr)==0
        return [[auto mod_name, req + ".das", ""]]
    else
        pop(fr)
        for se in rs
            push(fr,se)
        let path_name = join(fr,"/") + ".das"
        return [[auto mod_name, path_name, ""]]

[export]
def module_get(req,from:string) : module_info
    print("get '{req}` from `{from}`\n")
    for mod in modules
        let res = invoke(mod,req,from)
        if res._0 != ""
            return res
    return module_default(req,from)

[export]
def module_allowed(mod:string#;fname:string#)
    print("is `{mod}` allowed in `{fname}`? yes\n")
    return true // false is not

[export]
def module_allowed_unsafe(mod:string#;fname:string#)
    print("is `{mod}` can be unsafe `{fname}`? {mod!=""}\n")
    return mod!=""